
Queue_Struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab8  08005ab8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac0  08005ac0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004088  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040fc  200040fc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015aee  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db0  00000000  00000000  00035b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00038948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  00039978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bc9  00000000  00000000  0003a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133e2  00000000  00000000  0005d459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d32ff  00000000  00000000  0007083b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143b3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c0  00000000  00000000  00143b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800586c 	.word	0x0800586c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800586c 	.word	0x0800586c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fbc3 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f867 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8f9 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8cd 	bl	800075c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*****   Create QUEUE   ******/
  St_Queue_Handle = xQueueCreate(2,sizeof(my_struct));
 80005c2:	2200      	movs	r2, #0
 80005c4:	210c      	movs	r1, #12
 80005c6:	2002      	movs	r0, #2
 80005c8:	f002 fee2 	bl	8003390 <xQueueGenericCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <main+0xa8>)
 80005d0:	6013      	str	r3, [r2, #0]
  if (St_Queue_Handle == 0)
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <main+0xa8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10d      	bne.n	80005f6 <main+0x4a>
  {
	  char *str = "Unable to create Structure queue\n";
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xac>)
 80005dc:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	6839      	ldr	r1, [r7, #0]
 80005ee:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0xb0>)
 80005f0:	f001 fe97 	bl	8002322 <HAL_UART_Transmit>
 80005f4:	e00c      	b.n	8000610 <main+0x64>
  }
  else
  {
	  char *str = "Structure queue created successfully\n";
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0xb4>)
 80005f8:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0xb0>)
 800060c:	f001 fe89 	bl	8002322 <HAL_UART_Transmit>
  }
  /**************** Task Related ***************/
  xTaskCreate(Sender1_Task, "Sender1", 128, NULL, 2, &Sender1_Task_Handle);
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <main+0xb8>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	4912      	ldr	r1, [pc, #72]	; (8000668 <main+0xbc>)
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0xc0>)
 8000620:	f003 fa5b 	bl	8003ada <xTaskCreate>
  xTaskCreate(Sender2_Task, "Sender2", 128, NULL, 2, &Sender2_Task_Handle);
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <main+0xc4>)
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2302      	movs	r3, #2
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	4910      	ldr	r1, [pc, #64]	; (8000674 <main+0xc8>)
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xcc>)
 8000634:	f003 fa51 	bl	8003ada <xTaskCreate>
  xTaskCreate(Receiver_Task, "Receiver", 128, NULL, 1, &Receiver_Task_Handle);
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0xd0>)
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2301      	movs	r3, #1
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	490e      	ldr	r1, [pc, #56]	; (8000680 <main+0xd4>)
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0xd8>)
 8000648:	f003 fa47 	bl	8003ada <xTaskCreate>

  //start the scheduler
  vTaskStartScheduler();
 800064c:	f003 fbb0 	bl	8003db0 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0xa4>
 8000652:	bf00      	nop
 8000654:	20004050 	.word	0x20004050
 8000658:	08005884 	.word	0x08005884
 800065c:	20004054 	.word	0x20004054
 8000660:	080058a8 	.word	0x080058a8
 8000664:	2000404c 	.word	0x2000404c
 8000668:	080058d0 	.word	0x080058d0
 800066c:	08000801 	.word	0x08000801
 8000670:	2000409c 	.word	0x2000409c
 8000674:	080058d8 	.word	0x080058d8
 8000678:	080008c5 	.word	0x080008c5
 800067c:	20004098 	.word	0x20004098
 8000680:	080058e0 	.word	0x080058e0
 8000684:	08000989 	.word	0x08000989

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fcc0 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fe67 	bl	80013e0 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f998 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f8c8 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f981 	bl	8000a4c <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f001 fd78 	bl	8002288 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f955 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20004054 	.word	0x20004054
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <Sender1_Task>:

/* USER CODE BEGIN 4 */
void Sender1_Task(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000808:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800080c:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered Sender1_Task\n about to SEND to queue\n\n";
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <Sender1_Task+0xac>)
 8000810:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000812:	6938      	ldr	r0, [r7, #16]
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	6939      	ldr	r1, [r7, #16]
 8000822:	4823      	ldr	r0, [pc, #140]	; (80008b0 <Sender1_Task+0xb0>)
 8000824:	f001 fd7d 	bl	8002322 <HAL_UART_Transmit>

		/******* ALLOACTE MEMORY TO THE PTR *******/
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 8000828:	200c      	movs	r0, #12
 800082a:	f004 f9d5 	bl	8004bd8 <pvPortMalloc>
 800082e:	4603      	mov	r3, r0
 8000830:	60bb      	str	r3, [r7, #8]

		/******* LOAD DATA TO STRUCTURE *******/
		ptrtostruct->counter = 1+indx1;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <Sender1_Task+0xb4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3201      	adds	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_vaule = 1000+indx1*100;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <Sender1_Task+0xb4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	b29b      	uxth	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	4413      	add	r3, r2
 8000848:	461a      	mov	r2, r3
 800084a:	0091      	lsls	r1, r2, #2
 800084c:	461a      	mov	r2, r3
 800084e:	460b      	mov	r3, r1
 8000850:	4413      	add	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	b29a      	uxth	r2, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800085c:	b292      	uxth	r2, r2
 800085e:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "HELLO FROM SENDER 1";
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <Sender1_Task+0xb8>)
 8000864:	601a      	str	r2, [r3, #0]

		/****** SEND DATA TO THE QUEUE *******/
		if(xQueueSend(St_Queue_Handle,&ptrtostruct,portMAX_DELAY) == pdPASS)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <Sender1_Task+0xbc>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f107 0108 	add.w	r1, r7, #8
 800086e:	2300      	movs	r3, #0
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	f002 fde6 	bl	8003444 <xQueueGenericSend>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d10c      	bne.n	8000898 <Sender1_Task+0x98>
		{
			char *str2 = " Successfully sent to the queue\nLeaving SENDER1 Task\n\n\n";
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <Sender1_Task+0xc0>)
 8000880:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	68f9      	ldr	r1, [r7, #12]
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <Sender1_Task+0xb0>)
 8000894:	f001 fd45 	bl	8002322 <HAL_UART_Transmit>
		}
		indx1+=1;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <Sender1_Task+0xb4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <Sender1_Task+0xb4>)
 80008a0:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f003 fa50 	bl	8003d48 <vTaskDelay>
	{
 80008a8:	e7b1      	b.n	800080e <Sender1_Task+0xe>
 80008aa:	bf00      	nop
 80008ac:	080058ec 	.word	0x080058ec
 80008b0:	20004054 	.word	0x20004054
 80008b4:	200002e4 	.word	0x200002e4
 80008b8:	0800591c 	.word	0x0800591c
 80008bc:	20004050 	.word	0x20004050
 80008c0:	08005930 	.word	0x08005930

080008c4 <Sender2_Task>:
	}
}

void Sender2_Task(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80008cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008d0:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered Sender2_Task\n about to SEND to queue\n\n";
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <Sender2_Task+0xac>)
 80008d4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008d6:	6938      	ldr	r0, [r7, #16]
 80008d8:	f7ff fc7a 	bl	80001d0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	6939      	ldr	r1, [r7, #16]
 80008e6:	4823      	ldr	r0, [pc, #140]	; (8000974 <Sender2_Task+0xb0>)
 80008e8:	f001 fd1b 	bl	8002322 <HAL_UART_Transmit>

		/******* ALLOACTE MEMORY TO THE PTR *******/
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 80008ec:	200c      	movs	r0, #12
 80008ee:	f004 f973 	bl	8004bd8 <pvPortMalloc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	60bb      	str	r3, [r7, #8]

		/******* LOAD DATA TO STRUCTURE *******/
		ptrtostruct->counter = 1+indx2;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Sender2_Task+0xb4>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3201      	adds	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_vaule = 2000+indx2*100;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <Sender2_Task+0xb4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	4413      	add	r3, r2
 800090c:	461a      	mov	r2, r3
 800090e:	0091      	lsls	r1, r2, #2
 8000910:	461a      	mov	r2, r3
 8000912:	460b      	mov	r3, r1
 8000914:	4413      	add	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	b29a      	uxth	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8000920:	b292      	uxth	r2, r2
 8000922:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "HELLO FROM SENDER 2";
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <Sender2_Task+0xb8>)
 8000928:	601a      	str	r2, [r3, #0]

		/****** SEND DATA TO THE QUEUE *******/
		if(xQueueSend(St_Queue_Handle,&ptrtostruct,portMAX_DELAY) == pdPASS)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <Sender2_Task+0xbc>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	f107 0108 	add.w	r1, r7, #8
 8000932:	2300      	movs	r3, #0
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	f002 fd84 	bl	8003444 <xQueueGenericSend>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10c      	bne.n	800095c <Sender2_Task+0x98>
		{
			char *str2 = " Successfully sent to the queue\nLeaving SENDER2 Task\n\n\n";
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <Sender2_Task+0xc0>)
 8000944:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff fc42 	bl	80001d0 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	b29a      	uxth	r2, r3
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	68f9      	ldr	r1, [r7, #12]
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <Sender2_Task+0xb0>)
 8000958:	f001 fce3 	bl	8002322 <HAL_UART_Transmit>
		}
		indx2+=1;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <Sender2_Task+0xb4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <Sender2_Task+0xb4>)
 8000964:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f003 f9ee 	bl	8003d48 <vTaskDelay>
	{
 800096c:	e7b1      	b.n	80008d2 <Sender2_Task+0xe>
 800096e:	bf00      	nop
 8000970:	08005968 	.word	0x08005968
 8000974:	20004054 	.word	0x20004054
 8000978:	200002e8 	.word	0x200002e8
 800097c:	08005998 	.word	0x08005998
 8000980:	20004050 	.word	0x20004050
 8000984:	080059ac 	.word	0x080059ac

08000988 <Receiver_Task>:
	}
}

void Receiver_Task(void *argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t TickDelay= pdMS_TO_TICKS(3000);
 8000990:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000994:	617b      	str	r3, [r7, #20]
	char *ptr;
	while(1)
	{
		char *str = "Entered Receiver_Task\n about to RECEIVE FROM queue\n\n";
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <Receiver_Task+0x90>)
 8000998:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800099a:	6938      	ldr	r0, [r7, #16]
 800099c:	f7ff fc18 	bl	80001d0 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <Receiver_Task+0x94>)
 80009ac:	f001 fcb9 	bl	8002322 <HAL_UART_Transmit>
		if(xQueueReceive(St_Queue_Handle, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <Receiver_Task+0x98>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f107 0108 	add.w	r1, r7, #8
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fe3f 	bl	8003640 <xQueueReceive>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d11e      	bne.n	8000a06 <Receiver_Task+0x7e>
		{
			ptr = pvPortMalloc(100*sizeof(char));
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f004 f905 	bl	8004bd8 <pvPortMalloc>
 80009ce:	60f8      	str	r0, [r7, #12]
			sprintf(ptr,"Received from queue: \n COUNTER = %d \n LARGE_VALUE = %d \n String: %s \n\n",
					Rptrtostruct->counter,Rptrtostruct->large_vaule,Rptrtostruct->str);
 80009d0:	68bb      	ldr	r3, [r7, #8]
			sprintf(ptr,"Received from queue: \n COUNTER = %d \n LARGE_VALUE = %d \n String: %s \n\n",
 80009d2:	685a      	ldr	r2, [r3, #4]
					Rptrtostruct->counter,Rptrtostruct->large_vaule,Rptrtostruct->str);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	891b      	ldrh	r3, [r3, #8]
			sprintf(ptr,"Received from queue: \n COUNTER = %d \n LARGE_VALUE = %d \n String: %s \n\n",
 80009d8:	4619      	mov	r1, r3
					Rptrtostruct->counter,Rptrtostruct->large_vaule,Rptrtostruct->str);
 80009da:	68bb      	ldr	r3, [r7, #8]
			sprintf(ptr,"Received from queue: \n COUNTER = %d \n LARGE_VALUE = %d \n String: %s \n\n",
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	460b      	mov	r3, r1
 80009e2:	4910      	ldr	r1, [pc, #64]	; (8000a24 <Receiver_Task+0x9c>)
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f004 fb21 	bl	800502c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)ptr, strlen (ptr), HAL_MAX_DELAY);
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff fbf0 	bl	80001d0 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	68f9      	ldr	r1, [r7, #12]
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <Receiver_Task+0x94>)
 80009fc:	f001 fc91 	bl	8002322 <HAL_UART_Transmit>

			vPortFree(ptr);
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f004 f9b5 	bl	8004d70 <vPortFree>
		}
		vPortFree(Rptrtostruct);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f9b1 	bl	8004d70 <vPortFree>

		vTaskDelay(TickDelay);
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f003 f99a 	bl	8003d48 <vTaskDelay>
	{
 8000a14:	e7bf      	b.n	8000996 <Receiver_Task+0xe>
 8000a16:	bf00      	nop
 8000a18:	080059e4 	.word	0x080059e4
 8000a1c:	20004054 	.word	0x20004054
 8000a20:	20004050 	.word	0x20004050
 8000a24:	08005a1c 	.word	0x08005a1c

08000a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3a:	f000 f9a1 	bl	8000d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40001000 	.word	0x40001000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_MspInit+0x54>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_MspInit+0x54>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 fa47 	bl	8000f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_UART_MspInit+0x94>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d133      	bne.n	8000b3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <HAL_UART_MspInit+0x9c>)
 8000b26:	f000 fabf 	bl	80010a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	2026      	movs	r0, #38	; 0x26
 8000b30:	f000 f9fe 	bl	8000f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b34:	2026      	movs	r0, #38	; 0x26
 8000b36:	f000 fa17 	bl	8000f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2036      	movs	r0, #54	; 0x36
 8000b66:	f000 f9e3 	bl	8000f30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6a:	2036      	movs	r0, #54	; 0x36
 8000b6c:	f000 f9fc 	bl	8000f68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f896 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b9c:	f001 f86c 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f001 f8a9 	bl	8001d2c <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f001 f8fd 	bl	8001de0 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	200040a0 	.word	0x200040a0
 8000c00:	40001000 	.word	0x40001000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART2_IRQHandler+0x10>)
 8000c36:	f001 fc07 	bl	8002448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20004054 	.word	0x20004054

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f001 f939 	bl	8001ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200040a0 	.word	0x200040a0

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f004 f990 	bl	8004fac <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	200002ec 	.word	0x200002ec
 8000cc0:	20004100 	.word	0x20004100

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */    ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 f94f 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc47 	bl	80005ac <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */    ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d2c:	08005ac8 	.word	0x08005ac8
  ldr r2, =_sbss
 8000d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d34:	200040fc 	.word	0x200040fc

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f8d8 	bl	8000f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fef0 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe72 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200040e8 	.word	0x200040e8

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200040e8 	.word	0x200040e8

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ff4c 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f42:	f7ff ff61 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f7ff ffb1 	bl	8000eb4 <NVIC_EncodePriority>
 8000f52:	4602      	mov	r2, r0
 8000f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff80 	bl	8000e60 <__NVIC_SetPriority>
}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff54 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f92:	f7ff ff09 	bl	8000da8 <HAL_GetTick>
 8000f96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e052      	b.n	800105c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0216 	bic.w	r2, r2, #22
 8000fc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <HAL_DMA_Abort+0x62>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0208 	bic.w	r2, r2, #8
 8000ff4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001006:	e013      	b.n	8001030 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001008:	f7ff fece 	bl	8000da8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b05      	cmp	r3, #5
 8001014:	d90c      	bls.n	8001030 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e015      	b.n	800105c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1e4      	bne.n	8001008 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001042:	223f      	movs	r2, #63	; 0x3f
 8001044:	409a      	lsls	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d004      	beq.n	8001082 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00c      	b.n	800109c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2205      	movs	r2, #5
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e16b      	b.n	800139c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 815a 	bne.w	8001396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80b4 	beq.w	8001396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a5b      	ldr	r2, [pc, #364]	; (80013b8 <HAL_GPIO_Init+0x310>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x314>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d02b      	beq.n	80012ce <HAL_GPIO_Init+0x226>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_GPIO_Init+0x318>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d025      	beq.n	80012ca <HAL_GPIO_Init+0x222>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x31c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01f      	beq.n	80012c6 <HAL_GPIO_Init+0x21e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_GPIO_Init+0x320>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x21a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <HAL_GPIO_Init+0x324>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x216>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <HAL_GPIO_Init+0x328>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x212>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <HAL_GPIO_Init+0x32c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <HAL_GPIO_Init+0x330>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x20a>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00e      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012b2:	2308      	movs	r3, #8
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4935      	ldr	r1, [pc, #212]	; (80013b8 <HAL_GPIO_Init+0x310>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_GPIO_Init+0x334>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_GPIO_Init+0x334>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_GPIO_Init+0x334>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x334>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f ae90 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40021c00 	.word	0x40021c00
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e264      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d00c      	beq.n	8001424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140a:	4ba0      	ldr	r3, [pc, #640]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b9d      	ldr	r3, [pc, #628]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b99      	ldr	r3, [pc, #612]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d05b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e23f      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x74>
 8001446:	4b91      	ldr	r3, [pc, #580]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a90      	ldr	r2, [pc, #576]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b8b      	ldr	r3, [pc, #556]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a8a      	ldr	r2, [pc, #552]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a87      	ldr	r2, [pc, #540]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001478:	4b84      	ldr	r3, [pc, #528]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a83      	ldr	r2, [pc, #524]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b81      	ldr	r3, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a80      	ldr	r2, [pc, #512]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc86 	bl	8000da8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc82 	bl	8000da8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e204      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc72 	bl	8000da8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fc6e 	bl	8000da8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1f0      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d063      	beq.n	80015be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b62      	ldr	r3, [pc, #392]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1c4      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4952      	ldr	r1, [pc, #328]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <HAL_RCC_OscConfig+0x2b0>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fc27 	bl	8000da8 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fc23 	bl	8000da8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a5      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4940      	ldr	r1, [pc, #256]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_RCC_OscConfig+0x2b0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fc06 	bl	8000da8 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc02 	bl	8000da8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e184      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d030      	beq.n	800162c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x2b4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbe6 	bl	8000da8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fbe2 	bl	8000da8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e164      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
 80015fe:	e015      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_OscConfig+0x2b4>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fbcf 	bl	8000da8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fbcb 	bl	8000da8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e14d      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a0 	beq.w	800177a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d121      	bne.n	80016ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x2b8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb91 	bl	8000da8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e011      	b.n	80016ae <HAL_RCC_OscConfig+0x2ce>
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	42470000 	.word	0x42470000
 8001694:	42470e80 	.word	0x42470e80
 8001698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff fb84 	bl	8000da8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e106      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x4e4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x32a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016d8:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	; 0x70
 80016e4:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x32a>
 80016f2:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fb49 	bl	8000da8 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb45 	bl	8000da8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0c5      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x33a>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb33 	bl	8000da8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb2f 	bl	8000da8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0af      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809b 	beq.w	80018ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d05c      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d141      	bne.n	800181c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fb03 	bl	8000da8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff faff 	bl	8000da8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e081      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	061b      	lsls	r3, r3, #24
 80017e8:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fad8 	bl	8000da8 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fad4 	bl	8000da8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e056      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x41c>
 800181a:	e04e      	b.n	80018ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fac1 	bl	8000da8 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fabd 	bl	8000da8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e03f      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x44a>
 8001848:	e037      	b.n	80018ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e032      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x4e8>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d028      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d11a      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800188c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40007000 	.word	0x40007000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	42470060 	.word	0x42470060

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cc      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d90c      	bls.n	800190c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d044      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e067      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f9f2 	bl	8000da8 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff f9ee 	bl	8000da8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d20c      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f86a 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08005a6c 	.word	0x08005a6c
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab4:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d00d      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f200 80bd 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ace:	e0b7      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ad2:	60bb      	str	r3, [r7, #8]
       break;
 8001ad4:	e0b7      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ad8:	60bb      	str	r3, [r7, #8]
      break;
 8001ada:	e0b4      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d04d      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	461a      	mov	r2, r3
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	ea02 0800 	and.w	r8, r2, r0
 8001b0a:	ea03 0901 	and.w	r9, r3, r1
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	014b      	lsls	r3, r1, #5
 8001b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b20:	0142      	lsls	r2, r0, #5
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	ebb0 0008 	subs.w	r0, r0, r8
 8001b2a:	eb61 0109 	sbc.w	r1, r1, r9
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	018b      	lsls	r3, r1, #6
 8001b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b3c:	0182      	lsls	r2, r0, #6
 8001b3e:	1a12      	subs	r2, r2, r0
 8001b40:	eb63 0301 	sbc.w	r3, r3, r1
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b52:	00d0      	lsls	r0, r2, #3
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	eb12 0208 	adds.w	r2, r2, r8
 8001b5c:	eb43 0309 	adc.w	r3, r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0259      	lsls	r1, r3, #9
 8001b6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b6e:	0250      	lsls	r0, r2, #9
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	f7fe fb7e 	bl	8000280 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e04a      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	461a      	mov	r2, r3
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	ea02 0400 	and.w	r4, r2, r0
 8001ba6:	ea03 0501 	and.w	r5, r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	014b      	lsls	r3, r1, #5
 8001bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bbc:	0142      	lsls	r2, r0, #5
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	1b00      	subs	r0, r0, r4
 8001bc4:	eb61 0105 	sbc.w	r1, r1, r5
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	018b      	lsls	r3, r1, #6
 8001bd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd6:	0182      	lsls	r2, r0, #6
 8001bd8:	1a12      	subs	r2, r2, r0
 8001bda:	eb63 0301 	sbc.w	r3, r3, r1
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	00d9      	lsls	r1, r3, #3
 8001be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bec:	00d0      	lsls	r0, r2, #3
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	1912      	adds	r2, r2, r4
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0299      	lsls	r1, r3, #10
 8001c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c06:	0290      	lsls	r0, r2, #10
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe fb32 	bl	8000280 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c42:	60bb      	str	r3, [r7, #8]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	68bb      	ldr	r3, [r7, #8]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08005a7c 	.word	0x08005a7c

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffdc 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08005a7c 	.word	0x08005a7c

08001cc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCC_GetClockConfig+0x60>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0207 	and.w	r2, r3, #7
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f839 	bl	8001dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f9d8 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04e      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d01d      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_TIM_Base_Start_IT+0xcc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d010      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40001800 	.word	0x40001800

08001ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0202 	mvn.w	r2, #2
 8001eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8ee 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8e0 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8f1 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0204 	mvn.w	r2, #4
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8c4 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8b6 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8c7 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0208 	mvn.w	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f89a 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f88c 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f89d 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f870 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f862 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f873 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fcf2 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f902 	bl	8002274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f838 	bl	800210c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0220 	mvn.w	r2, #32
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8cc 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <TIM_Base_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213e:	d00f      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <TIM_Base_SetConfig+0x118>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00b      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <TIM_Base_SetConfig+0x11c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <TIM_Base_SetConfig+0x120>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <TIM_Base_SetConfig+0x124>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <TIM_Base_SetConfig+0x114>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d027      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <TIM_Base_SetConfig+0x118>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d023      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2b      	ldr	r2, [pc, #172]	; (800223c <TIM_Base_SetConfig+0x11c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <TIM_Base_SetConfig+0x120>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <TIM_Base_SetConfig+0x124>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <TIM_Base_SetConfig+0x128>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <TIM_Base_SetConfig+0x12c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <TIM_Base_SetConfig+0x130>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <TIM_Base_SetConfig+0x134>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <TIM_Base_SetConfig+0x138>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <TIM_Base_SetConfig+0x13c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <TIM_Base_SetConfig+0x114>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0xf8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <TIM_Base_SetConfig+0x124>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010000 	.word	0x40010000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40010400 	.word	0x40010400
 8002248:	40014000 	.word	0x40014000
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800
 8002254:	40001800 	.word	0x40001800
 8002258:	40001c00 	.word	0x40001c00
 800225c:	40002000 	.word	0x40002000

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e03f      	b.n	800231a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fbfe 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fd7b 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b08a      	sub	sp, #40	; 0x28
 8002326:	af02      	add	r7, sp, #8
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	d17c      	bne.n	800243c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_UART_Transmit+0x2c>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e075      	b.n	800243e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_UART_Transmit+0x3e>
 800235c:	2302      	movs	r3, #2
 800235e:	e06e      	b.n	800243e <HAL_UART_Transmit+0x11c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2221      	movs	r2, #33	; 0x21
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe fd17 	bl	8000da8 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002390:	d108      	bne.n	80023a4 <HAL_UART_Transmit+0x82>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e003      	b.n	80023ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023b4:	e02a      	b.n	800240c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 faf9 	bl	80029b8 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e036      	b.n	800243e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3302      	adds	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e007      	b.n	80023fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1cf      	bne.n	80023b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fac9 	bl	80029b8 <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e006      	b.n	800243e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0ba      	sub	sp, #232	; 0xe8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_UART_IRQHandler+0x66>
 800249a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fbd3 	bl	8002c52 <UART_Receive_IT>
      return;
 80024ac:	e256      	b.n	800295c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80de 	beq.w	8002674 <HAL_UART_IRQHandler+0x22c>
 80024b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80d1 	beq.w	8002674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_UART_IRQHandler+0xae>
 80024de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_UART_IRQHandler+0xd2>
 8002502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_UART_IRQHandler+0xf6>
 8002526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f043 0204 	orr.w	r2, r3, #4
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800253e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d011      	beq.n	800256e <HAL_UART_IRQHandler+0x126>
 800254a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 81ed 	beq.w	8002952 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_UART_IRQHandler+0x14e>
 8002584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb5e 	bl	8002c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_UART_IRQHandler+0x17a>
 80025ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d04f      	beq.n	8002662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa66 	bl	8002a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	d141      	bne.n	800265a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3314      	adds	r3, #20
 80025dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800260e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800261a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1d9      	bne.n	80025d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d013      	beq.n	8002652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_UART_IRQHandler+0x3dc>)
 8002630:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd14 	bl	8001064 <HAL_DMA_Abort_IT>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800264c:	4610      	mov	r0, r2
 800264e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00e      	b.n	8002670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f99a 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e00a      	b.n	8002670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f996 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	e006      	b.n	8002670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f992 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800266e:	e170      	b.n	8002952 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	bf00      	nop
    return;
 8002672:	e16e      	b.n	8002952 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 814a 	bne.w	8002912 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8143 	beq.w	8002912 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 813c 	beq.w	8002912 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	f040 80b4 	bne.w	8002828 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8140 	beq.w	8002956 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026de:	429a      	cmp	r2, r3
 80026e0:	f080 8139 	bcs.w	8002956 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f6:	f000 8088 	beq.w	800280a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002732:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800273e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1d9      	bne.n	80026fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800276a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800276e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002776:	e841 2300 	strex	r3, r2, [r1]
 800277a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800277c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e1      	bne.n	8002746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3314      	adds	r3, #20
 8002788:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e3      	bne.n	8002782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e3      	bne.n	80027c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fbbd 	bl	8000f84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002812:	b29b      	uxth	r3, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29b      	uxth	r3, r3
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8c0 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002820:	e099      	b.n	8002956 <HAL_UART_IRQHandler+0x50e>
 8002822:	bf00      	nop
 8002824:	08002b5b 	.word	0x08002b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 808b 	beq.w	800295a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8086 	beq.w	800295a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002872:	647a      	str	r2, [r7, #68]	; 0x44
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800287a:	e841 2300 	strex	r3, r2, [r1]
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e3      	bne.n	800284e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3314      	adds	r3, #20
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	623b      	str	r3, [r7, #32]
   return(result);
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3314      	adds	r3, #20
 80028a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028aa:	633a      	str	r2, [r7, #48]	; 0x30
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e3      	bne.n	8002886 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	60fb      	str	r3, [r7, #12]
   return(result);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0310 	bic.w	r3, r3, #16
 80028e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028f0:	61fa      	str	r2, [r7, #28]
 80028f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	69b9      	ldr	r1, [r7, #24]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	617b      	str	r3, [r7, #20]
   return(result);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e3      	bne.n	80028cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f848 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002910:	e023      	b.n	800295a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_UART_IRQHandler+0x4ea>
 800291e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f929 	bl	8002b82 <UART_Transmit_IT>
    return;
 8002930:	e014      	b.n	800295c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <HAL_UART_IRQHandler+0x514>
 800293e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f969 	bl	8002c22 <UART_EndTransmit_IT>
    return;
 8002950:	e004      	b.n	800295c <HAL_UART_IRQHandler+0x514>
    return;
 8002952:	bf00      	nop
 8002954:	e002      	b.n	800295c <HAL_UART_IRQHandler+0x514>
      return;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_UART_IRQHandler+0x514>
      return;
 800295a:	bf00      	nop
  }
}
 800295c:	37e8      	adds	r7, #232	; 0xe8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop

08002964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b090      	sub	sp, #64	; 0x40
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c8:	e050      	b.n	8002a6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d04c      	beq.n	8002a6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d8:	f7fe f9e6 	bl	8000da8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d241      	bcs.n	8002a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a08:	637a      	str	r2, [r7, #52]	; 0x34
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a3c:	623a      	str	r2, [r7, #32]
 8002a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	69f9      	ldr	r1, [r7, #28]
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e00f      	b.n	8002a8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d09f      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3740      	adds	r7, #64	; 0x40
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b095      	sub	sp, #84	; 0x54
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002abc:	643a      	str	r2, [r7, #64]	; 0x40
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d119      	bne.n	8002b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0310 	bic.w	r3, r3, #16
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b2c:	61ba      	str	r2, [r7, #24]
 8002b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6979      	ldr	r1, [r7, #20]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b4e:	bf00      	nop
 8002b50:	3754      	adds	r7, #84	; 0x54
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff09 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b21      	cmp	r3, #33	; 0x21
 8002b94:	d13e      	bne.n	8002c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	d114      	bne.n	8002bca <UART_Transmit_IT+0x48>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d110      	bne.n	8002bca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	1c9a      	adds	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]
 8002bc8:	e008      	b.n	8002bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	1c59      	adds	r1, r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6211      	str	r1, [r2, #32]
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10f      	bne.n	8002c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fe8e 	bl	8002964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08c      	sub	sp, #48	; 0x30
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b22      	cmp	r3, #34	; 0x22
 8002c64:	f040 80ab 	bne.w	8002dbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d117      	bne.n	8002ca2 <UART_Receive_IT+0x50>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d113      	bne.n	8002ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca0:	e026      	b.n	8002cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d007      	beq.n	8002cc6 <UART_Receive_IT+0x74>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <UART_Receive_IT+0x82>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e008      	b.n	8002ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d15a      	bne.n	8002dba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0220 	bic.w	r2, r2, #32
 8002d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d135      	bne.n	8002db0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f023 0310 	bic.w	r3, r3, #16
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6a:	623a      	str	r2, [r7, #32]
 8002d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	69f9      	ldr	r1, [r7, #28]
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e5      	bne.n	8002d4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d10a      	bne.n	8002da2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fdf9 	bl	80029a0 <HAL_UARTEx_RxEventCallback>
 8002dae:	e002      	b.n	8002db6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fde1 	bl	8002978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e002      	b.n	8002dc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3730      	adds	r7, #48	; 0x30
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	b09f      	sub	sp, #124	; 0x7c
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dde:	68d9      	ldr	r1, [r3, #12]
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	ea40 0301 	orr.w	r3, r0, r1
 8002de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e0c:	f021 010c 	bic.w	r1, r1, #12
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e16:	430b      	orrs	r3, r1
 8002e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	6999      	ldr	r1, [r3, #24]
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	ea40 0301 	orr.w	r3, r0, r1
 8002e30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4bc5      	ldr	r3, [pc, #788]	; (800314c <UART_SetConfig+0x384>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d004      	beq.n	8002e46 <UART_SetConfig+0x7e>
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4bc3      	ldr	r3, [pc, #780]	; (8003150 <UART_SetConfig+0x388>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d103      	bne.n	8002e4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e46:	f7fe ff2b 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8002e4a:	6778      	str	r0, [r7, #116]	; 0x74
 8002e4c:	e002      	b.n	8002e54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e4e:	f7fe ff13 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002e52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5c:	f040 80b6 	bne.w	8002fcc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	461c      	mov	r4, r3
 8002e64:	f04f 0500 	mov.w	r5, #0
 8002e68:	4622      	mov	r2, r4
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e70:	415b      	adcs	r3, r3
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
 8002e74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e78:	1912      	adds	r2, r2, r4
 8002e7a:	eb45 0303 	adc.w	r3, r5, r3
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	00d9      	lsls	r1, r3, #3
 8002e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8c:	00d0      	lsls	r0, r2, #3
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	1911      	adds	r1, r2, r4
 8002e94:	6639      	str	r1, [r7, #96]	; 0x60
 8002e96:	416b      	adcs	r3, r5
 8002e98:	667b      	str	r3, [r7, #100]	; 0x64
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002eb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002eb4:	f7fd f9e4 	bl	8000280 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4ba5      	ldr	r3, [pc, #660]	; (8003154 <UART_SetConfig+0x38c>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	011e      	lsls	r6, r3, #4
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec8:	461c      	mov	r4, r3
 8002eca:	f04f 0500 	mov.w	r5, #0
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ede:	1912      	adds	r2, r2, r4
 8002ee0:	eb45 0303 	adc.w	r3, r5, r3
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	00d9      	lsls	r1, r3, #3
 8002eee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ef2:	00d0      	lsls	r0, r2, #3
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	1911      	adds	r1, r2, r4
 8002efa:	65b9      	str	r1, [r7, #88]	; 0x58
 8002efc:	416b      	adcs	r3, r5
 8002efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	1891      	adds	r1, r2, r2
 8002f0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f0e:	415b      	adcs	r3, r3
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f1a:	f7fd f9b1 	bl	8000280 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <UART_SetConfig+0x38c>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	3332      	adds	r3, #50	; 0x32
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <UART_SetConfig+0x38c>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f44:	441e      	add	r6, r3
 8002f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	1894      	adds	r4, r2, r2
 8002f54:	623c      	str	r4, [r7, #32]
 8002f56:	415b      	adcs	r3, r3
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f5e:	1812      	adds	r2, r2, r0
 8002f60:	eb41 0303 	adc.w	r3, r1, r3
 8002f64:	f04f 0400 	mov.w	r4, #0
 8002f68:	f04f 0500 	mov.w	r5, #0
 8002f6c:	00dd      	lsls	r5, r3, #3
 8002f6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f72:	00d4      	lsls	r4, r2, #3
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	1814      	adds	r4, r2, r0
 8002f7a:	653c      	str	r4, [r7, #80]	; 0x50
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	61b9      	str	r1, [r7, #24]
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f9a:	f7fd f971 	bl	8000280 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <UART_SetConfig+0x38c>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <UART_SetConfig+0x38c>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 0207 	and.w	r2, r3, #7
 8002fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4432      	add	r2, r6
 8002fc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fca:	e0b9      	b.n	8003140 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	461c      	mov	r4, r3
 8002fd0:	f04f 0500 	mov.w	r5, #0
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	6139      	str	r1, [r7, #16]
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fe4:	1912      	adds	r2, r2, r4
 8002fe6:	eb45 0303 	adc.w	r3, r5, r3
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	eb12 0804 	adds.w	r8, r2, r4
 8003002:	eb43 0905 	adc.w	r9, r3, r5
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	008b      	lsls	r3, r1, #2
 800301a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800301e:	0082      	lsls	r2, r0, #2
 8003020:	4640      	mov	r0, r8
 8003022:	4649      	mov	r1, r9
 8003024:	f7fd f92c 	bl	8000280 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b49      	ldr	r3, [pc, #292]	; (8003154 <UART_SetConfig+0x38c>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011e      	lsls	r6, r3, #4
 8003036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003038:	4618      	mov	r0, r3
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	1894      	adds	r4, r2, r2
 8003044:	60bc      	str	r4, [r7, #8]
 8003046:	415b      	adcs	r3, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800304e:	1812      	adds	r2, r2, r0
 8003050:	eb41 0303 	adc.w	r3, r1, r3
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	f04f 0500 	mov.w	r5, #0
 800305c:	00dd      	lsls	r5, r3, #3
 800305e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003062:	00d4      	lsls	r4, r2, #3
 8003064:	4622      	mov	r2, r4
 8003066:	462b      	mov	r3, r5
 8003068:	1814      	adds	r4, r2, r0
 800306a:	64bc      	str	r4, [r7, #72]	; 0x48
 800306c:	414b      	adcs	r3, r1
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	008b      	lsls	r3, r1, #2
 8003084:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003088:	0082      	lsls	r2, r0, #2
 800308a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800308e:	f7fd f8f7 	bl	8000280 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <UART_SetConfig+0x38c>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <UART_SetConfig+0x38c>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b6:	441e      	add	r6, r3
 80030b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ba:	4618      	mov	r0, r3
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	1894      	adds	r4, r2, r2
 80030c6:	603c      	str	r4, [r7, #0]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d0:	1812      	adds	r2, r2, r0
 80030d2:	eb41 0303 	adc.w	r3, r1, r3
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	f04f 0500 	mov.w	r5, #0
 80030de:	00dd      	lsls	r5, r3, #3
 80030e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030e4:	00d4      	lsls	r4, r2, #3
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	eb12 0a00 	adds.w	sl, r2, r0
 80030ee:	eb43 0b01 	adc.w	fp, r3, r1
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	008b      	lsls	r3, r1, #2
 8003106:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800310a:	0082      	lsls	r2, r0, #2
 800310c:	4650      	mov	r0, sl
 800310e:	4659      	mov	r1, fp
 8003110:	f7fd f8b6 	bl	8000280 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <UART_SetConfig+0x38c>)
 800311a:	fba3 1302 	umull	r1, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2164      	movs	r1, #100	; 0x64
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	3332      	adds	r3, #50	; 0x32
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <UART_SetConfig+0x38c>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4432      	add	r2, r6
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	377c      	adds	r7, #124	; 0x7c
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	51eb851f 	.word	0x51eb851f

08003158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f103 0208 	add.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f103 0208 	add.w	r2, r3, #8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f103 0208 	add.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d103      	bne.n	800321a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e00c      	b.n	8003234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3308      	adds	r3, #8
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e002      	b.n	8003228 <vListInsert+0x2e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	d2f6      	bcs.n	8003222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6892      	ldr	r2, [r2, #8]
 8003282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6852      	ldr	r2, [r2, #4]
 800328c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d103      	bne.n	80032a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032ea:	f001 fb93 	bl	8004a14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	3b01      	subs	r3, #1
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	441a      	add	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d114      	bne.n	800336a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01a      	beq.n	800337e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3310      	adds	r3, #16
 800334c:	4618      	mov	r0, r3
 800334e:	f000 ff71 	bl	8004234 <xTaskRemoveFromEventList>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <xQueueGenericReset+0xcc>)
 800335a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	e009      	b.n	800337e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3310      	adds	r3, #16
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fef2 	bl	8003158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff feed 	bl	8003158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800337e:	f001 fb79 	bl	8004a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	613b      	str	r3, [r7, #16]
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3348      	adds	r3, #72	; 0x48
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fc05 	bl	8004bd8 <pvPortMalloc>
 80033ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3348      	adds	r3, #72	; 0x48
 80033de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e8:	79fa      	ldrb	r2, [r7, #7]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f805 	bl	8003404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033fa:	69bb      	ldr	r3, [r7, #24]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e002      	b.n	8003426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003432:	2101      	movs	r1, #1
 8003434:	69b8      	ldr	r0, [r7, #24]
 8003436:	f7ff ff43 	bl	80032c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	; 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericSend+0x32>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueGenericSend+0x40>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <xQueueGenericSend+0x44>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueGenericSend+0x46>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xQueueGenericSend+0x60>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSend+0x6e>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <xQueueGenericSend+0x72>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericSend+0x74>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d2:	f001 f86b 	bl	80045ac <xTaskGetSchedulerState>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <xQueueGenericSend+0x9e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <xQueueGenericSend+0xa2>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <xQueueGenericSend+0xa4>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xQueueGenericSend+0xbe>
	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	61fb      	str	r3, [r7, #28]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003502:	f001 fa87 	bl	8004a14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <xQueueGenericSend+0xd4>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d129      	bne.n	800356c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800351e:	f000 f96f 	bl	8003800 <prvCopyDataToQueue>
 8003522:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fe7f 	bl	8004234 <xTaskRemoveFromEventList>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800353c:	4b3f      	ldr	r3, [pc, #252]	; (800363c <xQueueGenericSend+0x1f8>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	e00a      	b.n	8003564 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <xQueueGenericSend+0x1f8>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003564:	f001 fa86 	bl	8004a74 <vPortExitCritical>
				return pdPASS;
 8003568:	2301      	movs	r3, #1
 800356a:	e063      	b.n	8003634 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003572:	f001 fa7f 	bl	8004a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003576:	2300      	movs	r3, #0
 8003578:	e05c      	b.n	8003634 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4618      	mov	r0, r3
 8003586:	f000 feb7 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358e:	f001 fa71 	bl	8004a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003592:	f000 fc6d 	bl	8003e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003596:	f001 fa3d 	bl	8004a14 <vPortEnterCritical>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d103      	bne.n	80035b0 <xQueueGenericSend+0x16c>
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d103      	bne.n	80035c6 <xQueueGenericSend+0x182>
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c6:	f001 fa55 	bl	8004a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ca:	1d3a      	adds	r2, r7, #4
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fea6 	bl	8004324 <xTaskCheckForTimeOut>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d124      	bne.n	8003628 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e0:	f000 fa06 	bl	80039f0 <prvIsQueueFull>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	3310      	adds	r3, #16
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fdfa 	bl	80041ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fa:	f000 f991 	bl	8003920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035fe:	f000 fc45 	bl	8003e8c <xTaskResumeAll>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f af7c 	bne.w	8003502 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <xQueueGenericSend+0x1f8>)
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	e772      	b.n	8003502 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800361c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361e:	f000 f97f 	bl	8003920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003622:	f000 fc33 	bl	8003e8c <xTaskResumeAll>
 8003626:	e76c      	b.n	8003502 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362a:	f000 f979 	bl	8003920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362e:	f000 fc2d 	bl	8003e8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003634:	4618      	mov	r0, r3
 8003636:	3738      	adds	r7, #56	; 0x38
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <xQueueReceive+0x30>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	623b      	str	r3, [r7, #32]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <xQueueReceive+0x3e>
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <xQueueReceive+0x42>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <xQueueReceive+0x44>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <xQueueReceive+0x5e>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	61fb      	str	r3, [r7, #28]
}
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800369e:	f000 ff85 	bl	80045ac <xTaskGetSchedulerState>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <xQueueReceive+0x6e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <xQueueReceive+0x72>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <xQueueReceive+0x74>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xQueueReceive+0x8e>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	61bb      	str	r3, [r7, #24]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036ce:	f001 f9a1 	bl	8004a14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01f      	beq.n	800371e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e2:	f000 f8f7 	bl	80038d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00f      	beq.n	8003716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	3310      	adds	r3, #16
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fd9a 	bl	8004234 <xTaskRemoveFromEventList>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003706:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <xQueueReceive+0x1bc>)
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003716:	f001 f9ad 	bl	8004a74 <vPortExitCritical>
				return pdPASS;
 800371a:	2301      	movs	r3, #1
 800371c:	e069      	b.n	80037f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d103      	bne.n	800372c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003724:	f001 f9a6 	bl	8004a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003728:	2300      	movs	r3, #0
 800372a:	e062      	b.n	80037f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fdde 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003740:	f001 f998 	bl	8004a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003744:	f000 fb94 	bl	8003e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003748:	f001 f964 	bl	8004a14 <vPortEnterCritical>
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d103      	bne.n	8003762 <xQueueReceive+0x122>
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003768:	b25b      	sxtb	r3, r3
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d103      	bne.n	8003778 <xQueueReceive+0x138>
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003778:	f001 f97c 	bl	8004a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800377c:	1d3a      	adds	r2, r7, #4
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fdcd 	bl	8004324 <xTaskCheckForTimeOut>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d123      	bne.n	80037d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003792:	f000 f917 	bl	80039c4 <prvIsQueueEmpty>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	3324      	adds	r3, #36	; 0x24
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd21 	bl	80041ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ac:	f000 f8b8 	bl	8003920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037b0:	f000 fb6c 	bl	8003e8c <xTaskResumeAll>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d189      	bne.n	80036ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <xQueueReceive+0x1bc>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	e780      	b.n	80036ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ce:	f000 f8a7 	bl	8003920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037d2:	f000 fb5b 	bl	8003e8c <xTaskResumeAll>
 80037d6:	e77a      	b.n	80036ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037da:	f000 f8a1 	bl	8003920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037de:	f000 fb55 	bl	8003e8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e4:	f000 f8ee 	bl	80039c4 <prvIsQueueEmpty>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f43f af6f 	beq.w	80036ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3730      	adds	r7, #48	; 0x30
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d14d      	bne.n	80038c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fedc 	bl	80045e8 <xTaskPriorityDisinherit>
 8003830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e043      	b.n	80038c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d119      	bne.n	8003874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6858      	ldr	r0, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	461a      	mov	r2, r3
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	f001 fbd8 	bl	8005000 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d32b      	bcc.n	80038c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e026      	b.n	80038c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68d8      	ldr	r0, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	461a      	mov	r2, r3
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	f001 fbbe 	bl	8005000 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	425b      	negs	r3, r3
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	425b      	negs	r3, r3
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d105      	bne.n	80038c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	3b01      	subs	r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ca:	697b      	ldr	r3, [r7, #20]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d303      	bcc.n	8003908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68d9      	ldr	r1, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	461a      	mov	r2, r3
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	f001 fb74 	bl	8005000 <memcpy>
	}
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003928:	f001 f874 	bl	8004a14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003934:	e011      	b.n	800395a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fc76 	bl	8004234 <xTaskRemoveFromEventList>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800394e:	f000 fd4b 	bl	80043e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	3b01      	subs	r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	dce9      	bgt.n	8003936 <prvUnlockQueue+0x16>
 8003962:	e000      	b.n	8003966 <prvUnlockQueue+0x46>
					break;
 8003964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800396e:	f001 f881 	bl	8004a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003972:	f001 f84f 	bl	8004a14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800397e:	e011      	b.n	80039a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d012      	beq.n	80039ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3310      	adds	r3, #16
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fc51 	bl	8004234 <xTaskRemoveFromEventList>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003998:	f000 fd26 	bl	80043e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800399c:	7bbb      	ldrb	r3, [r7, #14]
 800399e:	3b01      	subs	r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dce9      	bgt.n	8003980 <prvUnlockQueue+0x60>
 80039ac:	e000      	b.n	80039b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039b8:	f001 f85c 	bl	8004a74 <vPortExitCritical>
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039cc:	f001 f822 	bl	8004a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e001      	b.n	80039e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039e2:	f001 f847 	bl	8004a74 <vPortExitCritical>

	return xReturn;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039f8:	f001 f80c 	bl	8004a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d102      	bne.n	8003a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e001      	b.n	8003a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a12:	f001 f82f 	bl	8004a74 <vPortExitCritical>

	return xReturn;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af04      	add	r7, sp, #16
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	61fb      	str	r3, [r7, #28]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a66:	2354      	movs	r3, #84	; 0x54
 8003a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b54      	cmp	r3, #84	; 0x54
 8003a6e:	d00a      	beq.n	8003a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61bb      	str	r3, [r7, #24]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01e      	beq.n	8003acc <xTaskCreateStatic+0xac>
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9303      	str	r3, [sp, #12]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	9302      	str	r3, [sp, #8]
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f850 	bl	8003b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac6:	f000 f8d5 	bl	8003c74 <prvAddNewTaskToReadyList>
 8003aca:	e001      	b.n	8003ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ad0:	697b      	ldr	r3, [r7, #20]
	}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08c      	sub	sp, #48	; 0x30
 8003ade:	af04      	add	r7, sp, #16
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f872 	bl	8004bd8 <pvPortMalloc>
 8003af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003afc:	2054      	movs	r0, #84	; 0x54
 8003afe:	f001 f86b 	bl	8004bd8 <pvPortMalloc>
 8003b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b10:	e005      	b.n	8003b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f001 f92c 	bl	8004d70 <vPortFree>
 8003b18:	e001      	b.n	8003b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9303      	str	r3, [sp, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	9302      	str	r3, [sp, #8]
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f80e 	bl	8003b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f000 f893 	bl	8003c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e002      	b.n	8003b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	617b      	str	r3, [r7, #20]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01f      	beq.n	8003bf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e012      	b.n	8003bde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	7819      	ldrb	r1, [r3, #0]
 8003bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3334      	adds	r3, #52	; 0x34
 8003bc8:	460a      	mov	r2, r1
 8003bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b0f      	cmp	r3, #15
 8003be2:	d9e9      	bls.n	8003bb8 <prvInitialiseNewTask+0x54>
 8003be4:	e000      	b.n	8003be8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf0:	e003      	b.n	8003bfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d901      	bls.n	8003c04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c00:	2306      	movs	r3, #6
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2200      	movs	r2, #0
 8003c14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fabc 	bl	8003198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3318      	adds	r3, #24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fab7 	bl	8003198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	f1c3 0207 	rsb	r2, r3, #7
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	2200      	movs	r2, #0
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	69b8      	ldr	r0, [r7, #24]
 8003c54:	f000 fdb4 	bl	80047c0 <pxPortInitialiseStack>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c7c:	f000 feca 	bl	8004a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c8a:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c92:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d110      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ca0:	f000 fbc6 	bl	8004430 <prvInitialiseTaskLists>
 8003ca4:	e00d      	b.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <prvAddNewTaskToReadyList+0xc0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d802      	bhi.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003cca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <prvAddNewTaskToReadyList+0xcc>)
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7ff fa5c 	bl	80031b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cfa:	f000 febb 	bl	8004a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <prvAddNewTaskToReadyList+0xc0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <prvAddNewTaskToReadyList+0xd0>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200003f0 	.word	0x200003f0
 8003d30:	200002f0 	.word	0x200002f0
 8003d34:	200003fc 	.word	0x200003fc
 8003d38:	2000040c 	.word	0x2000040c
 8003d3c:	200003f8 	.word	0x200003f8
 8003d40:	200002f4 	.word	0x200002f4
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <vTaskDelay+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <vTaskDelay+0x30>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d78:	f000 f87a 	bl	8003e70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fcb8 	bl	80046f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d84:	f000 f882 	bl	8003e8c <xTaskResumeAll>
 8003d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <vTaskDelay+0x64>)
 8003d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000418 	.word	0x20000418
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dbe:	463a      	mov	r2, r7
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fbd6 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	9202      	str	r2, [sp, #8]
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	460a      	mov	r2, r1
 8003dde:	491e      	ldr	r1, [pc, #120]	; (8003e58 <vTaskStartScheduler+0xa8>)
 8003de0:	481e      	ldr	r0, [pc, #120]	; (8003e5c <vTaskStartScheduler+0xac>)
 8003de2:	f7ff fe1d 	bl	8003a20 <xTaskCreateStatic>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <vTaskStartScheduler+0xb0>)
 8003dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <vTaskStartScheduler+0xb0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e001      	b.n	8003dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d116      	bne.n	8003e32 <vTaskStartScheduler+0x82>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	613b      	str	r3, [r7, #16]
}
 8003e16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <vTaskStartScheduler+0xb4>)
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <vTaskStartScheduler+0xb8>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <vTaskStartScheduler+0xbc>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e2c:	f000 fd50 	bl	80048d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e30:	e00e      	b.n	8003e50 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d10a      	bne.n	8003e50 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60fb      	str	r3, [r7, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <vTaskStartScheduler+0x9e>
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	08005a64 	.word	0x08005a64
 8003e5c:	08004401 	.word	0x08004401
 8003e60:	20000414 	.word	0x20000414
 8003e64:	20000410 	.word	0x20000410
 8003e68:	200003fc 	.word	0x200003fc
 8003e6c:	200003f4 	.word	0x200003f4

08003e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <vTaskSuspendAll+0x18>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a03      	ldr	r2, [pc, #12]	; (8003e88 <vTaskSuspendAll+0x18>)
 8003e7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000418 	.word	0x20000418

08003e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	603b      	str	r3, [r7, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eb8:	f000 fdac 	bl	8004a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ebc:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4a37      	ldr	r2, [pc, #220]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ec4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d161      	bne.n	8003f92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ece:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <xTaskResumeAll+0x118>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d05d      	beq.n	8003f92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed6:	e02e      	b.n	8003f36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <xTaskResumeAll+0x11c>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3318      	adds	r3, #24
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f9c1 	bl	800326c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f9bc 	bl	800326c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <xTaskResumeAll+0x120>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <xTaskResumeAll+0x120>)
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <xTaskResumeAll+0x124>)
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7ff f948 	bl	80031b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <xTaskResumeAll+0x128>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <xTaskResumeAll+0x11c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1cc      	bne.n	8003ed8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f44:	f000 fb12 	bl	800456c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <xTaskResumeAll+0x130>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f54:	f000 f836 	bl	8003fc4 <xTaskIncrementTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f1      	bne.n	8003f54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <xTaskResumeAll+0x130>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <xTaskResumeAll+0x134>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f92:	f000 fd6f 	bl	8004a74 <vPortExitCritical>

	return xAlreadyYielded;
 8003f96:	68bb      	ldr	r3, [r7, #8]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000418 	.word	0x20000418
 8003fa4:	200003f0 	.word	0x200003f0
 8003fa8:	200003b0 	.word	0x200003b0
 8003fac:	200003f8 	.word	0x200003f8
 8003fb0:	200002f4 	.word	0x200002f4
 8003fb4:	200002f0 	.word	0x200002f0
 8003fb8:	20000404 	.word	0x20000404
 8003fbc:	20000400 	.word	0x20000400
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <xTaskIncrementTick+0x144>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 808e 	bne.w	80040f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <xTaskIncrementTick+0x148>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	; (800410c <xTaskIncrementTick+0x148>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d120      	bne.n	800402e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fec:	4b48      	ldr	r3, [pc, #288]	; (8004110 <xTaskIncrementTick+0x14c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <xTaskIncrementTick+0x48>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	603b      	str	r3, [r7, #0]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xTaskIncrementTick+0x46>
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <xTaskIncrementTick+0x14c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	4b40      	ldr	r3, [pc, #256]	; (8004114 <xTaskIncrementTick+0x150>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <xTaskIncrementTick+0x14c>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <xTaskIncrementTick+0x150>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <xTaskIncrementTick+0x154>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <xTaskIncrementTick+0x154>)
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	f000 fa9f 	bl	800456c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <xTaskIncrementTick+0x158>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d348      	bcc.n	80040ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <xTaskIncrementTick+0x14c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d104      	bne.n	800404c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <xTaskIncrementTick+0x158>)
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	601a      	str	r2, [r3, #0]
					break;
 800404a:	e03e      	b.n	80040ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <xTaskIncrementTick+0x14c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d203      	bcs.n	800406c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004064:	4a2d      	ldr	r2, [pc, #180]	; (800411c <xTaskIncrementTick+0x158>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800406a:	e02e      	b.n	80040ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f8fb 	bl	800326c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3318      	adds	r3, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f8f2 	bl	800326c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <xTaskIncrementTick+0x160>)
 80040a8:	441a      	add	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff f87e 	bl	80031b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <xTaskIncrementTick+0x164>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3b9      	bcc.n	8004038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c8:	e7b6      	b.n	8004038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <xTaskIncrementTick+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4914      	ldr	r1, [pc, #80]	; (8004124 <xTaskIncrementTick+0x160>)
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d901      	bls.n	80040e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <xTaskIncrementTick+0x168>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e004      	b.n	80040fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <xTaskIncrementTick+0x16c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <xTaskIncrementTick+0x16c>)
 80040fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040fe:	697b      	ldr	r3, [r7, #20]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000418 	.word	0x20000418
 800410c:	200003f4 	.word	0x200003f4
 8004110:	200003a8 	.word	0x200003a8
 8004114:	200003ac 	.word	0x200003ac
 8004118:	20000408 	.word	0x20000408
 800411c:	20000410 	.word	0x20000410
 8004120:	200003f8 	.word	0x200003f8
 8004124:	200002f4 	.word	0x200002f4
 8004128:	200002f0 	.word	0x200002f0
 800412c:	20000404 	.word	0x20000404
 8004130:	20000400 	.word	0x20000400

08004134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <vTaskSwitchContext+0xa4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <vTaskSwitchContext+0xa8>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004148:	e03f      	b.n	80041ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <vTaskSwitchContext+0xa8>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004150:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <vTaskSwitchContext+0xac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800415e:	7afb      	ldrb	r3, [r7, #11]
 8004160:	f1c3 031f 	rsb	r3, r3, #31
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	491f      	ldr	r1, [pc, #124]	; (80041e4 <vTaskSwitchContext+0xb0>)
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <vTaskSwitchContext+0x5c>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <vTaskSwitchContext+0x5a>
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <vTaskSwitchContext+0xb0>)
 800419c:	4413      	add	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3308      	adds	r3, #8
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d104      	bne.n	80041c0 <vTaskSwitchContext+0x8c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <vTaskSwitchContext+0xb4>)
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000418 	.word	0x20000418
 80041dc:	20000404 	.word	0x20000404
 80041e0:	200003f8 	.word	0x200003f8
 80041e4:	200002f4 	.word	0x200002f4
 80041e8:	200002f0 	.word	0x200002f0

080041ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <vTaskPlaceOnEventList+0x44>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3318      	adds	r3, #24
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe ffed 	bl	80031fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004220:	2101      	movs	r1, #1
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f000 fa66 	bl	80046f4 <prvAddCurrentTaskToDelayedList>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200002f0 	.word	0x200002f0

08004234 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3318      	adds	r3, #24
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff f801 	bl	800326c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <xTaskRemoveFromEventList+0xac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11c      	bne.n	80042ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fff8 	bl	800326c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xTaskRemoveFromEventList+0xb0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <xTaskRemoveFromEventList+0xb0>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <xTaskRemoveFromEventList+0xb4>)
 800429c:	441a      	add	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fe ff84 	bl	80031b2 <vListInsertEnd>
 80042aa:	e005      	b.n	80042b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4619      	mov	r1, r3
 80042b2:	480e      	ldr	r0, [pc, #56]	; (80042ec <xTaskRemoveFromEventList+0xb8>)
 80042b4:	f7fe ff7d 	bl	80031b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTaskRemoveFromEventList+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d905      	bls.n	80042d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <xTaskRemoveFromEventList+0xc0>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e001      	b.n	80042d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000418 	.word	0x20000418
 80042e4:	200003f8 	.word	0x200003f8
 80042e8:	200002f4 	.word	0x200002f4
 80042ec:	200003b0 	.word	0x200003b0
 80042f0:	200002f0 	.word	0x200002f0
 80042f4:	20000404 	.word	0x20000404

080042f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <vTaskInternalSetTimeOutState+0x24>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <vTaskInternalSetTimeOutState+0x28>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000408 	.word	0x20000408
 8004320:	200003f4 	.word	0x200003f4

08004324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004366:	f000 fb55 	bl	8004a14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <xTaskCheckForTimeOut+0xbc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d102      	bne.n	800438a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e023      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <xTaskCheckForTimeOut+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d007      	beq.n	80043a6 <xTaskCheckForTimeOut+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e015      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d20b      	bcs.n	80043c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad2      	subs	r2, r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff9b 	bl	80042f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	e004      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043d2:	f000 fb4f 	bl	8004a74 <vPortExitCritical>

	return xReturn;
 80043d6:	69fb      	ldr	r3, [r7, #28]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	200003f4 	.word	0x200003f4
 80043e4:	20000408 	.word	0x20000408

080043e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <vTaskMissedYield+0x14>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000404 	.word	0x20000404

08004400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004408:	f000 f852 	bl	80044b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <prvIdleTask+0x28>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d9f9      	bls.n	8004408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <prvIdleTask+0x2c>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004424:	e7f0      	b.n	8004408 <prvIdleTask+0x8>
 8004426:	bf00      	nop
 8004428:	200002f4 	.word	0x200002f4
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e00c      	b.n	8004456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <prvInitialiseTaskLists+0x60>)
 8004448:	4413      	add	r3, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fe84 	bl	8003158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3301      	adds	r3, #1
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b06      	cmp	r3, #6
 800445a:	d9ef      	bls.n	800443c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <prvInitialiseTaskLists+0x64>)
 800445e:	f7fe fe7b 	bl	8003158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004462:	480d      	ldr	r0, [pc, #52]	; (8004498 <prvInitialiseTaskLists+0x68>)
 8004464:	f7fe fe78 	bl	8003158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004468:	480c      	ldr	r0, [pc, #48]	; (800449c <prvInitialiseTaskLists+0x6c>)
 800446a:	f7fe fe75 	bl	8003158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800446e:	480c      	ldr	r0, [pc, #48]	; (80044a0 <prvInitialiseTaskLists+0x70>)
 8004470:	f7fe fe72 	bl	8003158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004474:	480b      	ldr	r0, [pc, #44]	; (80044a4 <prvInitialiseTaskLists+0x74>)
 8004476:	f7fe fe6f 	bl	8003158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <prvInitialiseTaskLists+0x78>)
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <prvInitialiseTaskLists+0x64>)
 800447e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvInitialiseTaskLists+0x7c>)
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <prvInitialiseTaskLists+0x68>)
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200002f4 	.word	0x200002f4
 8004494:	20000380 	.word	0x20000380
 8004498:	20000394 	.word	0x20000394
 800449c:	200003b0 	.word	0x200003b0
 80044a0:	200003c4 	.word	0x200003c4
 80044a4:	200003dc 	.word	0x200003dc
 80044a8:	200003a8 	.word	0x200003a8
 80044ac:	200003ac 	.word	0x200003ac

080044b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b6:	e019      	b.n	80044ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b8:	f000 faac 	bl	8004a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <prvCheckTasksWaitingTermination+0x50>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fecf 	bl	800326c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <prvCheckTasksWaitingTermination+0x54>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <prvCheckTasksWaitingTermination+0x54>)
 80044d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044e2:	f000 fac7 	bl	8004a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f810 	bl	800450c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e1      	bne.n	80044b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200003c4 	.word	0x200003c4
 8004504:	200003f0 	.word	0x200003f0
 8004508:	200003d8 	.word	0x200003d8

0800450c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fc24 	bl	8004d70 <vPortFree>
				vPortFree( pxTCB );
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fc21 	bl	8004d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800452e:	e018      	b.n	8004562 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004536:	2b01      	cmp	r3, #1
 8004538:	d103      	bne.n	8004542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fc18 	bl	8004d70 <vPortFree>
	}
 8004540:	e00f      	b.n	8004562 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004548:	2b02      	cmp	r3, #2
 800454a:	d00a      	beq.n	8004562 <prvDeleteTCB+0x56>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <prvDeleteTCB+0x54>
	}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvResetNextTaskUnblockTime+0x38>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvResetNextTaskUnblockTime+0x3c>)
 800457e:	f04f 32ff 	mov.w	r2, #4294967295
 8004582:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004584:	e008      	b.n	8004598 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <prvResetNextTaskUnblockTime+0x38>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	200003a8 	.word	0x200003a8
 80045a8:	20000410 	.word	0x20000410

080045ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <xTaskGetSchedulerState+0x34>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ba:	2301      	movs	r3, #1
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e008      	b.n	80045d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <xTaskGetSchedulerState+0x38>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045c8:	2302      	movs	r3, #2
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e001      	b.n	80045d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045d2:	687b      	ldr	r3, [r7, #4]
	}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	200003fc 	.word	0x200003fc
 80045e4:	20000418 	.word	0x20000418

080045e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06e      	beq.n	80046dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045fe:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <xTaskPriorityDisinherit+0x100>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d00a      	beq.n	800461e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	429a      	cmp	r2, r3
 8004650:	d044      	beq.n	80046dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d140      	bne.n	80046dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fe04 	bl	800326c <uxListRemove>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	491f      	ldr	r1, [pc, #124]	; (80046ec <xTaskPriorityDisinherit+0x104>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xTaskPriorityDisinherit+0xae>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	2201      	movs	r2, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43da      	mvns	r2, r3
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <xTaskPriorityDisinherit+0x108>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4013      	ands	r3, r2
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <xTaskPriorityDisinherit+0x108>)
 8004694:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	f1c3 0207 	rsb	r2, r3, #7
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	2201      	movs	r2, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <xTaskPriorityDisinherit+0x108>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <xTaskPriorityDisinherit+0x108>)
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4a08      	ldr	r2, [pc, #32]	; (80046ec <xTaskPriorityDisinherit+0x104>)
 80046ca:	441a      	add	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f7fe fd6d 	bl	80031b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046dc:	697b      	ldr	r3, [r7, #20]
	}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200002f0 	.word	0x200002f0
 80046ec:	200002f4 	.word	0x200002f4
 80046f0:	200003f8 	.word	0x200003f8

080046f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fdae 	bl	800326c <uxListRemove>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	2201      	movs	r2, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4013      	ands	r3, r2
 800472a:	4a20      	ldr	r2, [pc, #128]	; (80047ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800472c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d10a      	bne.n	800474c <prvAddCurrentTaskToDelayedList+0x58>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004746:	f7fe fd34 	bl	80031b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800474a:	e026      	b.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d209      	bcs.n	8004778 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fe fd42 	bl	80031fa <vListInsert>
}
 8004776:	e010      	b.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe fd38 	bl	80031fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d202      	bcs.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6013      	str	r3, [r2, #0]
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200003f4 	.word	0x200003f4
 80047a8:	200002f0 	.word	0x200002f0
 80047ac:	200003f8 	.word	0x200003f8
 80047b0:	200003dc 	.word	0x200003dc
 80047b4:	200003ac 	.word	0x200003ac
 80047b8:	200003a8 	.word	0x200003a8
 80047bc:	20000410 	.word	0x20000410

080047c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3b04      	subs	r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3b04      	subs	r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047f0:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <pxPortInitialiseStack+0x64>)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b14      	subs	r3, #20
 80047fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3b04      	subs	r3, #4
 8004806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f06f 0202 	mvn.w	r2, #2
 800480e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b20      	subs	r3, #32
 8004814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	08004829 	.word	0x08004829

08004828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <prvTaskExitError+0x54>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d00a      	beq.n	8004852 <prvTaskExitError+0x2a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	60fb      	str	r3, [r7, #12]
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <prvTaskExitError+0x28>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
}
 8004864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004866:	bf00      	nop
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0fc      	beq.n	8004868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	2000000c 	.word	0x2000000c

08004880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <pxCurrentTCBConst2>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6808      	ldr	r0, [r1, #0]
 8004886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	f380 8809 	msr	PSP, r0
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8811 	msr	BASEPRI, r0
 800489a:	4770      	bx	lr
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst2>:
 80048a0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048a8:	4808      	ldr	r0, [pc, #32]	; (80048cc <prvPortStartFirstTask+0x24>)
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	6800      	ldr	r0, [r0, #0]
 80048ae:	f380 8808 	msr	MSP, r0
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8814 	msr	CONTROL, r0
 80048ba:	b662      	cpsie	i
 80048bc:	b661      	cpsie	f
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	df00      	svc	0
 80048c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ca:	bf00      	nop
 80048cc:	e000ed08 	.word	0xe000ed08

080048d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048d6:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <xPortStartScheduler+0x120>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <xPortStartScheduler+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10a      	bne.n	80048f6 <xPortStartScheduler+0x26>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	613b      	str	r3, [r7, #16]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <xPortStartScheduler+0x120>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <xPortStartScheduler+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10a      	bne.n	8004916 <xPortStartScheduler+0x46>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <xPortStartScheduler+0x12c>)
 8004918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <xPortStartScheduler+0x130>)
 800493c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <xPortStartScheduler+0x134>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004944:	e009      	b.n	800495a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004946:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <xPortStartScheduler+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3b01      	subs	r3, #1
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <xPortStartScheduler+0x134>)
 800494e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d0ef      	beq.n	8004946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004966:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <xPortStartScheduler+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1c3 0307 	rsb	r3, r3, #7
 800496e:	2b04      	cmp	r3, #4
 8004970:	d00a      	beq.n	8004988 <xPortStartScheduler+0xb8>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <xPortStartScheduler+0x134>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <xPortStartScheduler+0x134>)
 8004990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004992:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <xPortStartScheduler+0x134>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <xPortStartScheduler+0x134>)
 800499c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049a6:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <xPortStartScheduler+0x138>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <xPortStartScheduler+0x138>)
 80049ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <xPortStartScheduler+0x138>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <xPortStartScheduler+0x138>)
 80049b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049be:	f000 f8dd 	bl	8004b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <xPortStartScheduler+0x13c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049c8:	f000 f8fc 	bl	8004bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <xPortStartScheduler+0x140>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0f      	ldr	r2, [pc, #60]	; (8004a10 <xPortStartScheduler+0x140>)
 80049d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049d8:	f7ff ff66 	bl	80048a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049dc:	f7ff fbaa 	bl	8004134 <vTaskSwitchContext>
	prvTaskExitError();
 80049e0:	f7ff ff22 	bl	8004828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000ed00 	.word	0xe000ed00
 80049f4:	410fc271 	.word	0x410fc271
 80049f8:	410fc270 	.word	0x410fc270
 80049fc:	e000e400 	.word	0xe000e400
 8004a00:	2000041c 	.word	0x2000041c
 8004a04:	20000420 	.word	0x20000420
 8004a08:	e000ed20 	.word	0xe000ed20
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	e000ef34 	.word	0xe000ef34

08004a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3301      	adds	r3, #1
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10f      	bne.n	8004a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortEnterCritical+0x5c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	603b      	str	r3, [r7, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vPortEnterCritical+0x4a>
	}
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <vPortExitCritical+0x50>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <vPortExitCritical+0x24>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	607b      	str	r3, [r7, #4]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <vPortExitCritical+0x50>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <vPortExitCritical+0x50>)
 8004aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <vPortExitCritical+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <vPortExitCritical+0x42>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c
	...

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004af4:	f380 8811 	msr	BASEPRI, r0
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f7ff fb18 	bl	8004134 <vTaskSwitchContext>
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f380 8811 	msr	BASEPRI, r0
 8004b0c:	bc09      	pop	{r0, r3}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b16:	f01e 0f10 	tst.w	lr, #16
 8004b1a:	bf08      	it	eq
 8004b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b20:	f380 8809 	msr	PSP, r0
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst>:
 8004b30:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b52:	f7ff fa37 	bl	8003fc4 <xTaskIncrementTick>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <SysTick_Handler+0x40>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortSetupTimerInterrupt+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortSetupTimerInterrupt+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x40>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <vPortSetupTimerInterrupt+0x44>)
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	e000e014 	.word	0xe000e014

08004bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd4 <vPortEnableVFP+0x10>
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bce:	6001      	str	r1, [r0, #0]
 8004bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed88 	.word	0xe000ed88

08004bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004be4:	f7ff f944 	bl	8003e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004be8:	4b5b      	ldr	r3, [pc, #364]	; (8004d58 <pvPortMalloc+0x180>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bf0:	f000 f920 	bl	8004e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <pvPortMalloc+0x184>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8093 	bne.w	8004d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01d      	beq.n	8004c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c08:	2208      	movs	r2, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	3308      	adds	r3, #8
 8004c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <pvPortMalloc+0x6c>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	617b      	str	r3, [r7, #20]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06e      	beq.n	8004d28 <pvPortMalloc+0x150>
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <pvPortMalloc+0x188>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d869      	bhi.n	8004d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c54:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <pvPortMalloc+0x18c>)
 8004c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <pvPortMalloc+0x18c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c5e:	e004      	b.n	8004c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <pvPortMalloc+0xa4>
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f1      	bne.n	8004c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c7c:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <pvPortMalloc+0x180>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d050      	beq.n	8004d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d91f      	bls.n	8004ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	613b      	str	r3, [r7, #16]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ce2:	69b8      	ldr	r0, [r7, #24]
 8004ce4:	f000 f908 	bl	8004ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <pvPortMalloc+0x188>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <pvPortMalloc+0x188>)
 8004cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <pvPortMalloc+0x188>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <pvPortMalloc+0x190>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d203      	bcs.n	8004d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <pvPortMalloc+0x188>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <pvPortMalloc+0x190>)
 8004d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <pvPortMalloc+0x184>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <pvPortMalloc+0x194>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <pvPortMalloc+0x194>)
 8004d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d28:	f7ff f8b0 	bl	8003e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <pvPortMalloc+0x174>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60fb      	str	r3, [r7, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <pvPortMalloc+0x172>
	return pvReturn;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	2000402c 	.word	0x2000402c
 8004d5c:	20004040 	.word	0x20004040
 8004d60:	20004030 	.word	0x20004030
 8004d64:	20004024 	.word	0x20004024
 8004d68:	20004034 	.word	0x20004034
 8004d6c:	20004038 	.word	0x20004038

08004d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04d      	beq.n	8004e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d82:	2308      	movs	r3, #8
 8004d84:	425b      	negs	r3, r3
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <vPortFree+0xb8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <vPortFree+0x44>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <vPortFree+0x62>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <vPortFree+0xb8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <vPortFree+0xb8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	401a      	ands	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004df8:	f7ff f83a 	bl	8003e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <vPortFree+0xbc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <vPortFree+0xbc>)
 8004e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f000 f874 	bl	8004ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <vPortFree+0xc0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a06      	ldr	r2, [pc, #24]	; (8004e30 <vPortFree+0xc0>)
 8004e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e1a:	f7ff f837 	bl	8003e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20004040 	.word	0x20004040
 8004e2c:	20004030 	.word	0x20004030
 8004e30:	2000403c 	.word	0x2000403c

08004e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <prvHeapInit+0xac>)
 8004e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3307      	adds	r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <prvHeapInit+0xac>)
 8004e64:	4413      	add	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <prvHeapInit+0xb0>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <prvHeapInit+0xb0>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e80:	2208      	movs	r2, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <prvHeapInit+0xb4>)
 8004e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <prvHeapInit+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <prvHeapInit+0xb4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <prvHeapInit+0xb4>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <prvHeapInit+0xb8>)
 8004ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <prvHeapInit+0xbc>)
 8004eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <prvHeapInit+0xc0>)
 8004ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000424 	.word	0x20000424
 8004ee4:	20004024 	.word	0x20004024
 8004ee8:	2000402c 	.word	0x2000402c
 8004eec:	20004034 	.word	0x20004034
 8004ef0:	20004030 	.word	0x20004030
 8004ef4:	20004040 	.word	0x20004040

08004ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <prvInsertBlockIntoFreeList+0xac>)
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e002      	b.n	8004f0c <prvInsertBlockIntoFreeList+0x14>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d8f7      	bhi.n	8004f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d108      	bne.n	8004f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	441a      	add	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d118      	bne.n	8004f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d00d      	beq.n	8004f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e008      	b.n	8004f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e003      	b.n	8004f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d002      	beq.n	8004f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20004024 	.word	0x20004024
 8004fa8:	2000402c 	.word	0x2000402c

08004fac <__errno>:
 8004fac:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <__errno+0x8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000010 	.word	0x20000010

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4d0d      	ldr	r5, [pc, #52]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4d0b      	ldr	r5, [pc, #44]	; (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	; (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 fc4e 	bl	800586c <_init>
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005ac0 	.word	0x08005ac0
 8004ff4:	08005ac0 	.word	0x08005ac0
 8004ff8:	08005ac0 	.word	0x08005ac0
 8004ffc:	08005ac4 	.word	0x08005ac4

08005000 <memcpy>:
 8005000:	440a      	add	r2, r1
 8005002:	4291      	cmp	r1, r2
 8005004:	f100 33ff 	add.w	r3, r0, #4294967295
 8005008:	d100      	bne.n	800500c <memcpy+0xc>
 800500a:	4770      	bx	lr
 800500c:	b510      	push	{r4, lr}
 800500e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005016:	4291      	cmp	r1, r2
 8005018:	d1f9      	bne.n	800500e <memcpy+0xe>
 800501a:	bd10      	pop	{r4, pc}

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <siprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	b500      	push	{lr}
 8005030:	b09c      	sub	sp, #112	; 0x70
 8005032:	ab1d      	add	r3, sp, #116	; 0x74
 8005034:	9002      	str	r0, [sp, #8]
 8005036:	9006      	str	r0, [sp, #24]
 8005038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800503c:	4809      	ldr	r0, [pc, #36]	; (8005064 <siprintf+0x38>)
 800503e:	9107      	str	r1, [sp, #28]
 8005040:	9104      	str	r1, [sp, #16]
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <siprintf+0x3c>)
 8005044:	f853 2b04 	ldr.w	r2, [r3], #4
 8005048:	9105      	str	r1, [sp, #20]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	a902      	add	r1, sp, #8
 8005050:	f000 f868 	bl	8005124 <_svfiprintf_r>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	b01c      	add	sp, #112	; 0x70
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b003      	add	sp, #12
 8005062:	4770      	bx	lr
 8005064:	20000010 	.word	0x20000010
 8005068:	ffff0208 	.word	0xffff0208

0800506c <__ssputs_r>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	688e      	ldr	r6, [r1, #8]
 8005072:	429e      	cmp	r6, r3
 8005074:	4682      	mov	sl, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4690      	mov	r8, r2
 800507a:	461f      	mov	r7, r3
 800507c:	d838      	bhi.n	80050f0 <__ssputs_r+0x84>
 800507e:	898a      	ldrh	r2, [r1, #12]
 8005080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005084:	d032      	beq.n	80050ec <__ssputs_r+0x80>
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	6909      	ldr	r1, [r1, #16]
 800508a:	eba5 0901 	sub.w	r9, r5, r1
 800508e:	6965      	ldr	r5, [r4, #20]
 8005090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005098:	3301      	adds	r3, #1
 800509a:	444b      	add	r3, r9
 800509c:	106d      	asrs	r5, r5, #1
 800509e:	429d      	cmp	r5, r3
 80050a0:	bf38      	it	cc
 80050a2:	461d      	movcc	r5, r3
 80050a4:	0553      	lsls	r3, r2, #21
 80050a6:	d531      	bpl.n	800510c <__ssputs_r+0xa0>
 80050a8:	4629      	mov	r1, r5
 80050aa:	f000 fb39 	bl	8005720 <_malloc_r>
 80050ae:	4606      	mov	r6, r0
 80050b0:	b950      	cbnz	r0, 80050c8 <__ssputs_r+0x5c>
 80050b2:	230c      	movs	r3, #12
 80050b4:	f8ca 3000 	str.w	r3, [sl]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c8:	6921      	ldr	r1, [r4, #16]
 80050ca:	464a      	mov	r2, r9
 80050cc:	f7ff ff98 	bl	8005000 <memcpy>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	6126      	str	r6, [r4, #16]
 80050de:	6165      	str	r5, [r4, #20]
 80050e0:	444e      	add	r6, r9
 80050e2:	eba5 0509 	sub.w	r5, r5, r9
 80050e6:	6026      	str	r6, [r4, #0]
 80050e8:	60a5      	str	r5, [r4, #8]
 80050ea:	463e      	mov	r6, r7
 80050ec:	42be      	cmp	r6, r7
 80050ee:	d900      	bls.n	80050f2 <__ssputs_r+0x86>
 80050f0:	463e      	mov	r6, r7
 80050f2:	4632      	mov	r2, r6
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	4641      	mov	r1, r8
 80050f8:	f000 faa8 	bl	800564c <memmove>
 80050fc:	68a3      	ldr	r3, [r4, #8]
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	1b9b      	subs	r3, r3, r6
 8005102:	4432      	add	r2, r6
 8005104:	60a3      	str	r3, [r4, #8]
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	2000      	movs	r0, #0
 800510a:	e7db      	b.n	80050c4 <__ssputs_r+0x58>
 800510c:	462a      	mov	r2, r5
 800510e:	f000 fb61 	bl	80057d4 <_realloc_r>
 8005112:	4606      	mov	r6, r0
 8005114:	2800      	cmp	r0, #0
 8005116:	d1e1      	bne.n	80050dc <__ssputs_r+0x70>
 8005118:	6921      	ldr	r1, [r4, #16]
 800511a:	4650      	mov	r0, sl
 800511c:	f000 fab0 	bl	8005680 <_free_r>
 8005120:	e7c7      	b.n	80050b2 <__ssputs_r+0x46>
	...

08005124 <_svfiprintf_r>:
 8005124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	4698      	mov	r8, r3
 800512a:	898b      	ldrh	r3, [r1, #12]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	b09d      	sub	sp, #116	; 0x74
 8005130:	4607      	mov	r7, r0
 8005132:	460d      	mov	r5, r1
 8005134:	4614      	mov	r4, r2
 8005136:	d50e      	bpl.n	8005156 <_svfiprintf_r+0x32>
 8005138:	690b      	ldr	r3, [r1, #16]
 800513a:	b963      	cbnz	r3, 8005156 <_svfiprintf_r+0x32>
 800513c:	2140      	movs	r1, #64	; 0x40
 800513e:	f000 faef 	bl	8005720 <_malloc_r>
 8005142:	6028      	str	r0, [r5, #0]
 8005144:	6128      	str	r0, [r5, #16]
 8005146:	b920      	cbnz	r0, 8005152 <_svfiprintf_r+0x2e>
 8005148:	230c      	movs	r3, #12
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	e0d1      	b.n	80052f6 <_svfiprintf_r+0x1d2>
 8005152:	2340      	movs	r3, #64	; 0x40
 8005154:	616b      	str	r3, [r5, #20]
 8005156:	2300      	movs	r3, #0
 8005158:	9309      	str	r3, [sp, #36]	; 0x24
 800515a:	2320      	movs	r3, #32
 800515c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005160:	f8cd 800c 	str.w	r8, [sp, #12]
 8005164:	2330      	movs	r3, #48	; 0x30
 8005166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005310 <_svfiprintf_r+0x1ec>
 800516a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800516e:	f04f 0901 	mov.w	r9, #1
 8005172:	4623      	mov	r3, r4
 8005174:	469a      	mov	sl, r3
 8005176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517a:	b10a      	cbz	r2, 8005180 <_svfiprintf_r+0x5c>
 800517c:	2a25      	cmp	r2, #37	; 0x25
 800517e:	d1f9      	bne.n	8005174 <_svfiprintf_r+0x50>
 8005180:	ebba 0b04 	subs.w	fp, sl, r4
 8005184:	d00b      	beq.n	800519e <_svfiprintf_r+0x7a>
 8005186:	465b      	mov	r3, fp
 8005188:	4622      	mov	r2, r4
 800518a:	4629      	mov	r1, r5
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff ff6d 	bl	800506c <__ssputs_r>
 8005192:	3001      	adds	r0, #1
 8005194:	f000 80aa 	beq.w	80052ec <_svfiprintf_r+0x1c8>
 8005198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800519a:	445a      	add	r2, fp
 800519c:	9209      	str	r2, [sp, #36]	; 0x24
 800519e:	f89a 3000 	ldrb.w	r3, [sl]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80a2 	beq.w	80052ec <_svfiprintf_r+0x1c8>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b2:	f10a 0a01 	add.w	sl, sl, #1
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051be:	931a      	str	r3, [sp, #104]	; 0x68
 80051c0:	4654      	mov	r4, sl
 80051c2:	2205      	movs	r2, #5
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	4851      	ldr	r0, [pc, #324]	; (8005310 <_svfiprintf_r+0x1ec>)
 80051ca:	f7fb f809 	bl	80001e0 <memchr>
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	b9d8      	cbnz	r0, 800520a <_svfiprintf_r+0xe6>
 80051d2:	06d0      	lsls	r0, r2, #27
 80051d4:	bf44      	itt	mi
 80051d6:	2320      	movmi	r3, #32
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051dc:	0711      	lsls	r1, r2, #28
 80051de:	bf44      	itt	mi
 80051e0:	232b      	movmi	r3, #43	; 0x2b
 80051e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ea:	2b2a      	cmp	r3, #42	; 0x2a
 80051ec:	d015      	beq.n	800521a <_svfiprintf_r+0xf6>
 80051ee:	9a07      	ldr	r2, [sp, #28]
 80051f0:	4654      	mov	r4, sl
 80051f2:	2000      	movs	r0, #0
 80051f4:	f04f 0c0a 	mov.w	ip, #10
 80051f8:	4621      	mov	r1, r4
 80051fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fe:	3b30      	subs	r3, #48	; 0x30
 8005200:	2b09      	cmp	r3, #9
 8005202:	d94e      	bls.n	80052a2 <_svfiprintf_r+0x17e>
 8005204:	b1b0      	cbz	r0, 8005234 <_svfiprintf_r+0x110>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e014      	b.n	8005234 <_svfiprintf_r+0x110>
 800520a:	eba0 0308 	sub.w	r3, r0, r8
 800520e:	fa09 f303 	lsl.w	r3, r9, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	46a2      	mov	sl, r4
 8005218:	e7d2      	b.n	80051c0 <_svfiprintf_r+0x9c>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9103      	str	r1, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfbb      	ittet	lt
 8005226:	425b      	neglt	r3, r3
 8005228:	f042 0202 	orrlt.w	r2, r2, #2
 800522c:	9307      	strge	r3, [sp, #28]
 800522e:	9307      	strlt	r3, [sp, #28]
 8005230:	bfb8      	it	lt
 8005232:	9204      	strlt	r2, [sp, #16]
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	2b2e      	cmp	r3, #46	; 0x2e
 8005238:	d10c      	bne.n	8005254 <_svfiprintf_r+0x130>
 800523a:	7863      	ldrb	r3, [r4, #1]
 800523c:	2b2a      	cmp	r3, #42	; 0x2a
 800523e:	d135      	bne.n	80052ac <_svfiprintf_r+0x188>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9203      	str	r2, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfb8      	it	lt
 800524c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005250:	3402      	adds	r4, #2
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005320 <_svfiprintf_r+0x1fc>
 8005258:	7821      	ldrb	r1, [r4, #0]
 800525a:	2203      	movs	r2, #3
 800525c:	4650      	mov	r0, sl
 800525e:	f7fa ffbf 	bl	80001e0 <memchr>
 8005262:	b140      	cbz	r0, 8005276 <_svfiprintf_r+0x152>
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	eba0 000a 	sub.w	r0, r0, sl
 800526a:	fa03 f000 	lsl.w	r0, r3, r0
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	4303      	orrs	r3, r0
 8005272:	3401      	adds	r4, #1
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527a:	4826      	ldr	r0, [pc, #152]	; (8005314 <_svfiprintf_r+0x1f0>)
 800527c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005280:	2206      	movs	r2, #6
 8005282:	f7fa ffad 	bl	80001e0 <memchr>
 8005286:	2800      	cmp	r0, #0
 8005288:	d038      	beq.n	80052fc <_svfiprintf_r+0x1d8>
 800528a:	4b23      	ldr	r3, [pc, #140]	; (8005318 <_svfiprintf_r+0x1f4>)
 800528c:	bb1b      	cbnz	r3, 80052d6 <_svfiprintf_r+0x1b2>
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	3307      	adds	r3, #7
 8005292:	f023 0307 	bic.w	r3, r3, #7
 8005296:	3308      	adds	r3, #8
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529c:	4433      	add	r3, r6
 800529e:	9309      	str	r3, [sp, #36]	; 0x24
 80052a0:	e767      	b.n	8005172 <_svfiprintf_r+0x4e>
 80052a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a6:	460c      	mov	r4, r1
 80052a8:	2001      	movs	r0, #1
 80052aa:	e7a5      	b.n	80051f8 <_svfiprintf_r+0xd4>
 80052ac:	2300      	movs	r3, #0
 80052ae:	3401      	adds	r4, #1
 80052b0:	9305      	str	r3, [sp, #20]
 80052b2:	4619      	mov	r1, r3
 80052b4:	f04f 0c0a 	mov.w	ip, #10
 80052b8:	4620      	mov	r0, r4
 80052ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052be:	3a30      	subs	r2, #48	; 0x30
 80052c0:	2a09      	cmp	r2, #9
 80052c2:	d903      	bls.n	80052cc <_svfiprintf_r+0x1a8>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0c5      	beq.n	8005254 <_svfiprintf_r+0x130>
 80052c8:	9105      	str	r1, [sp, #20]
 80052ca:	e7c3      	b.n	8005254 <_svfiprintf_r+0x130>
 80052cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d0:	4604      	mov	r4, r0
 80052d2:	2301      	movs	r3, #1
 80052d4:	e7f0      	b.n	80052b8 <_svfiprintf_r+0x194>
 80052d6:	ab03      	add	r3, sp, #12
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	462a      	mov	r2, r5
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <_svfiprintf_r+0x1f8>)
 80052de:	a904      	add	r1, sp, #16
 80052e0:	4638      	mov	r0, r7
 80052e2:	f3af 8000 	nop.w
 80052e6:	1c42      	adds	r2, r0, #1
 80052e8:	4606      	mov	r6, r0
 80052ea:	d1d6      	bne.n	800529a <_svfiprintf_r+0x176>
 80052ec:	89ab      	ldrh	r3, [r5, #12]
 80052ee:	065b      	lsls	r3, r3, #25
 80052f0:	f53f af2c 	bmi.w	800514c <_svfiprintf_r+0x28>
 80052f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f6:	b01d      	add	sp, #116	; 0x74
 80052f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	462a      	mov	r2, r5
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <_svfiprintf_r+0x1f8>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	4638      	mov	r0, r7
 8005308:	f000 f87a 	bl	8005400 <_printf_i>
 800530c:	e7eb      	b.n	80052e6 <_svfiprintf_r+0x1c2>
 800530e:	bf00      	nop
 8005310:	08005a84 	.word	0x08005a84
 8005314:	08005a8e 	.word	0x08005a8e
 8005318:	00000000 	.word	0x00000000
 800531c:	0800506d 	.word	0x0800506d
 8005320:	08005a8a 	.word	0x08005a8a

08005324 <_printf_common>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	4616      	mov	r6, r2
 800532a:	4699      	mov	r9, r3
 800532c:	688a      	ldr	r2, [r1, #8]
 800532e:	690b      	ldr	r3, [r1, #16]
 8005330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005334:	4293      	cmp	r3, r2
 8005336:	bfb8      	it	lt
 8005338:	4613      	movlt	r3, r2
 800533a:	6033      	str	r3, [r6, #0]
 800533c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005340:	4607      	mov	r7, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b10a      	cbz	r2, 800534a <_printf_common+0x26>
 8005346:	3301      	adds	r3, #1
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	0699      	lsls	r1, r3, #26
 800534e:	bf42      	ittt	mi
 8005350:	6833      	ldrmi	r3, [r6, #0]
 8005352:	3302      	addmi	r3, #2
 8005354:	6033      	strmi	r3, [r6, #0]
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	f015 0506 	ands.w	r5, r5, #6
 800535c:	d106      	bne.n	800536c <_printf_common+0x48>
 800535e:	f104 0a19 	add.w	sl, r4, #25
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	6832      	ldr	r2, [r6, #0]
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	42ab      	cmp	r3, r5
 800536a:	dc26      	bgt.n	80053ba <_printf_common+0x96>
 800536c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005370:	1e13      	subs	r3, r2, #0
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	bf18      	it	ne
 8005376:	2301      	movne	r3, #1
 8005378:	0692      	lsls	r2, r2, #26
 800537a:	d42b      	bmi.n	80053d4 <_printf_common+0xb0>
 800537c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005380:	4649      	mov	r1, r9
 8005382:	4638      	mov	r0, r7
 8005384:	47c0      	blx	r8
 8005386:	3001      	adds	r0, #1
 8005388:	d01e      	beq.n	80053c8 <_printf_common+0xa4>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	68e5      	ldr	r5, [r4, #12]
 800538e:	6832      	ldr	r2, [r6, #0]
 8005390:	f003 0306 	and.w	r3, r3, #6
 8005394:	2b04      	cmp	r3, #4
 8005396:	bf08      	it	eq
 8005398:	1aad      	subeq	r5, r5, r2
 800539a:	68a3      	ldr	r3, [r4, #8]
 800539c:	6922      	ldr	r2, [r4, #16]
 800539e:	bf0c      	ite	eq
 80053a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a4:	2500      	movne	r5, #0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	bfc4      	itt	gt
 80053aa:	1a9b      	subgt	r3, r3, r2
 80053ac:	18ed      	addgt	r5, r5, r3
 80053ae:	2600      	movs	r6, #0
 80053b0:	341a      	adds	r4, #26
 80053b2:	42b5      	cmp	r5, r6
 80053b4:	d11a      	bne.n	80053ec <_printf_common+0xc8>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e008      	b.n	80053cc <_printf_common+0xa8>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4652      	mov	r2, sl
 80053be:	4649      	mov	r1, r9
 80053c0:	4638      	mov	r0, r7
 80053c2:	47c0      	blx	r8
 80053c4:	3001      	adds	r0, #1
 80053c6:	d103      	bne.n	80053d0 <_printf_common+0xac>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	3501      	adds	r5, #1
 80053d2:	e7c6      	b.n	8005362 <_printf_common+0x3e>
 80053d4:	18e1      	adds	r1, r4, r3
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	2030      	movs	r0, #48	; 0x30
 80053da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053de:	4422      	add	r2, r4
 80053e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e8:	3302      	adds	r3, #2
 80053ea:	e7c7      	b.n	800537c <_printf_common+0x58>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4622      	mov	r2, r4
 80053f0:	4649      	mov	r1, r9
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d0e6      	beq.n	80053c8 <_printf_common+0xa4>
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7d9      	b.n	80053b2 <_printf_common+0x8e>
	...

08005400 <_printf_i>:
 8005400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	460c      	mov	r4, r1
 8005406:	4691      	mov	r9, r2
 8005408:	7e27      	ldrb	r7, [r4, #24]
 800540a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800540c:	2f78      	cmp	r7, #120	; 0x78
 800540e:	4680      	mov	r8, r0
 8005410:	469a      	mov	sl, r3
 8005412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005416:	d807      	bhi.n	8005428 <_printf_i+0x28>
 8005418:	2f62      	cmp	r7, #98	; 0x62
 800541a:	d80a      	bhi.n	8005432 <_printf_i+0x32>
 800541c:	2f00      	cmp	r7, #0
 800541e:	f000 80d8 	beq.w	80055d2 <_printf_i+0x1d2>
 8005422:	2f58      	cmp	r7, #88	; 0x58
 8005424:	f000 80a3 	beq.w	800556e <_printf_i+0x16e>
 8005428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800542c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005430:	e03a      	b.n	80054a8 <_printf_i+0xa8>
 8005432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005436:	2b15      	cmp	r3, #21
 8005438:	d8f6      	bhi.n	8005428 <_printf_i+0x28>
 800543a:	a001      	add	r0, pc, #4	; (adr r0, 8005440 <_printf_i+0x40>)
 800543c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005440:	08005499 	.word	0x08005499
 8005444:	080054ad 	.word	0x080054ad
 8005448:	08005429 	.word	0x08005429
 800544c:	08005429 	.word	0x08005429
 8005450:	08005429 	.word	0x08005429
 8005454:	08005429 	.word	0x08005429
 8005458:	080054ad 	.word	0x080054ad
 800545c:	08005429 	.word	0x08005429
 8005460:	08005429 	.word	0x08005429
 8005464:	08005429 	.word	0x08005429
 8005468:	08005429 	.word	0x08005429
 800546c:	080055b9 	.word	0x080055b9
 8005470:	080054dd 	.word	0x080054dd
 8005474:	0800559b 	.word	0x0800559b
 8005478:	08005429 	.word	0x08005429
 800547c:	08005429 	.word	0x08005429
 8005480:	080055db 	.word	0x080055db
 8005484:	08005429 	.word	0x08005429
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005429 	.word	0x08005429
 8005490:	08005429 	.word	0x08005429
 8005494:	080055a3 	.word	0x080055a3
 8005498:	680b      	ldr	r3, [r1, #0]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	600a      	str	r2, [r1, #0]
 80054a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0a3      	b.n	80055f4 <_printf_i+0x1f4>
 80054ac:	6825      	ldr	r5, [r4, #0]
 80054ae:	6808      	ldr	r0, [r1, #0]
 80054b0:	062e      	lsls	r6, r5, #24
 80054b2:	f100 0304 	add.w	r3, r0, #4
 80054b6:	d50a      	bpl.n	80054ce <_printf_i+0xce>
 80054b8:	6805      	ldr	r5, [r0, #0]
 80054ba:	600b      	str	r3, [r1, #0]
 80054bc:	2d00      	cmp	r5, #0
 80054be:	da03      	bge.n	80054c8 <_printf_i+0xc8>
 80054c0:	232d      	movs	r3, #45	; 0x2d
 80054c2:	426d      	negs	r5, r5
 80054c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c8:	485e      	ldr	r0, [pc, #376]	; (8005644 <_printf_i+0x244>)
 80054ca:	230a      	movs	r3, #10
 80054cc:	e019      	b.n	8005502 <_printf_i+0x102>
 80054ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054d2:	6805      	ldr	r5, [r0, #0]
 80054d4:	600b      	str	r3, [r1, #0]
 80054d6:	bf18      	it	ne
 80054d8:	b22d      	sxthne	r5, r5
 80054da:	e7ef      	b.n	80054bc <_printf_i+0xbc>
 80054dc:	680b      	ldr	r3, [r1, #0]
 80054de:	6825      	ldr	r5, [r4, #0]
 80054e0:	1d18      	adds	r0, r3, #4
 80054e2:	6008      	str	r0, [r1, #0]
 80054e4:	0628      	lsls	r0, r5, #24
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0xec>
 80054e8:	681d      	ldr	r5, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0xf2>
 80054ec:	0669      	lsls	r1, r5, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0xe8>
 80054f0:	881d      	ldrh	r5, [r3, #0]
 80054f2:	4854      	ldr	r0, [pc, #336]	; (8005644 <_printf_i+0x244>)
 80054f4:	2f6f      	cmp	r7, #111	; 0x6f
 80054f6:	bf0c      	ite	eq
 80054f8:	2308      	moveq	r3, #8
 80054fa:	230a      	movne	r3, #10
 80054fc:	2100      	movs	r1, #0
 80054fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005502:	6866      	ldr	r6, [r4, #4]
 8005504:	60a6      	str	r6, [r4, #8]
 8005506:	2e00      	cmp	r6, #0
 8005508:	bfa2      	ittt	ge
 800550a:	6821      	ldrge	r1, [r4, #0]
 800550c:	f021 0104 	bicge.w	r1, r1, #4
 8005510:	6021      	strge	r1, [r4, #0]
 8005512:	b90d      	cbnz	r5, 8005518 <_printf_i+0x118>
 8005514:	2e00      	cmp	r6, #0
 8005516:	d04d      	beq.n	80055b4 <_printf_i+0x1b4>
 8005518:	4616      	mov	r6, r2
 800551a:	fbb5 f1f3 	udiv	r1, r5, r3
 800551e:	fb03 5711 	mls	r7, r3, r1, r5
 8005522:	5dc7      	ldrb	r7, [r0, r7]
 8005524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005528:	462f      	mov	r7, r5
 800552a:	42bb      	cmp	r3, r7
 800552c:	460d      	mov	r5, r1
 800552e:	d9f4      	bls.n	800551a <_printf_i+0x11a>
 8005530:	2b08      	cmp	r3, #8
 8005532:	d10b      	bne.n	800554c <_printf_i+0x14c>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	07df      	lsls	r7, r3, #31
 8005538:	d508      	bpl.n	800554c <_printf_i+0x14c>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	6861      	ldr	r1, [r4, #4]
 800553e:	4299      	cmp	r1, r3
 8005540:	bfde      	ittt	le
 8005542:	2330      	movle	r3, #48	; 0x30
 8005544:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005548:	f106 36ff 	addle.w	r6, r6, #4294967295
 800554c:	1b92      	subs	r2, r2, r6
 800554e:	6122      	str	r2, [r4, #16]
 8005550:	f8cd a000 	str.w	sl, [sp]
 8005554:	464b      	mov	r3, r9
 8005556:	aa03      	add	r2, sp, #12
 8005558:	4621      	mov	r1, r4
 800555a:	4640      	mov	r0, r8
 800555c:	f7ff fee2 	bl	8005324 <_printf_common>
 8005560:	3001      	adds	r0, #1
 8005562:	d14c      	bne.n	80055fe <_printf_i+0x1fe>
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	b004      	add	sp, #16
 800556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556e:	4835      	ldr	r0, [pc, #212]	; (8005644 <_printf_i+0x244>)
 8005570:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	680e      	ldr	r6, [r1, #0]
 8005578:	061f      	lsls	r7, r3, #24
 800557a:	f856 5b04 	ldr.w	r5, [r6], #4
 800557e:	600e      	str	r6, [r1, #0]
 8005580:	d514      	bpl.n	80055ac <_printf_i+0x1ac>
 8005582:	07d9      	lsls	r1, r3, #31
 8005584:	bf44      	itt	mi
 8005586:	f043 0320 	orrmi.w	r3, r3, #32
 800558a:	6023      	strmi	r3, [r4, #0]
 800558c:	b91d      	cbnz	r5, 8005596 <_printf_i+0x196>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f023 0320 	bic.w	r3, r3, #32
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	2310      	movs	r3, #16
 8005598:	e7b0      	b.n	80054fc <_printf_i+0xfc>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f043 0320 	orr.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	2378      	movs	r3, #120	; 0x78
 80055a4:	4828      	ldr	r0, [pc, #160]	; (8005648 <_printf_i+0x248>)
 80055a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055aa:	e7e3      	b.n	8005574 <_printf_i+0x174>
 80055ac:	065e      	lsls	r6, r3, #25
 80055ae:	bf48      	it	mi
 80055b0:	b2ad      	uxthmi	r5, r5
 80055b2:	e7e6      	b.n	8005582 <_printf_i+0x182>
 80055b4:	4616      	mov	r6, r2
 80055b6:	e7bb      	b.n	8005530 <_printf_i+0x130>
 80055b8:	680b      	ldr	r3, [r1, #0]
 80055ba:	6826      	ldr	r6, [r4, #0]
 80055bc:	6960      	ldr	r0, [r4, #20]
 80055be:	1d1d      	adds	r5, r3, #4
 80055c0:	600d      	str	r5, [r1, #0]
 80055c2:	0635      	lsls	r5, r6, #24
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0x1cc>
 80055c8:	6018      	str	r0, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0x1d2>
 80055cc:	0671      	lsls	r1, r6, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0x1c8>
 80055d0:	8018      	strh	r0, [r3, #0]
 80055d2:	2300      	movs	r3, #0
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	4616      	mov	r6, r2
 80055d8:	e7ba      	b.n	8005550 <_printf_i+0x150>
 80055da:	680b      	ldr	r3, [r1, #0]
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	600a      	str	r2, [r1, #0]
 80055e0:	681e      	ldr	r6, [r3, #0]
 80055e2:	6862      	ldr	r2, [r4, #4]
 80055e4:	2100      	movs	r1, #0
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7fa fdfa 	bl	80001e0 <memchr>
 80055ec:	b108      	cbz	r0, 80055f2 <_printf_i+0x1f2>
 80055ee:	1b80      	subs	r0, r0, r6
 80055f0:	6060      	str	r0, [r4, #4]
 80055f2:	6863      	ldr	r3, [r4, #4]
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	2300      	movs	r3, #0
 80055f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fc:	e7a8      	b.n	8005550 <_printf_i+0x150>
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	4632      	mov	r2, r6
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	47d0      	blx	sl
 8005608:	3001      	adds	r0, #1
 800560a:	d0ab      	beq.n	8005564 <_printf_i+0x164>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	079b      	lsls	r3, r3, #30
 8005610:	d413      	bmi.n	800563a <_printf_i+0x23a>
 8005612:	68e0      	ldr	r0, [r4, #12]
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	4298      	cmp	r0, r3
 8005618:	bfb8      	it	lt
 800561a:	4618      	movlt	r0, r3
 800561c:	e7a4      	b.n	8005568 <_printf_i+0x168>
 800561e:	2301      	movs	r3, #1
 8005620:	4632      	mov	r2, r6
 8005622:	4649      	mov	r1, r9
 8005624:	4640      	mov	r0, r8
 8005626:	47d0      	blx	sl
 8005628:	3001      	adds	r0, #1
 800562a:	d09b      	beq.n	8005564 <_printf_i+0x164>
 800562c:	3501      	adds	r5, #1
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	9903      	ldr	r1, [sp, #12]
 8005632:	1a5b      	subs	r3, r3, r1
 8005634:	42ab      	cmp	r3, r5
 8005636:	dcf2      	bgt.n	800561e <_printf_i+0x21e>
 8005638:	e7eb      	b.n	8005612 <_printf_i+0x212>
 800563a:	2500      	movs	r5, #0
 800563c:	f104 0619 	add.w	r6, r4, #25
 8005640:	e7f5      	b.n	800562e <_printf_i+0x22e>
 8005642:	bf00      	nop
 8005644:	08005a95 	.word	0x08005a95
 8005648:	08005aa6 	.word	0x08005aa6

0800564c <memmove>:
 800564c:	4288      	cmp	r0, r1
 800564e:	b510      	push	{r4, lr}
 8005650:	eb01 0402 	add.w	r4, r1, r2
 8005654:	d902      	bls.n	800565c <memmove+0x10>
 8005656:	4284      	cmp	r4, r0
 8005658:	4623      	mov	r3, r4
 800565a:	d807      	bhi.n	800566c <memmove+0x20>
 800565c:	1e43      	subs	r3, r0, #1
 800565e:	42a1      	cmp	r1, r4
 8005660:	d008      	beq.n	8005674 <memmove+0x28>
 8005662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800566a:	e7f8      	b.n	800565e <memmove+0x12>
 800566c:	4402      	add	r2, r0
 800566e:	4601      	mov	r1, r0
 8005670:	428a      	cmp	r2, r1
 8005672:	d100      	bne.n	8005676 <memmove+0x2a>
 8005674:	bd10      	pop	{r4, pc}
 8005676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800567a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800567e:	e7f7      	b.n	8005670 <memmove+0x24>

08005680 <_free_r>:
 8005680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005682:	2900      	cmp	r1, #0
 8005684:	d048      	beq.n	8005718 <_free_r+0x98>
 8005686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568a:	9001      	str	r0, [sp, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f1a1 0404 	sub.w	r4, r1, #4
 8005692:	bfb8      	it	lt
 8005694:	18e4      	addlt	r4, r4, r3
 8005696:	f000 f8d3 	bl	8005840 <__malloc_lock>
 800569a:	4a20      	ldr	r2, [pc, #128]	; (800571c <_free_r+0x9c>)
 800569c:	9801      	ldr	r0, [sp, #4]
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	4615      	mov	r5, r2
 80056a2:	b933      	cbnz	r3, 80056b2 <_free_r+0x32>
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6014      	str	r4, [r2, #0]
 80056a8:	b003      	add	sp, #12
 80056aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ae:	f000 b8cd 	b.w	800584c <__malloc_unlock>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d90b      	bls.n	80056ce <_free_r+0x4e>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	1862      	adds	r2, r4, r1
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bf04      	itt	eq
 80056be:	681a      	ldreq	r2, [r3, #0]
 80056c0:	685b      	ldreq	r3, [r3, #4]
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	bf04      	itt	eq
 80056c6:	1852      	addeq	r2, r2, r1
 80056c8:	6022      	streq	r2, [r4, #0]
 80056ca:	602c      	str	r4, [r5, #0]
 80056cc:	e7ec      	b.n	80056a8 <_free_r+0x28>
 80056ce:	461a      	mov	r2, r3
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	b10b      	cbz	r3, 80056d8 <_free_r+0x58>
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x4e>
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	1855      	adds	r5, r2, r1
 80056dc:	42a5      	cmp	r5, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x78>
 80056e0:	6824      	ldr	r4, [r4, #0]
 80056e2:	4421      	add	r1, r4
 80056e4:	1854      	adds	r4, r2, r1
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	d1dd      	bne.n	80056a8 <_free_r+0x28>
 80056ec:	681c      	ldr	r4, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	6053      	str	r3, [r2, #4]
 80056f2:	4421      	add	r1, r4
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	e7d7      	b.n	80056a8 <_free_r+0x28>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x80>
 80056fa:	230c      	movs	r3, #12
 80056fc:	6003      	str	r3, [r0, #0]
 80056fe:	e7d3      	b.n	80056a8 <_free_r+0x28>
 8005700:	6825      	ldr	r5, [r4, #0]
 8005702:	1961      	adds	r1, r4, r5
 8005704:	428b      	cmp	r3, r1
 8005706:	bf04      	itt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	bf04      	itt	eq
 8005710:	1949      	addeq	r1, r1, r5
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	6054      	str	r4, [r2, #4]
 8005716:	e7c7      	b.n	80056a8 <_free_r+0x28>
 8005718:	b003      	add	sp, #12
 800571a:	bd30      	pop	{r4, r5, pc}
 800571c:	20004044 	.word	0x20004044

08005720 <_malloc_r>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	1ccd      	adds	r5, r1, #3
 8005724:	f025 0503 	bic.w	r5, r5, #3
 8005728:	3508      	adds	r5, #8
 800572a:	2d0c      	cmp	r5, #12
 800572c:	bf38      	it	cc
 800572e:	250c      	movcc	r5, #12
 8005730:	2d00      	cmp	r5, #0
 8005732:	4606      	mov	r6, r0
 8005734:	db01      	blt.n	800573a <_malloc_r+0x1a>
 8005736:	42a9      	cmp	r1, r5
 8005738:	d903      	bls.n	8005742 <_malloc_r+0x22>
 800573a:	230c      	movs	r3, #12
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	2000      	movs	r0, #0
 8005740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005742:	f000 f87d 	bl	8005840 <__malloc_lock>
 8005746:	4921      	ldr	r1, [pc, #132]	; (80057cc <_malloc_r+0xac>)
 8005748:	680a      	ldr	r2, [r1, #0]
 800574a:	4614      	mov	r4, r2
 800574c:	b99c      	cbnz	r4, 8005776 <_malloc_r+0x56>
 800574e:	4f20      	ldr	r7, [pc, #128]	; (80057d0 <_malloc_r+0xb0>)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b923      	cbnz	r3, 800575e <_malloc_r+0x3e>
 8005754:	4621      	mov	r1, r4
 8005756:	4630      	mov	r0, r6
 8005758:	f000 f862 	bl	8005820 <_sbrk_r>
 800575c:	6038      	str	r0, [r7, #0]
 800575e:	4629      	mov	r1, r5
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f85d 	bl	8005820 <_sbrk_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d123      	bne.n	80057b2 <_malloc_r+0x92>
 800576a:	230c      	movs	r3, #12
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	4630      	mov	r0, r6
 8005770:	f000 f86c 	bl	800584c <__malloc_unlock>
 8005774:	e7e3      	b.n	800573e <_malloc_r+0x1e>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	1b5b      	subs	r3, r3, r5
 800577a:	d417      	bmi.n	80057ac <_malloc_r+0x8c>
 800577c:	2b0b      	cmp	r3, #11
 800577e:	d903      	bls.n	8005788 <_malloc_r+0x68>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	441c      	add	r4, r3
 8005784:	6025      	str	r5, [r4, #0]
 8005786:	e004      	b.n	8005792 <_malloc_r+0x72>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	42a2      	cmp	r2, r4
 800578c:	bf0c      	ite	eq
 800578e:	600b      	streq	r3, [r1, #0]
 8005790:	6053      	strne	r3, [r2, #4]
 8005792:	4630      	mov	r0, r6
 8005794:	f000 f85a 	bl	800584c <__malloc_unlock>
 8005798:	f104 000b 	add.w	r0, r4, #11
 800579c:	1d23      	adds	r3, r4, #4
 800579e:	f020 0007 	bic.w	r0, r0, #7
 80057a2:	1ac2      	subs	r2, r0, r3
 80057a4:	d0cc      	beq.n	8005740 <_malloc_r+0x20>
 80057a6:	1a1b      	subs	r3, r3, r0
 80057a8:	50a3      	str	r3, [r4, r2]
 80057aa:	e7c9      	b.n	8005740 <_malloc_r+0x20>
 80057ac:	4622      	mov	r2, r4
 80057ae:	6864      	ldr	r4, [r4, #4]
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x2c>
 80057b2:	1cc4      	adds	r4, r0, #3
 80057b4:	f024 0403 	bic.w	r4, r4, #3
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d0e3      	beq.n	8005784 <_malloc_r+0x64>
 80057bc:	1a21      	subs	r1, r4, r0
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 f82e 	bl	8005820 <_sbrk_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1dd      	bne.n	8005784 <_malloc_r+0x64>
 80057c8:	e7cf      	b.n	800576a <_malloc_r+0x4a>
 80057ca:	bf00      	nop
 80057cc:	20004044 	.word	0x20004044
 80057d0:	20004048 	.word	0x20004048

080057d4 <_realloc_r>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	4607      	mov	r7, r0
 80057d8:	4614      	mov	r4, r2
 80057da:	460e      	mov	r6, r1
 80057dc:	b921      	cbnz	r1, 80057e8 <_realloc_r+0x14>
 80057de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057e2:	4611      	mov	r1, r2
 80057e4:	f7ff bf9c 	b.w	8005720 <_malloc_r>
 80057e8:	b922      	cbnz	r2, 80057f4 <_realloc_r+0x20>
 80057ea:	f7ff ff49 	bl	8005680 <_free_r>
 80057ee:	4625      	mov	r5, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	f000 f830 	bl	8005858 <_malloc_usable_size_r>
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d20f      	bcs.n	800581c <_realloc_r+0x48>
 80057fc:	4621      	mov	r1, r4
 80057fe:	4638      	mov	r0, r7
 8005800:	f7ff ff8e 	bl	8005720 <_malloc_r>
 8005804:	4605      	mov	r5, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d0f2      	beq.n	80057f0 <_realloc_r+0x1c>
 800580a:	4631      	mov	r1, r6
 800580c:	4622      	mov	r2, r4
 800580e:	f7ff fbf7 	bl	8005000 <memcpy>
 8005812:	4631      	mov	r1, r6
 8005814:	4638      	mov	r0, r7
 8005816:	f7ff ff33 	bl	8005680 <_free_r>
 800581a:	e7e9      	b.n	80057f0 <_realloc_r+0x1c>
 800581c:	4635      	mov	r5, r6
 800581e:	e7e7      	b.n	80057f0 <_realloc_r+0x1c>

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	; (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fa14 	bl	8000c58 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	200040ec 	.word	0x200040ec

08005840 <__malloc_lock>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__malloc_lock+0x8>)
 8005842:	f000 b811 	b.w	8005868 <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	200040f4 	.word	0x200040f4

0800584c <__malloc_unlock>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__malloc_unlock+0x8>)
 800584e:	f000 b80c 	b.w	800586a <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	200040f4 	.word	0x200040f4

08005858 <_malloc_usable_size_r>:
 8005858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800585c:	1f18      	subs	r0, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	bfbc      	itt	lt
 8005862:	580b      	ldrlt	r3, [r1, r0]
 8005864:	18c0      	addlt	r0, r0, r3
 8005866:	4770      	bx	lr

08005868 <__retarget_lock_acquire_recursive>:
 8005868:	4770      	bx	lr

0800586a <__retarget_lock_release_recursive>:
 800586a:	4770      	bx	lr

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
