
Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004068  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004078  20004078  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015013  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bef  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00037c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  00038c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002298a  00000000  00000000  00039b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f29  00000000  00000000  0005c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d378a  00000000  00000000  0006f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142bad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042e0  00000000  00000000  00142c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005160 	.word	0x08005160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005160 	.word	0x08005160

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <Send_uart>:
void HPT_Task(void *argument);
void MPT_Task(void *argument);
void LPT_Task(void *argument);

void Send_uart(char *str)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	xQueueSemaphoreTake(BinSemaphore, portMAX_DELAY);
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <Send_uart+0x4c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 31ff 	mov.w	r1, #4294967295
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fff5 	bl	800350c <xQueueSemaphoreTake>
	HAL_Delay(5000);
 8000522:	f241 3088 	movw	r0, #5000	; 0x1388
 8000526:	f000 fb5b 	bl	8000be0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff fe50 	bl	80001d0 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	b29a      	uxth	r2, r3
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <Send_uart+0x50>)
 800053c:	f001 fe25 	bl	800218a <HAL_UART_Transmit>
	xSemaphoreGive(BinSemaphore);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <Send_uart+0x4c>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	f002 fee1 	bl	8003310 <xQueueGenericSend>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20003fe0 	.word	0x20003fe0
 800055c:	20003fe4 	.word	0x20003fe4

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000566:	f000 faf9 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f86d 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8ff 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8d3 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SimpleMutex = xSemaphoreCreateMutex();
 8000576:	2001      	movs	r0, #1
 8000578:	f002 feb1 	bl	80032de <xQueueCreateMutex>
 800057c:	4603      	mov	r3, r0
 800057e:	4a24      	ldr	r2, [pc, #144]	; (8000610 <main+0xb0>)
 8000580:	6013      	str	r3, [r2, #0]
  if (SimpleMutex != 0)
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <main+0xb0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <main+0x38>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t *) "Mutex created\n\n", 15, 1000);
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	220f      	movs	r2, #15
 8000590:	4920      	ldr	r1, [pc, #128]	; (8000614 <main+0xb4>)
 8000592:	4821      	ldr	r0, [pc, #132]	; (8000618 <main+0xb8>)
 8000594:	f001 fdf9 	bl	800218a <HAL_UART_Transmit>
  }

  BinSemaphore = xSemaphoreCreateBinary();
 8000598:	2203      	movs	r2, #3
 800059a:	2100      	movs	r1, #0
 800059c:	2001      	movs	r0, #1
 800059e:	f002 fe2b 	bl	80031f8 <xQueueGenericCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <main+0xbc>)
 80005a6:	6013      	str	r3, [r2, #0]
  if (BinSemaphore != 0)
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <main+0xbc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <main+0x5e>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t *) "Semaphore created\n\n", 19, 1000);
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	2213      	movs	r2, #19
 80005b6:	491a      	ldr	r1, [pc, #104]	; (8000620 <main+0xc0>)
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0xb8>)
 80005ba:	f001 fde6 	bl	800218a <HAL_UART_Transmit>
  }
  xSemaphoreGive(BinSemaphore);
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <main+0xbc>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	f002 fea2 	bl	8003310 <xQueueGenericSend>

  xTaskCreate(HPT_Task, "HPT", 128, NULL, 3, &HPT_Handle);
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <main+0xc4>)
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2303      	movs	r3, #3
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	4913      	ldr	r1, [pc, #76]	; (8000628 <main+0xc8>)
 80005da:	4814      	ldr	r0, [pc, #80]	; (800062c <main+0xcc>)
 80005dc:	f003 fa01 	bl	80039e2 <xTaskCreate>
  xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPT_Handle);
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <main+0xd0>)
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2302      	movs	r3, #2
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	4911      	ldr	r1, [pc, #68]	; (8000634 <main+0xd4>)
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0xd8>)
 80005f0:	f003 f9f7 	bl	80039e2 <xTaskCreate>
  xTaskCreate(LPT_Task, "LPT", 128, NULL, 1, &LPT_Handle);
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <main+0xdc>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <main+0xe0>)
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0xe4>)
 8000604:	f003 f9ed 	bl	80039e2 <xTaskCreate>

  vTaskStartScheduler();
 8000608:	f003 fb56 	bl	8003cb8 <vTaskStartScheduler>
 // osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0xac>
 800060e:	bf00      	nop
 8000610:	20003fd8 	.word	0x20003fd8
 8000614:	08005178 	.word	0x08005178
 8000618:	20003fe4 	.word	0x20003fe4
 800061c:	20003fe0 	.word	0x20003fe0
 8000620:	08005188 	.word	0x08005188
 8000624:	20003fd4 	.word	0x20003fd4
 8000628:	0800519c 	.word	0x0800519c
 800062c:	080007c1 	.word	0x080007c1
 8000630:	20004028 	.word	0x20004028
 8000634:	080051a0 	.word	0x080051a0
 8000638:	08000821 	.word	0x08000821
 800063c:	20003fdc 	.word	0x20003fdc
 8000640:	080051a4 	.word	0x080051a4
 8000644:	08000855 	.word	0x08000855

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fd7a 	bl	8005150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	; 0xa8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fdbb 	bl	8001248 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f8fe 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f81c 	bl	8001738 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f8e7 	bl	80008d8 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fccc 	bl	80020f0 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8bb 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20003fe4 	.word	0x20003fe4
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_GPIO_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MX_GPIO_Init+0x4c>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_GPIO_Init+0x4c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <MX_GPIO_Init+0x4c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_GPIO_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HPT_Task>:

/* USER CODE BEGIN 4 */
void HPT_Task(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	char *strtosend = "IN HPT ***********************\n";
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HPT_Task+0x50>)
 80007ca:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered HPT and About to take Mutex\n";
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HPT_Task+0x54>)
 80007ce:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007d0:	6938      	ldr	r0, [r7, #16]
 80007d2:	f7ff fcfd 	bl	80001d0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	6939      	ldr	r1, [r7, #16]
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <HPT_Task+0x58>)
 80007e2:	f001 fcd2 	bl	800218a <HAL_UART_Transmit>

		Send_uart(strtosend);
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff fe90 	bl	800050c <Send_uart>

		char *str2 = "Leaving HPT\n";
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HPT_Task+0x5c>)
 80007ee:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff fced 	bl	80001d0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	68f9      	ldr	r1, [r7, #12]
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <HPT_Task+0x58>)
 8000802:	f001 fcc2 	bl	800218a <HAL_UART_Transmit>

		vTaskDelay(750);
 8000806:	f240 20ee 	movw	r0, #750	; 0x2ee
 800080a:	f003 fa21 	bl	8003c50 <vTaskDelay>
	{
 800080e:	e7dd      	b.n	80007cc <HPT_Task+0xc>
 8000810:	080051a8 	.word	0x080051a8
 8000814:	080051c8 	.word	0x080051c8
 8000818:	20003fe4 	.word	0x20003fe4
 800081c:	080051f0 	.word	0x080051f0

08000820 <MPT_Task>:
	}
}

void MPT_Task(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while(1)
	{
		char *str = "IN MPT ========================\n";
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <MPT_Task+0x2c>)
 800082a:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	68f9      	ldr	r1, [r7, #12]
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MPT_Task+0x30>)
 800083e:	f001 fca4 	bl	800218a <HAL_UART_Transmit>
		vTaskDelay(2000);
 8000842:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000846:	f003 fa03 	bl	8003c50 <vTaskDelay>
	{
 800084a:	e7ed      	b.n	8000828 <MPT_Task+0x8>
 800084c:	08005200 	.word	0x08005200
 8000850:	20003fe4 	.word	0x20003fe4

08000854 <LPT_Task>:
	}
}

void LPT_Task(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	char *strtosend = "IN LPT ========================\n";
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <LPT_Task+0x50>)
 800085e:	617b      	str	r3, [r7, #20]
	while(1)
	{
		char *str = "Entered LPT and About to take Mutex\n";
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <LPT_Task+0x54>)
 8000862:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000864:	6938      	ldr	r0, [r7, #16]
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LPT_Task+0x58>)
 8000876:	f001 fc88 	bl	800218a <HAL_UART_Transmit>

		Send_uart(strtosend);
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff fe46 	bl	800050c <Send_uart>
		//HAL_Delay(3000);

		char *str2 = "Leaving LPT\n";
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <LPT_Task+0x5c>)
 8000882:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff fca3 	bl	80001d0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	68f9      	ldr	r1, [r7, #12]
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <LPT_Task+0x58>)
 8000896:	f001 fc78 	bl	800218a <HAL_UART_Transmit>

		vTaskDelay(2000);
 800089a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800089e:	f003 f9d7 	bl	8003c50 <vTaskDelay>
	{
 80008a2:	e7dd      	b.n	8000860 <LPT_Task+0xc>
 80008a4:	08005224 	.word	0x08005224
 80008a8:	08005248 	.word	0x08005248
 80008ac:	20003fe4 	.word	0x20003fe4
 80008b0:	08005270 	.word	0x08005270

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 f96b 	bl	8000ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010000 	.word	0x40010000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_MspInit+0x54>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_MspInit+0x54>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	210f      	movs	r1, #15
 8000926:	f06f 0001 	mvn.w	r0, #1
 800092a:	f000 fa35 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <HAL_UART_MspInit+0x94>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d133      	bne.n	80009c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_UART_MspInit+0x98>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <HAL_UART_MspInit+0x98>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x98>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x98>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x98>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_UART_MspInit+0x98>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_UART_MspInit+0x9c>)
 80009b2:	f000 faad 	bl	8000f10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f000 f9ec 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c0:	2026      	movs	r0, #38	; 0x26
 80009c2:	f000 fa05 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 f9d1 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 f9ea 	bl	8000dd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f884 	bl	8001b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a28:	f001 f86e 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_InitTick+0xac>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <HAL_InitTick+0xb0>)
 8000a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_InitTick+0xac>)
 8000a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_InitTick+0xac>)
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_InitTick+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_InitTick+0xac>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_InitTick+0xac>)
 8000a62:	f001 f897 	bl	8001b94 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d104      	bne.n	8000a76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_InitTick+0xac>)
 8000a6e:	f001 f8eb 	bl	8001c48 <HAL_TIM_Base_Start_IT>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	2000402c 	.word	0x2000402c
 8000a8c:	40010000 	.word	0x40010000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ac2:	f001 f931 	bl	8001d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000402c 	.word	0x2000402c

08000ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART2_IRQHandler+0x10>)
 8000ad6:	f001 fbeb 	bl	80022b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20003fe4 	.word	0x20003fe4

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f004 fad9 	bl	80050ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fd11 	bl	8000560 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b4c:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8000b50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b54:	20004078 	.word	0x20004078

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f8fc 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff ff26 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fea8 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20004074 	.word	0x20004074

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20004074 	.word	0x20004074

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dfa:	f7ff fee5 	bl	8000bc8 <HAL_GetTick>
 8000dfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d008      	beq.n	8000e1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e052      	b.n	8000ec4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0216 	bic.w	r2, r2, #22
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <HAL_DMA_Abort+0x62>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0208 	bic.w	r2, r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6e:	e013      	b.n	8000e98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e70:	f7ff feaa 	bl	8000bc8 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d90c      	bls.n	8000e98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2220      	movs	r2, #32
 8000e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e015      	b.n	8000ec4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1e4      	bne.n	8000e70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eaa:	223f      	movs	r2, #63	; 0x3f
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d004      	beq.n	8000eea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00c      	b.n	8000f04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b60      	ldr	r3, [pc, #384]	; (800121c <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a51      	ldr	r2, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a50      	ldr	r2, [pc, #320]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x310>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e264      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d075      	beq.n	8001352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	4ba3      	ldr	r3, [pc, #652]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b04      	cmp	r3, #4
 8001270:	d00c      	beq.n	800128c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d112      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b9d      	ldr	r3, [pc, #628]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128a:	d10b      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05b      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d157      	bne.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e23f      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x74>
 80012ae:	4b91      	ldr	r3, [pc, #580]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x98>
 80012c6:	4b8b      	ldr	r3, [pc, #556]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a87      	ldr	r2, [pc, #540]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012e0:	4b84      	ldr	r3, [pc, #528]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a83      	ldr	r2, [pc, #524]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a80      	ldr	r2, [pc, #512]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fc62 	bl	8000bc8 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fc5e 	bl	8000bc8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e204      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xc0>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fc4e 	bl	8000bc8 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fc4a 	bl	8000bc8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1f0      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0xe8>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1c4      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4952      	ldr	r1, [pc, #328]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_RCC_OscConfig+0x2b0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc03 	bl	8000bc8 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fbff 	bl	8000bc8 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1a5      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4940      	ldr	r1, [pc, #256]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x2b0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fbe2 	bl	8000bc8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fbde 	bl	8000bc8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e184      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d030      	beq.n	8001494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d016      	beq.n	8001468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x2b4>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fbc2 	bl	8000bc8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fbbe 	bl	8000bc8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e164      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x200>
 8001466:	e015      	b.n	8001494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x2b4>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fbab 	bl	8000bc8 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fba7 	bl	8000bc8 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e14d      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a0 	beq.w	80015e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d121      	bne.n	8001522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb6d 	bl	8000bc8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e011      	b.n	8001516 <HAL_RCC_OscConfig+0x2ce>
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
 8001500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001504:	f7ff fb60 	bl	8000bc8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e106      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b85      	ldr	r3, [pc, #532]	; (800172c <HAL_RCC_OscConfig+0x4e4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 800152a:	4b81      	ldr	r3, [pc, #516]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a80      	ldr	r2, [pc, #512]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x32a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x312>
 8001540:	4b7b      	ldr	r3, [pc, #492]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b78      	ldr	r3, [pc, #480]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a77      	ldr	r2, [pc, #476]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x32a>
 800155a:	4b75      	ldr	r3, [pc, #468]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a74      	ldr	r2, [pc, #464]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	4b72      	ldr	r3, [pc, #456]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a71      	ldr	r2, [pc, #452]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fb25 	bl	8000bc8 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb21 	bl	8000bc8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0c5      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x33a>
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb0f 	bl	8000bc8 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb0b 	bl	8000bc8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e0af      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a55      	ldr	r2, [pc, #340]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 809b 	beq.w	8001722 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d05c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d141      	bne.n	8001684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <HAL_RCC_OscConfig+0x4ec>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fadf 	bl	8000bc8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fadb 	bl	8000bc8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e081      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	019b      	lsls	r3, r3, #6
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	061b      	lsls	r3, r3, #24
 8001650:	4937      	ldr	r1, [pc, #220]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_OscConfig+0x4ec>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fab4 	bl	8000bc8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fab0 	bl	8000bc8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e056      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x41c>
 8001682:	e04e      	b.n	8001722 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fa9d 	bl	8000bc8 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fa99 	bl	8000bc8 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e03f      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x44a>
 80016b0:	e037      	b.n	8001722 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e032      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d028      	beq.n	800171e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d121      	bne.n	800171e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d11a      	bne.n	800171e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d111      	bne.n	800171e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d107      	bne.n	800171e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40007000 	.word	0x40007000
 8001730:	40023800 	.word	0x40023800
 8001734:	42470060 	.word	0x42470060

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0cc      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d90c      	bls.n	8001774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d044      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e067      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff f9ce 	bl	8000bc8 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f9ca 	bl	8000bc8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018be:	f000 f821 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	490a      	ldr	r1, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f87c 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08005288 	.word	0x08005288
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191c:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d00d      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x40>
 8001928:	2b08      	cmp	r3, #8
 800192a:	f200 80bd 	bhi.w	8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x34>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d003      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x3a>
 8001936:	e0b7      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800193a:	60bb      	str	r3, [r7, #8]
       break;
 800193c:	e0b7      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001940:	60bb      	str	r3, [r7, #8]
      break;
 8001942:	e0b4      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d04d      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	ea02 0800 	and.w	r8, r2, r0
 8001972:	ea03 0901 	and.w	r9, r3, r1
 8001976:	4640      	mov	r0, r8
 8001978:	4649      	mov	r1, r9
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001988:	0142      	lsls	r2, r0, #5
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	ebb0 0008 	subs.w	r0, r0, r8
 8001992:	eb61 0109 	sbc.w	r1, r1, r9
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a4:	0182      	lsls	r2, r0, #6
 80019a6:	1a12      	subs	r2, r2, r0
 80019a8:	eb63 0301 	sbc.w	r3, r3, r1
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	00d9      	lsls	r1, r3, #3
 80019b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ba:	00d0      	lsls	r0, r2, #3
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	eb12 0208 	adds.w	r2, r2, r8
 80019c4:	eb43 0309 	adc.w	r3, r3, r9
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	0259      	lsls	r1, r3, #9
 80019d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019d6:	0250      	lsls	r0, r2, #9
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f7fe fbfa 	bl	80001e0 <__aeabi_uldivmod>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4613      	mov	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e04a      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	461a      	mov	r2, r3
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	ea02 0400 	and.w	r4, r2, r0
 8001a0e:	ea03 0501 	and.w	r5, r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	014b      	lsls	r3, r1, #5
 8001a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a24:	0142      	lsls	r2, r0, #5
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	1b00      	subs	r0, r0, r4
 8001a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	018b      	lsls	r3, r1, #6
 8001a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a3e:	0182      	lsls	r2, r0, #6
 8001a40:	1a12      	subs	r2, r2, r0
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	00d9      	lsls	r1, r3, #3
 8001a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a54:	00d0      	lsls	r0, r2, #3
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	1912      	adds	r2, r2, r4
 8001a5c:	eb45 0303 	adc.w	r3, r5, r3
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	0299      	lsls	r1, r3, #10
 8001a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a6e:	0290      	lsls	r0, r2, #10
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	f7fe fbae 	bl	80001e0 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	60bb      	str	r3, [r7, #8]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aaa:	60bb      	str	r3, [r7, #8]
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	68bb      	ldr	r3, [r7, #8]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08005298 	.word	0x08005298

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08005298 	.word	0x08005298

08001b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_GetClockConfig+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0207 	and.w	r2, r3, #7
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e041      	b.n	8001c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f839 	bl	8001c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f9d8 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e04e      	b.n	8001cfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d010      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cea:	e007      	b.n	8001cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40000800 	.word	0x40000800
 8001d18:	40000c00 	.word	0x40000c00
 8001d1c:	40010400 	.word	0x40010400
 8001d20:	40014000 	.word	0x40014000
 8001d24:	40001800 	.word	0x40001800

08001d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0202 	mvn.w	r2, #2
 8001d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8ee 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8e0 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8f1 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0204 	mvn.w	r2, #4
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8c4 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8b6 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8c7 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0208 	mvn.w	r2, #8
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2204      	movs	r2, #4
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f89a 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f88c 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f89d 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0210 	mvn.w	r2, #16
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2208      	movs	r2, #8
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f870 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f862 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f873 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0201 	mvn.w	r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fd04 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d107      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f902 	bl	80020dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f838 	bl	8001f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8cc 	bl	80020c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <TIM_Base_SetConfig+0x114>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa6:	d00f      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <TIM_Base_SetConfig+0x118>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00b      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	; (80020a4 <TIM_Base_SetConfig+0x11c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <TIM_Base_SetConfig+0x120>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <TIM_Base_SetConfig+0x124>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a2f      	ldr	r2, [pc, #188]	; (800209c <TIM_Base_SetConfig+0x114>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d027      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <TIM_Base_SetConfig+0x118>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d023      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <TIM_Base_SetConfig+0x11c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <TIM_Base_SetConfig+0x120>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a29      	ldr	r2, [pc, #164]	; (80020ac <TIM_Base_SetConfig+0x124>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d017      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <TIM_Base_SetConfig+0x128>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <TIM_Base_SetConfig+0x12c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00f      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <TIM_Base_SetConfig+0x130>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a25      	ldr	r2, [pc, #148]	; (80020bc <TIM_Base_SetConfig+0x134>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <TIM_Base_SetConfig+0x138>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <TIM_Base_SetConfig+0x13c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <TIM_Base_SetConfig+0x114>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0xf8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <TIM_Base_SetConfig+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	615a      	str	r2, [r3, #20]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40010400 	.word	0x40010400
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40014400 	.word	0x40014400
 80020b8:	40014800 	.word	0x40014800
 80020bc:	40001800 	.word	0x40001800
 80020c0:	40001c00 	.word	0x40001c00
 80020c4:	40002000 	.word	0x40002000

080020c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e03f      	b.n	8002182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fc10 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	; 0x24
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fd7b 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b08a      	sub	sp, #40	; 0x28
 800218e:	af02      	add	r7, sp, #8
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d17c      	bne.n	80022a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_UART_Transmit+0x2c>
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e075      	b.n	80022a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_UART_Transmit+0x3e>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e06e      	b.n	80022a6 <HAL_UART_Transmit+0x11c>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2221      	movs	r2, #33	; 0x21
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021de:	f7fe fcf3 	bl	8000bc8 <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	88fa      	ldrh	r2, [r7, #6]
 80021ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d108      	bne.n	800220c <HAL_UART_Transmit+0x82>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	e003      	b.n	8002214 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800221c:	e02a      	b.n	8002274 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2200      	movs	r2, #0
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 faf9 	bl	8002820 <UART_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e036      	b.n	80022a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10b      	bne.n	8002256 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800224c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3302      	adds	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	e007      	b.n	8002266 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3301      	adds	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1cf      	bne.n	800221e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	2140      	movs	r1, #64	; 0x40
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fac9 	bl	8002820 <UART_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0ba      	sub	sp, #232	; 0xe8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_UART_IRQHandler+0x66>
 8002302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fbd3 	bl	8002aba <UART_Receive_IT>
      return;
 8002314:	e256      	b.n	80027c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80de 	beq.w	80024dc <HAL_UART_IRQHandler+0x22c>
 8002320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800232c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002330:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80d1 	beq.w	80024dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_UART_IRQHandler+0xae>
 8002346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_UART_IRQHandler+0xd2>
 800236a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_UART_IRQHandler+0xf6>
 800238e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <HAL_UART_IRQHandler+0x126>
 80023b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0208 	orr.w	r2, r3, #8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 81ed 	beq.w	80027ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_UART_IRQHandler+0x14e>
 80023ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb5e 	bl	8002aba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_UART_IRQHandler+0x17a>
 8002422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04f      	beq.n	80024ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa66 	bl	80028fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d141      	bne.n	80024c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800246a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800246e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1d9      	bne.n	800243e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a7d      	ldr	r2, [pc, #500]	; (800268c <HAL_UART_IRQHandler+0x3dc>)
 8002498:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fd14 	bl	8000ecc <HAL_DMA_Abort_IT>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b4:	4610      	mov	r0, r2
 80024b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	e00e      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f99a 	bl	80027f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	e00a      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f996 	bl	80027f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	e006      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f992 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024d6:	e170      	b.n	80027ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	bf00      	nop
    return;
 80024da:	e16e      	b.n	80027ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 814a 	bne.w	800277a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8143 	beq.w	800277a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 813c 	beq.w	800277a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	f040 80b4 	bne.w	8002690 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8140 	beq.w	80027be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002546:	429a      	cmp	r2, r3
 8002548:	f080 8139 	bcs.w	80027be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002552:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255e:	f000 8088 	beq.w	8002672 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800258e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800259a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1d9      	bne.n	8002562 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e1      	bne.n	80025ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800260e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002610:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002616:	e841 2300 	strex	r3, r2, [r1]
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800261c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e3      	bne.n	80025ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	e853 3f00 	ldrex	r3, [r3]
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002642:	f023 0310 	bic.w	r3, r3, #16
 8002646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002654:	65ba      	str	r2, [r7, #88]	; 0x58
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800265a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800265c:	e841 2300 	strex	r3, r2, [r1]
 8002660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e3      	bne.n	8002630 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fbbd 	bl	8000dec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800267a:	b29b      	uxth	r3, r3
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	b29b      	uxth	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8c0 	bl	8002808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002688:	e099      	b.n	80027be <HAL_UART_IRQHandler+0x50e>
 800268a:	bf00      	nop
 800268c:	080029c3 	.word	0x080029c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002698:	b29b      	uxth	r3, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 808b 	beq.w	80027c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8086 	beq.w	80027c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026da:	647a      	str	r2, [r7, #68]	; 0x44
 80026dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e3      	bne.n	80026b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3314      	adds	r3, #20
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	623b      	str	r3, [r7, #32]
   return(result);
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3314      	adds	r3, #20
 800270e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002712:	633a      	str	r2, [r7, #48]	; 0x30
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271a:	e841 2300 	strex	r3, r2, [r1]
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e3      	bne.n	80026ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	60fb      	str	r3, [r7, #12]
   return(result);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0310 	bic.w	r3, r3, #16
 800274a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002758:	61fa      	str	r2, [r7, #28]
 800275a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	69b9      	ldr	r1, [r7, #24]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	617b      	str	r3, [r7, #20]
   return(result);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e3      	bne.n	8002734 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800276c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002770:	4619      	mov	r1, r3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f848 	bl	8002808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002778:	e023      	b.n	80027c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_UART_IRQHandler+0x4ea>
 8002786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f929 	bl	80029ea <UART_Transmit_IT>
    return;
 8002798:	e014      	b.n	80027c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00e      	beq.n	80027c4 <HAL_UART_IRQHandler+0x514>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f969 	bl	8002a8a <UART_EndTransmit_IT>
    return;
 80027b8:	e004      	b.n	80027c4 <HAL_UART_IRQHandler+0x514>
    return;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <HAL_UART_IRQHandler+0x514>
      return;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_UART_IRQHandler+0x514>
      return;
 80027c2:	bf00      	nop
  }
}
 80027c4:	37e8      	adds	r7, #232	; 0xe8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002830:	e050      	b.n	80028d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d04c      	beq.n	80028d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x30>
 8002840:	f7fe f9c2 	bl	8000bc8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	429a      	cmp	r2, r3
 800284e:	d241      	bcs.n	80028d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002870:	637a      	str	r2, [r7, #52]	; 0x34
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	613b      	str	r3, [r7, #16]
   return(result);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a4:	623a      	str	r2, [r7, #32]
 80028a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e00f      	b.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d09f      	beq.n	8002832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3740      	adds	r7, #64	; 0x40
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b095      	sub	sp, #84	; 0x54
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002924:	643a      	str	r2, [r7, #64]	; 0x40
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800292a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e5      	bne.n	8002904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3314      	adds	r3, #20
 800293e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	e853 3f00 	ldrex	r3, [r3]
 8002946:	61fb      	str	r3, [r7, #28]
   return(result);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002960:	e841 2300 	strex	r3, r2, [r1]
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e5      	bne.n	8002938 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	2b01      	cmp	r3, #1
 8002972:	d119      	bne.n	80029a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	60bb      	str	r3, [r7, #8]
   return(result);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f023 0310 	bic.w	r3, r3, #16
 800298a:	647b      	str	r3, [r7, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002994:	61ba      	str	r2, [r7, #24]
 8002996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	613b      	str	r3, [r7, #16]
   return(result);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e5      	bne.n	8002974 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029b6:	bf00      	nop
 80029b8:	3754      	adds	r7, #84	; 0x54
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ff09 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b21      	cmp	r3, #33	; 0x21
 80029fc:	d13e      	bne.n	8002a7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a06:	d114      	bne.n	8002a32 <UART_Transmit_IT+0x48>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d110      	bne.n	8002a32 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	621a      	str	r2, [r3, #32]
 8002a30:	e008      	b.n	8002a44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6211      	str	r1, [r2, #32]
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10f      	bne.n	8002a78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fe8e 	bl	80027cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b08c      	sub	sp, #48	; 0x30
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b22      	cmp	r3, #34	; 0x22
 8002acc:	f040 80ab 	bne.w	8002c26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	d117      	bne.n	8002b0a <UART_Receive_IT+0x50>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d113      	bne.n	8002b0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	1c9a      	adds	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
 8002b08:	e026      	b.n	8002b58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d007      	beq.n	8002b2e <UART_Receive_IT+0x74>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <UART_Receive_IT+0x82>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e008      	b.n	8002b4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4619      	mov	r1, r3
 8002b66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d15a      	bne.n	8002c22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0220 	bic.w	r2, r2, #32
 8002b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d135      	bne.n	8002c18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f023 0310 	bic.w	r3, r3, #16
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd2:	623a      	str	r2, [r7, #32]
 8002bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	69f9      	ldr	r1, [r7, #28]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d10a      	bne.n	8002c0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fdf9 	bl	8002808 <HAL_UARTEx_RxEventCallback>
 8002c16:	e002      	b.n	8002c1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fde1 	bl	80027e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e002      	b.n	8002c28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3730      	adds	r7, #48	; 0x30
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b09f      	sub	sp, #124	; 0x7c
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	ea40 0301 	orr.w	r3, r0, r1
 8002c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c74:	f021 010c 	bic.w	r1, r1, #12
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	ea40 0301 	orr.w	r3, r0, r1
 8002c98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4bc5      	ldr	r3, [pc, #788]	; (8002fb4 <UART_SetConfig+0x384>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d004      	beq.n	8002cae <UART_SetConfig+0x7e>
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4bc3      	ldr	r3, [pc, #780]	; (8002fb8 <UART_SetConfig+0x388>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d103      	bne.n	8002cb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cae:	f7fe ff2b 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002cb2:	6778      	str	r0, [r7, #116]	; 0x74
 8002cb4:	e002      	b.n	8002cbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7fe ff13 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8002cba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	f040 80b6 	bne.w	8002e34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cca:	461c      	mov	r4, r3
 8002ccc:	f04f 0500 	mov.w	r5, #0
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce0:	1912      	adds	r2, r2, r4
 8002ce2:	eb45 0303 	adc.w	r3, r5, r3
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	00d9      	lsls	r1, r3, #3
 8002cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf4:	00d0      	lsls	r0, r2, #3
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	1911      	adds	r1, r2, r4
 8002cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8002cfe:	416b      	adcs	r3, r5
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d10:	415b      	adcs	r3, r3
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d1c:	f7fd fa60 	bl	80001e0 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4ba5      	ldr	r3, [pc, #660]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011e      	lsls	r6, r3, #4
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	461c      	mov	r4, r3
 8002d32:	f04f 0500 	mov.w	r5, #0
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
 8002d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d46:	1912      	adds	r2, r2, r4
 8002d48:	eb45 0303 	adc.w	r3, r5, r3
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	00d9      	lsls	r1, r3, #3
 8002d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5a:	00d0      	lsls	r0, r2, #3
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	1911      	adds	r1, r2, r4
 8002d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d64:	416b      	adcs	r3, r5
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	1891      	adds	r1, r2, r2
 8002d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d76:	415b      	adcs	r3, r3
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d82:	f7fd fa2d 	bl	80001e0 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a87      	ldr	r2, [pc, #540]	; (8002fbc <UART_SetConfig+0x38c>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dac:	441e      	add	r6, r3
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	4618      	mov	r0, r3
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1894      	adds	r4, r2, r2
 8002dbc:	623c      	str	r4, [r7, #32]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc6:	1812      	adds	r2, r2, r0
 8002dc8:	eb41 0303 	adc.w	r3, r1, r3
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	f04f 0500 	mov.w	r5, #0
 8002dd4:	00dd      	lsls	r5, r3, #3
 8002dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	1814      	adds	r4, r2, r0
 8002de2:	653c      	str	r4, [r7, #80]	; 0x50
 8002de4:	414b      	adcs	r3, r1
 8002de6:	657b      	str	r3, [r7, #84]	; 0x54
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	1891      	adds	r1, r2, r2
 8002df4:	61b9      	str	r1, [r7, #24]
 8002df6:	415b      	adcs	r3, r3
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e02:	f7fd f9ed 	bl	80001e0 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4432      	add	r2, r6
 8002e30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e32:	e0b9      	b.n	8002fa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e36:	461c      	mov	r4, r3
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	6139      	str	r1, [r7, #16]
 8002e44:	415b      	adcs	r3, r3
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	1912      	adds	r2, r2, r4
 8002e4e:	eb45 0303 	adc.w	r3, r5, r3
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	eb12 0804 	adds.w	r8, r2, r4
 8002e6a:	eb43 0905 	adc.w	r9, r3, r5
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	008b      	lsls	r3, r1, #2
 8002e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e86:	0082      	lsls	r2, r0, #2
 8002e88:	4640      	mov	r0, r8
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	f7fd f9a8 	bl	80001e0 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011e      	lsls	r6, r3, #4
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	1894      	adds	r4, r2, r2
 8002eac:	60bc      	str	r4, [r7, #8]
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb6:	1812      	adds	r2, r2, r0
 8002eb8:	eb41 0303 	adc.w	r3, r1, r3
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	00dd      	lsls	r5, r3, #3
 8002ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eca:	00d4      	lsls	r4, r2, #3
 8002ecc:	4622      	mov	r2, r4
 8002ece:	462b      	mov	r3, r5
 8002ed0:	1814      	adds	r4, r2, r0
 8002ed2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ed4:	414b      	adcs	r3, r1
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef0:	0082      	lsls	r2, r0, #2
 8002ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ef6:	f7fd f973 	bl	80001e0 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	; 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	3332      	adds	r3, #50	; 0x32
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	441e      	add	r6, r3
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	4618      	mov	r0, r3
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	1894      	adds	r4, r2, r2
 8002f2e:	603c      	str	r4, [r7, #0]
 8002f30:	415b      	adcs	r3, r3
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f38:	1812      	adds	r2, r2, r0
 8002f3a:	eb41 0303 	adc.w	r3, r1, r3
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	f04f 0500 	mov.w	r5, #0
 8002f46:	00dd      	lsls	r5, r3, #3
 8002f48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f4c:	00d4      	lsls	r4, r2, #3
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb12 0a00 	adds.w	sl, r2, r0
 8002f56:	eb43 0b01 	adc.w	fp, r3, r1
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	008b      	lsls	r3, r1, #2
 8002f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f72:	0082      	lsls	r2, r0, #2
 8002f74:	4650      	mov	r0, sl
 8002f76:	4659      	mov	r1, fp
 8002f78:	f7fd f932 	bl	80001e0 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f82:	fba3 1302 	umull	r1, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2164      	movs	r1, #100	; 0x64
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4432      	add	r2, r6
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	377c      	adds	r7, #124	; 0x7c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40011400 	.word	0x40011400
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f103 0208 	add.w	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f103 0208 	add.w	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f103 0208 	add.w	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d103      	bne.n	8003082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e00c      	b.n	800309c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3308      	adds	r3, #8
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e002      	b.n	8003090 <vListInsert+0x2e>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	d2f6      	bcs.n	800308a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d103      	bne.n	8003108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003152:	f001 fcff 	bl	8004b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	3b01      	subs	r3, #1
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d114      	bne.n	80031d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01a      	beq.n	80031e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3310      	adds	r3, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 ffc1 	bl	800413c <xTaskRemoveFromEventList>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <xQueueGenericReset+0xcc>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	e009      	b.n	80031e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fef2 	bl	8002fc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff feed 	bl	8002fc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f001 fce5 	bl	8004bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericCreate+0x2a>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	613b      	str	r3, [r7, #16]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3348      	adds	r3, #72	; 0x48
 8003230:	4618      	mov	r0, r3
 8003232:	f001 fd71 	bl	8004d18 <pvPortMalloc>
 8003236:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d011      	beq.n	8003262 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3348      	adds	r3, #72	; 0x48
 8003246:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003250:	79fa      	ldrb	r2, [r7, #7]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f805 	bl	800326c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003262:	69bb      	ldr	r3, [r7, #24]
	}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e002      	b.n	800328e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800329a:	2101      	movs	r1, #1
 800329c:	69b8      	ldr	r0, [r7, #24]
 800329e:	f7ff ff43 	bl	8003128 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80032ca:	2300      	movs	r3, #0
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f81d 	bl	8003310 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032e8:	2301      	movs	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	461a      	mov	r2, r3
 80032f4:	6939      	ldr	r1, [r7, #16]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff7e 	bl	80031f8 <xQueueGenericCreate>
 80032fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff ffd3 	bl	80032aa <prvInitialiseMutex>

		return xNewQueue;
 8003304:	68fb      	ldr	r3, [r7, #12]
	}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	; 0x38
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueGenericSend+0x32>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <xQueueGenericSend+0x40>
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <xQueueGenericSend+0x44>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <xQueueGenericSend+0x46>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <xQueueGenericSend+0x60>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d103      	bne.n	800337e <xQueueGenericSend+0x6e>
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <xQueueGenericSend+0x72>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueGenericSend+0x74>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueGenericSend+0x8e>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	623b      	str	r3, [r7, #32]
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800339e:	f001 f889 	bl	80044b4 <xTaskGetSchedulerState>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <xQueueGenericSend+0x9e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <xQueueGenericSend+0xa2>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <xQueueGenericSend+0xa4>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xQueueGenericSend+0xbe>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	61fb      	str	r3, [r7, #28]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ce:	f001 fbc1 	bl	8004b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <xQueueGenericSend+0xd4>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d129      	bne.n	8003438 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ea:	f000 f9b3 	bl	8003754 <prvCopyDataToQueue>
 80033ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe9d 	bl	800413c <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <xQueueGenericSend+0x1f8>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	e00a      	b.n	8003430 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <xQueueGenericSend+0x1f8>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003430:	f001 fbc0 	bl	8004bb4 <vPortExitCritical>
				return pdPASS;
 8003434:	2301      	movs	r3, #1
 8003436:	e063      	b.n	8003500 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800343e:	f001 fbb9 	bl	8004bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003442:	2300      	movs	r3, #0
 8003444:	e05c      	b.n	8003500 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fed5 	bl	8004200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800345a:	f001 fbab 	bl	8004bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800345e:	f000 fc8b 	bl	8003d78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003462:	f001 fb77 	bl	8004b54 <vPortEnterCritical>
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346c:	b25b      	sxtb	r3, r3
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d103      	bne.n	800347c <xQueueGenericSend+0x16c>
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <xQueueGenericSend+0x182>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003492:	f001 fb8f 	bl	8004bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fec4 	bl	800422c <xTaskCheckForTimeOut>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d124      	bne.n	80034f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ac:	f000 fa24 	bl	80038f8 <prvIsQueueFull>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	3310      	adds	r3, #16
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe18 	bl	80040f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c6:	f000 f9af 	bl	8003828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ca:	f000 fc63 	bl	8003d94 <xTaskResumeAll>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af7c 	bne.w	80033ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <xQueueGenericSend+0x1f8>)
 80034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	e772      	b.n	80033ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ea:	f000 f99d 	bl	8003828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ee:	f000 fc51 	bl	8003d94 <xTaskResumeAll>
 80034f2:	e76c      	b.n	80033ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f6:	f000 f997 	bl	8003828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034fa:	f000 fc4b 	bl	8003d94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003500:	4618      	mov	r0, r3
 8003502:	3738      	adds	r7, #56	; 0x38
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	; 0x38
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	61fb      	str	r3, [r7, #28]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800355c:	f000 ffaa 	bl	80044b4 <xTaskGetSchedulerState>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <xQueueSemaphoreTake+0x60>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <xQueueSemaphoreTake+0x64>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <xQueueSemaphoreTake+0x66>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	61bb      	str	r3, [r7, #24]
}
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800358c:	f001 fae2 	bl	8004b54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d024      	beq.n	80035e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035ac:	f001 f92a 	bl	8004804 <pvTaskIncrementMutexHeldCount>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00f      	beq.n	80035de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	3310      	adds	r3, #16
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fdba 	bl	800413c <xTaskRemoveFromEventList>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035ce:	4b54      	ldr	r3, [pc, #336]	; (8003720 <xQueueSemaphoreTake+0x214>)
 80035d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035de:	f001 fae9 	bl	8004bb4 <vPortExitCritical>
				return pdPASS;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e097      	b.n	8003716 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d111      	bne.n	8003610 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	617b      	str	r3, [r7, #20]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003608:	f001 fad4 	bl	8004bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800360c:	2300      	movs	r3, #0
 800360e:	e082      	b.n	8003716 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fdf0 	bl	8004200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003624:	f001 fac6 	bl	8004bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003628:	f000 fba6 	bl	8003d78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800362c:	f001 fa92 	bl	8004b54 <vPortEnterCritical>
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003636:	b25b      	sxtb	r3, r3
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d103      	bne.n	8003646 <xQueueSemaphoreTake+0x13a>
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364c:	b25b      	sxtb	r3, r3
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d103      	bne.n	800365c <xQueueSemaphoreTake+0x150>
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365c:	f001 faaa 	bl	8004bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003660:	463a      	mov	r2, r7
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fddf 	bl	800422c <xTaskCheckForTimeOut>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d132      	bne.n	80036da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003676:	f000 f929 	bl	80038cc <prvIsQueueEmpty>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d026      	beq.n	80036ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003688:	f001 fa64 	bl	8004b54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 ff2d 	bl	80044f0 <xTaskPriorityInherit>
 8003696:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003698:	f001 fa8c 	bl	8004bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fd25 	bl	80040f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ac:	f000 f8bc 	bl	8003828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036b0:	f000 fb70 	bl	8003d94 <xTaskResumeAll>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f47f af68 	bne.w	800358c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <xQueueSemaphoreTake+0x214>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	e75e      	b.n	800358c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80036ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036d0:	f000 f8aa 	bl	8003828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d4:	f000 fb5e 	bl	8003d94 <xTaskResumeAll>
 80036d8:	e758      	b.n	800358c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036dc:	f000 f8a4 	bl	8003828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036e0:	f000 fb58 	bl	8003d94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036e6:	f000 f8f1 	bl	80038cc <prvIsQueueEmpty>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f43f af4d 	beq.w	800358c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80036f8:	f001 fa2c 	bl	8004b54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036fe:	f000 f811 	bl	8003724 <prvGetDisinheritPriorityAfterTimeout>
 8003702:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ffec 	bl	80046e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003710:	f001 fa50 	bl	8004bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003716:	4618      	mov	r0, r3
 8003718:	3738      	adds	r7, #56	; 0x38
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e001      	b.n	8003746 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003746:	68fb      	ldr	r3, [r7, #12]
	}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d14d      	bne.n	8003816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 ff2c 	bl	80045dc <xTaskPriorityDisinherit>
 8003784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	e043      	b.n	8003816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d119      	bne.n	80037c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6858      	ldr	r0, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	461a      	mov	r2, r3
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	f001 fcc8 	bl	8005134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	441a      	add	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d32b      	bcc.n	8003816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	e026      	b.n	8003816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68d8      	ldr	r0, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	461a      	mov	r2, r3
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	f001 fcae 	bl	8005134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	425b      	negs	r3, r3
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d207      	bcs.n	8003804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	425b      	negs	r3, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d105      	bne.n	8003816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	3b01      	subs	r3, #1
 8003814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800381e:	697b      	ldr	r3, [r7, #20]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003830:	f001 f990 	bl	8004b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800383a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800383c:	e011      	b.n	8003862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3324      	adds	r3, #36	; 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fc76 	bl	800413c <xTaskRemoveFromEventList>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003856:	f000 fd4b 	bl	80042f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	3b01      	subs	r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	dce9      	bgt.n	800383e <prvUnlockQueue+0x16>
 800386a:	e000      	b.n	800386e <prvUnlockQueue+0x46>
					break;
 800386c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003876:	f001 f99d 	bl	8004bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800387a:	f001 f96b 	bl	8004b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003886:	e011      	b.n	80038ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3310      	adds	r3, #16
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fc51 	bl	800413c <xTaskRemoveFromEventList>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038a0:	f000 fd26 	bl	80042f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038a4:	7bbb      	ldrb	r3, [r7, #14]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	dce9      	bgt.n	8003888 <prvUnlockQueue+0x60>
 80038b4:	e000      	b.n	80038b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038c0:	f001 f978 	bl	8004bb4 <vPortExitCritical>
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038d4:	f001 f93e 	bl	8004b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e001      	b.n	80038ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ea:	f001 f963 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003900:	f001 f928 	bl	8004b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	429a      	cmp	r2, r3
 800390e:	d102      	bne.n	8003916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e001      	b.n	800391a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800391a:	f001 f94b 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af04      	add	r7, sp, #16
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xTaskCreateStatic+0x2a>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	623b      	str	r3, [r7, #32]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xTaskCreateStatic+0x46>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61fb      	str	r3, [r7, #28]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800396e:	2354      	movs	r3, #84	; 0x54
 8003970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b54      	cmp	r3, #84	; 0x54
 8003976:	d00a      	beq.n	800398e <xTaskCreateStatic+0x66>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800398e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01e      	beq.n	80039d4 <xTaskCreateStatic+0xac>
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ae:	2300      	movs	r3, #0
 80039b0:	9303      	str	r3, [sp, #12]
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f850 	bl	8003a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ce:	f000 f8d5 	bl	8003b7c <prvAddNewTaskToReadyList>
 80039d2:	e001      	b.n	80039d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d8:	697b      	ldr	r3, [r7, #20]
	}
 80039da:	4618      	mov	r0, r3
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08c      	sub	sp, #48	; 0x30
 80039e6:	af04      	add	r7, sp, #16
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f98e 	bl	8004d18 <pvPortMalloc>
 80039fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a04:	2054      	movs	r0, #84	; 0x54
 8003a06:	f001 f987 	bl	8004d18 <pvPortMalloc>
 8003a0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
 8003a18:	e005      	b.n	8003a26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f001 fa48 	bl	8004eb0 <vPortFree>
 8003a20:	e001      	b.n	8003a26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d017      	beq.n	8003a5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	2300      	movs	r3, #0
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f80e 	bl	8003a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a50:	69f8      	ldr	r0, [r7, #28]
 8003a52:	f000 f893 	bl	8003b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e002      	b.n	8003a62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a62:	69bb      	ldr	r3, [r7, #24]
	}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a84:	3b01      	subs	r3, #1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	617b      	str	r3, [r7, #20]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01f      	beq.n	8003afa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e012      	b.n	8003ae6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	7819      	ldrb	r1, [r3, #0]
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	3334      	adds	r3, #52	; 0x34
 8003ad0:	460a      	mov	r2, r1
 8003ad2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d9e9      	bls.n	8003ac0 <prvInitialiseNewTask+0x54>
 8003aec:	e000      	b.n	8003af0 <prvInitialiseNewTask+0x84>
			{
				break;
 8003aee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af8:	e003      	b.n	8003b02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d901      	bls.n	8003b0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b08:	2306      	movs	r3, #6
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	3304      	adds	r3, #4
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fa6c 	bl	8003000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fa67 	bl	8003000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	f1c3 0207 	rsb	r2, r3, #7
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	69b8      	ldr	r0, [r7, #24]
 8003b5c:	f000 fecc 	bl	80048f8 <pxPortInitialiseStack>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b72:	bf00      	nop
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b84:	f000 ffe6 	bl	8004b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b88:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <prvAddNewTaskToReadyList+0xb8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <prvAddNewTaskToReadyList+0xb8>)
 8003b90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b92:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <prvAddNewTaskToReadyList+0xbc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b9a:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <prvAddNewTaskToReadyList+0xbc>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <prvAddNewTaskToReadyList+0xb8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d110      	bne.n	8003bca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba8:	f000 fbc6 	bl	8004338 <prvInitialiseTaskLists>
 8003bac:	e00d      	b.n	8003bca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <prvAddNewTaskToReadyList+0xc0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <prvAddNewTaskToReadyList+0xbc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d802      	bhi.n	8003bca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <prvAddNewTaskToReadyList+0xbc>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <prvAddNewTaskToReadyList+0xc4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <prvAddNewTaskToReadyList+0xc4>)
 8003bd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <prvAddNewTaskToReadyList+0xc8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <prvAddNewTaskToReadyList+0xc8>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <prvAddNewTaskToReadyList+0xcc>)
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7ff fa0c 	bl	800301a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c02:	f000 ffd7 	bl	8004bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <prvAddNewTaskToReadyList+0xc0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvAddNewTaskToReadyList+0xbc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <prvAddNewTaskToReadyList+0xd0>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000380 	.word	0x20000380
 8003c38:	20000280 	.word	0x20000280
 8003c3c:	2000038c 	.word	0x2000038c
 8003c40:	2000039c 	.word	0x2000039c
 8003c44:	20000388 	.word	0x20000388
 8003c48:	20000284 	.word	0x20000284
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d017      	beq.n	8003c92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <vTaskDelay+0x60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <vTaskDelay+0x30>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60bb      	str	r3, [r7, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c80:	f000 f87a 	bl	8003d78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c84:	2100      	movs	r1, #0
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fdd0 	bl	800482c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c8c:	f000 f882 	bl	8003d94 <xTaskResumeAll>
 8003c90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <vTaskDelay+0x64>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200003a8 	.word	0x200003a8
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cc6:	463a      	mov	r2, r7
 8003cc8:	1d39      	adds	r1, r7, #4
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc02 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	9202      	str	r2, [sp, #8]
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	491e      	ldr	r1, [pc, #120]	; (8003d60 <vTaskStartScheduler+0xa8>)
 8003ce8:	481e      	ldr	r0, [pc, #120]	; (8003d64 <vTaskStartScheduler+0xac>)
 8003cea:	f7ff fe1d 	bl	8003928 <xTaskCreateStatic>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <vTaskStartScheduler+0xb0>)
 8003cf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <vTaskStartScheduler+0xb0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e001      	b.n	8003d06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d116      	bne.n	8003d3a <vTaskStartScheduler+0x82>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	613b      	str	r3, [r7, #16]
}
 8003d1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <vTaskStartScheduler+0xb4>)
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <vTaskStartScheduler+0xb8>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <vTaskStartScheduler+0xbc>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d34:	f000 fe6c 	bl	8004a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d38:	e00e      	b.n	8003d58 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d10a      	bne.n	8003d58 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60fb      	str	r3, [r7, #12]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <vTaskStartScheduler+0x9e>
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08005280 	.word	0x08005280
 8003d64:	08004309 	.word	0x08004309
 8003d68:	200003a4 	.word	0x200003a4
 8003d6c:	200003a0 	.word	0x200003a0
 8003d70:	2000038c 	.word	0x2000038c
 8003d74:	20000384 	.word	0x20000384

08003d78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <vTaskSuspendAll+0x18>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <vTaskSuspendAll+0x18>)
 8003d84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	200003a8 	.word	0x200003a8

08003d94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <xTaskResumeAll+0x114>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	603b      	str	r3, [r7, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dc0:	f000 fec8 	bl	8004b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dc4:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <xTaskResumeAll+0x114>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	4a37      	ldr	r2, [pc, #220]	; (8003ea8 <xTaskResumeAll+0x114>)
 8003dcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <xTaskResumeAll+0x114>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d161      	bne.n	8003e9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dd6:	4b35      	ldr	r3, [pc, #212]	; (8003eac <xTaskResumeAll+0x118>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d05d      	beq.n	8003e9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dde:	e02e      	b.n	8003e3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de0:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <xTaskResumeAll+0x11c>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3318      	adds	r3, #24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f971 	bl	80030d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f96c 	bl	80030d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <xTaskResumeAll+0x120>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <xTaskResumeAll+0x120>)
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <xTaskResumeAll+0x124>)
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f7ff f8f8 	bl	800301a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <xTaskResumeAll+0x128>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <xTaskResumeAll+0x12c>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <xTaskResumeAll+0x11c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1cc      	bne.n	8003de0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e4c:	f000 fb12 	bl	8004474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <xTaskResumeAll+0x130>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e5c:	f000 f836 	bl	8003ecc <xTaskIncrementTick>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <xTaskResumeAll+0x12c>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f1      	bne.n	8003e5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <xTaskResumeAll+0x130>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <xTaskResumeAll+0x12c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <xTaskResumeAll+0x134>)
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e9a:	f000 fe8b 	bl	8004bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200003a8 	.word	0x200003a8
 8003eac:	20000380 	.word	0x20000380
 8003eb0:	20000340 	.word	0x20000340
 8003eb4:	20000388 	.word	0x20000388
 8003eb8:	20000284 	.word	0x20000284
 8003ebc:	20000280 	.word	0x20000280
 8003ec0:	20000394 	.word	0x20000394
 8003ec4:	20000390 	.word	0x20000390
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	; (8004010 <xTaskIncrementTick+0x144>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 808e 	bne.w	8003ffc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <xTaskIncrementTick+0x148>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <xTaskIncrementTick+0x148>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d120      	bne.n	8003f36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ef4:	4b48      	ldr	r3, [pc, #288]	; (8004018 <xTaskIncrementTick+0x14c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <xTaskIncrementTick+0x48>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	603b      	str	r3, [r7, #0]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xTaskIncrementTick+0x46>
 8003f14:	4b40      	ldr	r3, [pc, #256]	; (8004018 <xTaskIncrementTick+0x14c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <xTaskIncrementTick+0x150>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	; (8004018 <xTaskIncrementTick+0x14c>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4a3e      	ldr	r2, [pc, #248]	; (800401c <xTaskIncrementTick+0x150>)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <xTaskIncrementTick+0x154>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <xTaskIncrementTick+0x154>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	f000 fa9f 	bl	8004474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <xTaskIncrementTick+0x158>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d348      	bcc.n	8003fd2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f40:	4b35      	ldr	r3, [pc, #212]	; (8004018 <xTaskIncrementTick+0x14c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <xTaskIncrementTick+0x158>)
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	601a      	str	r2, [r3, #0]
					break;
 8003f52:	e03e      	b.n	8003fd2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f54:	4b30      	ldr	r3, [pc, #192]	; (8004018 <xTaskIncrementTick+0x14c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d203      	bcs.n	8003f74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <xTaskIncrementTick+0x158>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f72:	e02e      	b.n	8003fd2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff f8ab 	bl	80030d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f8a2 	bl	80030d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <xTaskIncrementTick+0x15c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	4a22      	ldr	r2, [pc, #136]	; (8004028 <xTaskIncrementTick+0x15c>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a1f      	ldr	r2, [pc, #124]	; (800402c <xTaskIncrementTick+0x160>)
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7ff f82e 	bl	800301a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <xTaskIncrementTick+0x164>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3b9      	bcc.n	8003f40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd0:	e7b6      	b.n	8003f40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fd2:	4b17      	ldr	r3, [pc, #92]	; (8004030 <xTaskIncrementTick+0x164>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4914      	ldr	r1, [pc, #80]	; (800402c <xTaskIncrementTick+0x160>)
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d901      	bls.n	8003fee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTaskIncrementTick+0x168>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e004      	b.n	8004006 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <xTaskIncrementTick+0x16c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <xTaskIncrementTick+0x16c>)
 8004004:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004006:	697b      	ldr	r3, [r7, #20]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200003a8 	.word	0x200003a8
 8004014:	20000384 	.word	0x20000384
 8004018:	20000338 	.word	0x20000338
 800401c:	2000033c 	.word	0x2000033c
 8004020:	20000398 	.word	0x20000398
 8004024:	200003a0 	.word	0x200003a0
 8004028:	20000388 	.word	0x20000388
 800402c:	20000284 	.word	0x20000284
 8004030:	20000280 	.word	0x20000280
 8004034:	20000394 	.word	0x20000394
 8004038:	20000390 	.word	0x20000390

0800403c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <vTaskSwitchContext+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <vTaskSwitchContext+0xa8>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004050:	e03f      	b.n	80040d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <vTaskSwitchContext+0xa8>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <vTaskSwitchContext+0xac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	f1c3 031f 	rsb	r3, r3, #31
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	491f      	ldr	r1, [pc, #124]	; (80040ec <vTaskSwitchContext+0xb0>)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vTaskSwitchContext+0x5a>
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <vTaskSwitchContext+0xb0>)
 80040a4:	4413      	add	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3308      	adds	r3, #8
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d104      	bne.n	80040c8 <vTaskSwitchContext+0x8c>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <vTaskSwitchContext+0xb4>)
 80040d0:	6013      	str	r3, [r2, #0]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	200003a8 	.word	0x200003a8
 80040e4:	20000394 	.word	0x20000394
 80040e8:	20000388 	.word	0x20000388
 80040ec:	20000284 	.word	0x20000284
 80040f0:	20000280 	.word	0x20000280

080040f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <vTaskPlaceOnEventList+0x44>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3318      	adds	r3, #24
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fe ff9d 	bl	8003062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004128:	2101      	movs	r1, #1
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f000 fb7e 	bl	800482c <prvAddCurrentTaskToDelayedList>
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000280 	.word	0x20000280

0800413c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60fb      	str	r3, [r7, #12]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3318      	adds	r3, #24
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe ffb1 	bl	80030d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <xTaskRemoveFromEventList+0xac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11c      	bne.n	80041b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3304      	adds	r3, #4
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe ffa8 	bl	80030d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2201      	movs	r2, #1
 800418a:	409a      	lsls	r2, r3
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <xTaskRemoveFromEventList+0xb0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <xTaskRemoveFromEventList+0xb0>)
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <xTaskRemoveFromEventList+0xb4>)
 80041a4:	441a      	add	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fe ff34 	bl	800301a <vListInsertEnd>
 80041b2:	e005      	b.n	80041c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4619      	mov	r1, r3
 80041ba:	480e      	ldr	r0, [pc, #56]	; (80041f4 <xTaskRemoveFromEventList+0xb8>)
 80041bc:	f7fe ff2d 	bl	800301a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <xTaskRemoveFromEventList+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d905      	bls.n	80041da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <xTaskRemoveFromEventList+0xc0>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e001      	b.n	80041de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041de:	697b      	ldr	r3, [r7, #20]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200003a8 	.word	0x200003a8
 80041ec:	20000388 	.word	0x20000388
 80041f0:	20000284 	.word	0x20000284
 80041f4:	20000340 	.word	0x20000340
 80041f8:	20000280 	.word	0x20000280
 80041fc:	20000394 	.word	0x20000394

08004200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <vTaskInternalSetTimeOutState+0x24>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <vTaskInternalSetTimeOutState+0x28>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	20000398 	.word	0x20000398
 8004228:	20000384 	.word	0x20000384

0800422c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	613b      	str	r3, [r7, #16]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800426e:	f000 fc71 	bl	8004b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <xTaskCheckForTimeOut+0xbc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d102      	bne.n	8004292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e023      	b.n	80042da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <xTaskCheckForTimeOut+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d007      	beq.n	80042ae <xTaskCheckForTimeOut+0x82>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	e015      	b.n	80042da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d20b      	bcs.n	80042d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff9b 	bl	8004200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e004      	b.n	80042da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042da:	f000 fc6b 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 80042de:	69fb      	ldr	r3, [r7, #28]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20000384 	.word	0x20000384
 80042ec:	20000398 	.word	0x20000398

080042f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <vTaskMissedYield+0x14>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000394 	.word	0x20000394

08004308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004310:	f000 f852 	bl	80043b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <prvIdleTask+0x28>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d9f9      	bls.n	8004310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <prvIdleTask+0x2c>)
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800432c:	e7f0      	b.n	8004310 <prvIdleTask+0x8>
 800432e:	bf00      	nop
 8004330:	20000284 	.word	0x20000284
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	e00c      	b.n	800435e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <prvInitialiseTaskLists+0x60>)
 8004350:	4413      	add	r3, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fe34 	bl	8002fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3301      	adds	r3, #1
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b06      	cmp	r3, #6
 8004362:	d9ef      	bls.n	8004344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <prvInitialiseTaskLists+0x64>)
 8004366:	f7fe fe2b 	bl	8002fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800436a:	480d      	ldr	r0, [pc, #52]	; (80043a0 <prvInitialiseTaskLists+0x68>)
 800436c:	f7fe fe28 	bl	8002fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004370:	480c      	ldr	r0, [pc, #48]	; (80043a4 <prvInitialiseTaskLists+0x6c>)
 8004372:	f7fe fe25 	bl	8002fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004376:	480c      	ldr	r0, [pc, #48]	; (80043a8 <prvInitialiseTaskLists+0x70>)
 8004378:	f7fe fe22 	bl	8002fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800437c:	480b      	ldr	r0, [pc, #44]	; (80043ac <prvInitialiseTaskLists+0x74>)
 800437e:	f7fe fe1f 	bl	8002fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <prvInitialiseTaskLists+0x78>)
 8004384:	4a05      	ldr	r2, [pc, #20]	; (800439c <prvInitialiseTaskLists+0x64>)
 8004386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <prvInitialiseTaskLists+0x7c>)
 800438a:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <prvInitialiseTaskLists+0x68>)
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000284 	.word	0x20000284
 800439c:	20000310 	.word	0x20000310
 80043a0:	20000324 	.word	0x20000324
 80043a4:	20000340 	.word	0x20000340
 80043a8:	20000354 	.word	0x20000354
 80043ac:	2000036c 	.word	0x2000036c
 80043b0:	20000338 	.word	0x20000338
 80043b4:	2000033c 	.word	0x2000033c

080043b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043be:	e019      	b.n	80043f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043c0:	f000 fbc8 	bl	8004b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <prvCheckTasksWaitingTermination+0x50>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fe7f 	bl	80030d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <prvCheckTasksWaitingTermination+0x54>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	4a0b      	ldr	r2, [pc, #44]	; (800440c <prvCheckTasksWaitingTermination+0x54>)
 80043de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <prvCheckTasksWaitingTermination+0x58>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <prvCheckTasksWaitingTermination+0x58>)
 80043e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ea:	f000 fbe3 	bl	8004bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f810 	bl	8004414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <prvCheckTasksWaitingTermination+0x58>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e1      	bne.n	80043c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000354 	.word	0x20000354
 800440c:	20000380 	.word	0x20000380
 8004410:	20000368 	.word	0x20000368

08004414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fd40 	bl	8004eb0 <vPortFree>
				vPortFree( pxTCB );
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fd3d 	bl	8004eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004436:	e018      	b.n	800446a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443e:	2b01      	cmp	r3, #1
 8004440:	d103      	bne.n	800444a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fd34 	bl	8004eb0 <vPortFree>
	}
 8004448:	e00f      	b.n	800446a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004450:	2b02      	cmp	r3, #2
 8004452:	d00a      	beq.n	800446a <prvDeleteTCB+0x56>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	60fb      	str	r3, [r7, #12]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <prvDeleteTCB+0x54>
	}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <prvResetNextTaskUnblockTime+0x38>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800448c:	e008      	b.n	80044a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <prvResetNextTaskUnblockTime+0x38>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <prvResetNextTaskUnblockTime+0x3c>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	20000338 	.word	0x20000338
 80044b0:	200003a0 	.word	0x200003a0

080044b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <xTaskGetSchedulerState+0x34>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044c2:	2301      	movs	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	e008      	b.n	80044da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <xTaskGetSchedulerState+0x38>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044d0:	2302      	movs	r3, #2
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e001      	b.n	80044da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044da:	687b      	ldr	r3, [r7, #4]
	}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	2000038c 	.word	0x2000038c
 80044ec:	200003a8 	.word	0x200003a8

080044f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d05e      	beq.n	80045c4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <xTaskPriorityInherit+0xe0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d24e      	bcs.n	80045b2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db06      	blt.n	800452a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451c:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <xTaskPriorityInherit+0xe0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f1c3 0207 	rsb	r2, r3, #7
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6959      	ldr	r1, [r3, #20]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <xTaskPriorityInherit+0xe4>)
 800453c:	4413      	add	r3, r2
 800453e:	4299      	cmp	r1, r3
 8004540:	d12f      	bne.n	80045a2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fdc4 	bl	80030d4 <uxListRemove>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	2201      	movs	r2, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43da      	mvns	r2, r3
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xTaskPriorityInherit+0xe8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4013      	ands	r3, r2
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <xTaskPriorityInherit+0xe8>)
 8004566:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <xTaskPriorityInherit+0xe0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	2201      	movs	r2, #1
 8004578:	409a      	lsls	r2, r3
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <xTaskPriorityInherit+0xe8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <xTaskPriorityInherit+0xe8>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <xTaskPriorityInherit+0xe4>)
 8004592:	441a      	add	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fe fd3d 	bl	800301a <vListInsertEnd>
 80045a0:	e004      	b.n	80045ac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <xTaskPriorityInherit+0xe0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e008      	b.n	80045c4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <xTaskPriorityInherit+0xe0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d201      	bcs.n	80045c4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c4:	68fb      	ldr	r3, [r7, #12]
	}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000280 	.word	0x20000280
 80045d4:	20000284 	.word	0x20000284
 80045d8:	20000388 	.word	0x20000388

080045dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d06e      	beq.n	80046d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045f2:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <xTaskPriorityDisinherit+0x100>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d00a      	beq.n	8004612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60fb      	str	r3, [r7, #12]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60bb      	str	r3, [r7, #8]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	429a      	cmp	r2, r3
 8004644:	d044      	beq.n	80046d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d140      	bne.n	80046d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3304      	adds	r3, #4
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fd3e 	bl	80030d4 <uxListRemove>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d115      	bne.n	800468a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	491f      	ldr	r1, [pc, #124]	; (80046e0 <xTaskPriorityDisinherit+0x104>)
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xTaskPriorityDisinherit+0xae>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	2201      	movs	r2, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43da      	mvns	r2, r3
 8004680:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <xTaskPriorityDisinherit+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4013      	ands	r3, r2
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <xTaskPriorityDisinherit+0x108>)
 8004688:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	f1c3 0207 	rsb	r2, r3, #7
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	2201      	movs	r2, #1
 80046a4:	409a      	lsls	r2, r3
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <xTaskPriorityDisinherit+0x108>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <xTaskPriorityDisinherit+0x108>)
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <xTaskPriorityDisinherit+0x104>)
 80046be:	441a      	add	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f7fe fca7 	bl	800301a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046d0:	697b      	ldr	r3, [r7, #20]
	}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000280 	.word	0x20000280
 80046e0:	20000284 	.word	0x20000284
 80046e4:	20000388 	.word	0x20000388

080046e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d077      	beq.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d902      	bls.n	800472e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e002      	b.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	429a      	cmp	r2, r3
 800473c:	d058      	beq.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d153      	bne.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	429a      	cmp	r2, r3
 8004750:	d10a      	bne.n	8004768 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	db04      	blt.n	8004786 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f1c3 0207 	rsb	r2, r3, #7
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	6959      	ldr	r1, [r3, #20]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004796:	4413      	add	r3, r2
 8004798:	4299      	cmp	r1, r3
 800479a:	d129      	bne.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fc97 	bl	80030d4 <uxListRemove>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	2201      	movs	r2, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a06      	ldr	r2, [pc, #24]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80047e2:	441a      	add	r2, r3
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe fc15 	bl	800301a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f0:	bf00      	nop
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000280 	.word	0x20000280
 80047fc:	20000284 	.word	0x20000284
 8004800:	20000388 	.word	0x20000388

08004804 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <pvTaskIncrementMutexHeldCount+0x24>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <pvTaskIncrementMutexHeldCount+0x24>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004816:	3201      	adds	r2, #1
 8004818:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800481a:	4b03      	ldr	r3, [pc, #12]	; (8004828 <pvTaskIncrementMutexHeldCount+0x24>)
 800481c:	681b      	ldr	r3, [r3, #0]
	}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000280 	.word	0x20000280

0800482c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fc46 	bl	80030d4 <uxListRemove>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4013      	ands	r3, r2
 8004862:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004864:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d10a      	bne.n	8004884 <prvAddCurrentTaskToDelayedList+0x58>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	481a      	ldr	r0, [pc, #104]	; (80048e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800487e:	f7fe fbcc 	bl	800301a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004882:	e026      	b.n	80048d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	429a      	cmp	r2, r3
 800489a:	d209      	bcs.n	80048b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800489c:	4b13      	ldr	r3, [pc, #76]	; (80048ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe fbda 	bl	8003062 <vListInsert>
}
 80048ae:	e010      	b.n	80048d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fe fbd0 	bl	8003062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d202      	bcs.n	80048d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048cc:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6013      	str	r3, [r2, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000384 	.word	0x20000384
 80048e0:	20000280 	.word	0x20000280
 80048e4:	20000388 	.word	0x20000388
 80048e8:	2000036c 	.word	0x2000036c
 80048ec:	2000033c 	.word	0x2000033c
 80048f0:	20000338 	.word	0x20000338
 80048f4:	200003a0 	.word	0x200003a0

080048f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b04      	subs	r3, #4
 8004908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b04      	subs	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3b04      	subs	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004928:	4a0c      	ldr	r2, [pc, #48]	; (800495c <pxPortInitialiseStack+0x64>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b14      	subs	r3, #20
 8004932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b04      	subs	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f06f 0202 	mvn.w	r2, #2
 8004946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b20      	subs	r3, #32
 800494c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	08004961 	.word	0x08004961

08004960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <prvTaskExitError+0x54>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d00a      	beq.n	800498a <prvTaskExitError+0x2a>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <prvTaskExitError+0x28>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800499e:	bf00      	nop
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0fc      	beq.n	80049a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	2000000c 	.word	0x2000000c
	...

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a0a:	bf00      	nop
 8004a0c:	e000ed08 	.word	0xe000ed08

08004a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a16:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <xPortStartScheduler+0x120>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a46      	ldr	r2, [pc, #280]	; (8004b34 <xPortStartScheduler+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10a      	bne.n	8004a36 <xPortStartScheduler+0x26>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <xPortStartScheduler+0x120>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <xPortStartScheduler+0x128>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10a      	bne.n	8004a56 <xPortStartScheduler+0x46>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	22ff      	movs	r2, #255	; 0xff
 8004a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <xPortStartScheduler+0x130>)
 8004a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a84:	e009      	b.n	8004a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a86:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d0ef      	beq.n	8004a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <xPortStartScheduler+0x134>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d00a      	beq.n	8004ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60bb      	str	r3, [r7, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <xPortStartScheduler+0x134>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <xPortStartScheduler+0x134>)
 8004ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <xPortStartScheduler+0x134>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <xPortStartScheduler+0x134>)
 8004adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <xPortStartScheduler+0x138>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <xPortStartScheduler+0x138>)
 8004aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <xPortStartScheduler+0x138>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <xPortStartScheduler+0x138>)
 8004af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004afe:	f000 f8dd 	bl	8004cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <xPortStartScheduler+0x13c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b08:	f000 f8fc 	bl	8004d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <xPortStartScheduler+0x140>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <xPortStartScheduler+0x140>)
 8004b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b18:	f7ff ff66 	bl	80049e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b1c:	f7ff fa8e 	bl	800403c <vTaskSwitchContext>
	prvTaskExitError();
 8004b20:	f7ff ff1e 	bl	8004960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	e000ed00 	.word	0xe000ed00
 8004b34:	410fc271 	.word	0x410fc271
 8004b38:	410fc270 	.word	0x410fc270
 8004b3c:	e000e400 	.word	0xe000e400
 8004b40:	200003ac 	.word	0x200003ac
 8004b44:	200003b0 	.word	0x200003b0
 8004b48:	e000ed20 	.word	0xe000ed20
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	e000ef34 	.word	0xe000ef34

08004b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
}
 8004b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <vPortEnterCritical+0x58>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <vPortEnterCritical+0x58>)
 8004b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <vPortEnterCritical+0x58>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10f      	bne.n	8004ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortEnterCritical+0x5c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vPortEnterCritical+0x4a>
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <vPortExitCritical+0x50>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vPortExitCritical+0x24>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <vPortExitCritical+0x50>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <vPortExitCritical+0x50>)
 8004be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <vPortExitCritical+0x50>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <vPortExitCritical+0x42>
 8004bea:	2300      	movs	r3, #0
 8004bec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c
	...

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	f380 8811 	msr	BASEPRI, r0
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f7ff f9fc 	bl	800403c <vTaskSwitchContext>
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f380 8811 	msr	BASEPRI, r0
 8004c4c:	bc09      	pop	{r0, r3}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c56:	f01e 0f10 	tst.w	lr, #16
 8004c5a:	bf08      	it	eq
 8004c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c60:	f380 8809 	msr	PSP, r0
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst>:
 8004c70:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c92:	f7ff f91b 	bl	8003ecc <xTaskIncrementTick>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <SysTick_Handler+0x40>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f383 8811 	msr	BASEPRI, r3
}
 8004cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortSetupTimerInterrupt+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortSetupTimerInterrupt+0x3c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x40>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <vPortSetupTimerInterrupt+0x44>)
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010
 8004cf4:	e000e018 	.word	0xe000e018
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	e000e014 	.word	0xe000e014

08004d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d14 <vPortEnableVFP+0x10>
 8004d08:	6801      	ldr	r1, [r0, #0]
 8004d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d0e:	6001      	str	r1, [r0, #0]
 8004d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d12:	bf00      	nop
 8004d14:	e000ed88 	.word	0xe000ed88

08004d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d24:	f7ff f828 	bl	8003d78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d28:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <pvPortMalloc+0x180>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d30:	f000 f920 	bl	8004f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <pvPortMalloc+0x184>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 8093 	bne.w	8004e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01d      	beq.n	8004d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	3308      	adds	r3, #8
 8004d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <pvPortMalloc+0x6c>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	617b      	str	r3, [r7, #20]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d06e      	beq.n	8004e68 <pvPortMalloc+0x150>
 8004d8a:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <pvPortMalloc+0x188>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d869      	bhi.n	8004e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <pvPortMalloc+0x18c>)
 8004d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d98:	4b42      	ldr	r3, [pc, #264]	; (8004ea4 <pvPortMalloc+0x18c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d9e:	e004      	b.n	8004daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d903      	bls.n	8004dbc <pvPortMalloc+0xa4>
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f1      	bne.n	8004da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dbc:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <pvPortMalloc+0x180>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d050      	beq.n	8004e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	4413      	add	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	2308      	movs	r3, #8
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d91f      	bls.n	8004e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <pvPortMalloc+0xf8>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	613b      	str	r3, [r7, #16]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e22:	69b8      	ldr	r0, [r7, #24]
 8004e24:	f000 f908 	bl	8005038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <pvPortMalloc+0x190>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d203      	bcs.n	8004e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <pvPortMalloc+0x188>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <pvPortMalloc+0x190>)
 8004e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <pvPortMalloc+0x184>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <pvPortMalloc+0x194>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <pvPortMalloc+0x194>)
 8004e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e68:	f7fe ff94 	bl	8003d94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <pvPortMalloc+0x174>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <pvPortMalloc+0x172>
	return pvReturn;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20003fbc 	.word	0x20003fbc
 8004e9c:	20003fd0 	.word	0x20003fd0
 8004ea0:	20003fc0 	.word	0x20003fc0
 8004ea4:	20003fb4 	.word	0x20003fb4
 8004ea8:	20003fc4 	.word	0x20003fc4
 8004eac:	20003fc8 	.word	0x20003fc8

08004eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04d      	beq.n	8004f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <vPortFree+0xb8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <vPortFree+0x44>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60fb      	str	r3, [r7, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <vPortFree+0x62>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60bb      	str	r3, [r7, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <vPortFree+0xb8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01e      	beq.n	8004f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11a      	bne.n	8004f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <vPortFree+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	401a      	ands	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f38:	f7fe ff1e 	bl	8003d78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <vPortFree+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <vPortFree+0xbc>)
 8004f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f000 f874 	bl	8005038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <vPortFree+0xc0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <vPortFree+0xc0>)
 8004f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f5a:	f7fe ff1b 	bl	8003d94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f5e:	bf00      	nop
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20003fd0 	.word	0x20003fd0
 8004f6c:	20003fc0 	.word	0x20003fc0
 8004f70:	20003fcc 	.word	0x20003fcc

08004f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <prvHeapInit+0xac>)
 8004f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3307      	adds	r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <prvHeapInit+0xac>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <prvHeapInit+0xb0>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <prvHeapInit+0xb0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <prvHeapInit+0xb4>)
 8004fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <prvHeapInit+0xb4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <prvHeapInit+0xb4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <prvHeapInit+0xb4>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <prvHeapInit+0xb8>)
 8005002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a09      	ldr	r2, [pc, #36]	; (8005030 <prvHeapInit+0xbc>)
 800500a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <prvHeapInit+0xc0>)
 800500e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	200003b4 	.word	0x200003b4
 8005024:	20003fb4 	.word	0x20003fb4
 8005028:	20003fbc 	.word	0x20003fbc
 800502c:	20003fc4 	.word	0x20003fc4
 8005030:	20003fc0 	.word	0x20003fc0
 8005034:	20003fd0 	.word	0x20003fd0

08005038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005040:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <prvInsertBlockIntoFreeList+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e002      	b.n	800504c <prvInsertBlockIntoFreeList+0x14>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d8f7      	bhi.n	8005046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d108      	bne.n	800507a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d118      	bne.n	80050c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d00d      	beq.n	80050b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e008      	b.n	80050c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvInsertBlockIntoFreeList+0xb0>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e003      	b.n	80050c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d002      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20003fb4 	.word	0x20003fb4
 80050e8:	20003fbc 	.word	0x20003fbc

080050ec <__libc_init_array>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4d0d      	ldr	r5, [pc, #52]	; (8005124 <__libc_init_array+0x38>)
 80050f0:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <__libc_init_array+0x3c>)
 80050f2:	1b64      	subs	r4, r4, r5
 80050f4:	10a4      	asrs	r4, r4, #2
 80050f6:	2600      	movs	r6, #0
 80050f8:	42a6      	cmp	r6, r4
 80050fa:	d109      	bne.n	8005110 <__libc_init_array+0x24>
 80050fc:	4d0b      	ldr	r5, [pc, #44]	; (800512c <__libc_init_array+0x40>)
 80050fe:	4c0c      	ldr	r4, [pc, #48]	; (8005130 <__libc_init_array+0x44>)
 8005100:	f000 f82e 	bl	8005160 <_init>
 8005104:	1b64      	subs	r4, r4, r5
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	2600      	movs	r6, #0
 800510a:	42a6      	cmp	r6, r4
 800510c:	d105      	bne.n	800511a <__libc_init_array+0x2e>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f855 3b04 	ldr.w	r3, [r5], #4
 8005114:	4798      	blx	r3
 8005116:	3601      	adds	r6, #1
 8005118:	e7ee      	b.n	80050f8 <__libc_init_array+0xc>
 800511a:	f855 3b04 	ldr.w	r3, [r5], #4
 800511e:	4798      	blx	r3
 8005120:	3601      	adds	r6, #1
 8005122:	e7f2      	b.n	800510a <__libc_init_array+0x1e>
 8005124:	080052a8 	.word	0x080052a8
 8005128:	080052a8 	.word	0x080052a8
 800512c:	080052a8 	.word	0x080052a8
 8005130:	080052ac 	.word	0x080052ac

08005134 <memcpy>:
 8005134:	440a      	add	r2, r1
 8005136:	4291      	cmp	r1, r2
 8005138:	f100 33ff 	add.w	r3, r0, #4294967295
 800513c:	d100      	bne.n	8005140 <memcpy+0xc>
 800513e:	4770      	bx	lr
 8005140:	b510      	push	{r4, lr}
 8005142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514a:	4291      	cmp	r1, r2
 800514c:	d1f9      	bne.n	8005142 <memcpy+0xe>
 800514e:	bd10      	pop	{r4, pc}

08005150 <memset>:
 8005150:	4402      	add	r2, r0
 8005152:	4603      	mov	r3, r0
 8005154:	4293      	cmp	r3, r2
 8005156:	d100      	bne.n	800515a <memset+0xa>
 8005158:	4770      	bx	lr
 800515a:	f803 1b01 	strb.w	r1, [r3], #1
 800515e:	e7f9      	b.n	8005154 <memset+0x4>

08005160 <_init>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr

0800516c <_fini>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr
