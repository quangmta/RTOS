
timer_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000045f4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004604  20004604  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001628d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7f  00000000  00000000  000362cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  0003a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021edd  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139a6  00000000  00000000  0005d105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d266e  00000000  00000000  00070aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143119  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004694  00000000  00000000  0014316c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005920 	.word	0x08005920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005920 	.word	0x08005920

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <vApplicationGetTimerTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <vApplicationGetTimerTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	20000280 	.word	0x20000280
 800052c:	200002d4 	.word	0x200002d4

08000530 <uartTask>:
xTaskHandle uartHandle;
xTaskHandle ledHandle;

//Task functions
void uartTask(void *argument)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af02      	add	r7, sp, #8
 8000536:	6078      	str	r0, [r7, #4]
	xTimerStart(PTHandle,0);
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <uartTask+0x38>)
 800053a:	681c      	ldr	r4, [r3, #0]
 800053c:	f003 fdb8 	bl	80040b0 <xTaskGetTickCount>
 8000540:	4602      	mov	r2, r0
 8000542:	2300      	movs	r3, #0
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2101      	movs	r1, #1
 800054a:	4620      	mov	r0, r4
 800054c:	f004 fa8e 	bl	8004a6c <xTimerGenericCommand>
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Sending from UART TASK\n",23, 100);
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	2217      	movs	r2, #23
 8000554:	4905      	ldr	r1, [pc, #20]	; (800056c <uartTask+0x3c>)
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <uartTask+0x40>)
 8000558:	f001 fe1b 	bl	8002192 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(2000));
 800055c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000560:	f003 fc62 	bl	8003e28 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Sending from UART TASK\n",23, 100);
 8000564:	e7f4      	b.n	8000550 <uartTask+0x20>
 8000566:	bf00      	nop
 8000568:	2000452c 	.word	0x2000452c
 800056c:	08005938 	.word	0x08005938
 8000570:	20004530 	.word	0x20004530

08000574 <ledTask>:
	}
}

void ledTask(void *argument)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800057c:	2101      	movs	r1, #1
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <ledTask+0x44>)
 8000580:	f000 fe34 	bl	80011ec <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d011      	beq.n	80005ae <ledTask+0x3a>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <ledTask+0x48>)
 8000592:	f000 fe43 	bl	800121c <HAL_GPIO_WritePin>
			xTimerStart(OTHandle,0);
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <ledTask+0x4c>)
 8000598:	681c      	ldr	r4, [r3, #0]
 800059a:	f003 fd89 	bl	80040b0 <xTaskGetTickCount>
 800059e:	4602      	mov	r2, r0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4620      	mov	r0, r4
 80005aa:	f004 fa5f 	bl	8004a6c <xTimerGenericCommand>
		}
		vTaskDelay(pdMS_TO_TICKS(20));
 80005ae:	2014      	movs	r0, #20
 80005b0:	f003 fc3a 	bl	8003e28 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80005b4:	e7e2      	b.n	800057c <ledTask+0x8>
 80005b6:	bf00      	nop
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	20004574 	.word	0x20004574

080005c4 <TimerCallback>:
	}
}

void TimerCallback(xTimerHandle xTimer)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if(xTimer == PTHandle)
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <TimerCallback+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d106      	bne.n	80005e4 <TimerCallback+0x20>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)"Sending from Timer Callback\n",28, 100);
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	221c      	movs	r2, #28
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <TimerCallback+0x44>)
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <TimerCallback+0x48>)
 80005de:	f001 fdd8 	bl	8002192 <HAL_UART_Transmit>
	}
	else if(xTimer == OTHandle)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
	}
}
 80005e2:	e00a      	b.n	80005fa <TimerCallback+0x36>
	else if(xTimer == OTHandle)
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <TimerCallback+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d105      	bne.n	80005fa <TimerCallback+0x36>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <TimerCallback+0x50>)
 80005f6:	f000 fe11 	bl	800121c <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000452c 	.word	0x2000452c
 8000608:	08005950 	.word	0x08005950
 800060c:	20004530 	.word	0x20004530
 8000610:	20004574 	.word	0x20004574
 8000614:	40020c00 	.word	0x40020c00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fa93 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f849 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8db 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f8af 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //create timer
  PTHandle = xTimerCreate("timer1", pdMS_TO_TICKS(1000), pdTRUE, (void *)1, TimerCallback);
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <main+0x74>)
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <main+0x78>)
 800063c:	f004 f9ba 	bl	80049b4 <xTimerCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <main+0x7c>)
 8000644:	6013      	str	r3, [r2, #0]
  OTHandle = xTimerCreate("timer2", pdMS_TO_TICKS(4000), pdFALSE, (void *)2, TimerCallback);
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0x74>)
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000652:	4811      	ldr	r0, [pc, #68]	; (8000698 <main+0x80>)
 8000654:	f004 f9ae 	bl	80049b4 <xTimerCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <main+0x84>)
 800065c:	6013      	str	r3, [r2, #0]

  //create tasks
  xTaskCreate(uartTask, "uart", 128, NULL, 1, &uartHandle);
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <main+0x88>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	490e      	ldr	r1, [pc, #56]	; (80006a4 <main+0x8c>)
 800066c:	480e      	ldr	r0, [pc, #56]	; (80006a8 <main+0x90>)
 800066e:	f003 faa4 	bl	8003bba <xTaskCreate>
  xTaskCreate(ledTask, "led", 128, NULL, 1, &ledHandle);
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x94>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	490c      	ldr	r1, [pc, #48]	; (80006b0 <main+0x98>)
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x9c>)
 8000682:	f003 fa9a 	bl	8003bba <xTaskCreate>

  //start
  vTaskStartScheduler();
 8000686:	f003 fc03 	bl	8003e90 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x72>
 800068c:	080005c5 	.word	0x080005c5
 8000690:	08005970 	.word	0x08005970
 8000694:	2000452c 	.word	0x2000452c
 8000698:	08005978 	.word	0x08005978
 800069c:	20004574 	.word	0x20004574
 80006a0:	20004528 	.word	0x20004528
 80006a4:	08005980 	.word	0x08005980
 80006a8:	08000531 	.word	0x08000531
 80006ac:	20004524 	.word	0x20004524
 80006b0:	08005988 	.word	0x08005988
 80006b4:	08000575 	.word	0x08000575

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f922 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	; 0xa8
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd87 	bl	8001250 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f8bc 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2105      	movs	r1, #5
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ffe8 	bl	8001740 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f8a5 	bl	80008c4 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f001 fc98 	bl	80020f8 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f879 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20004530 	.word	0x20004530
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0xb4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a25      	ldr	r2, [pc, #148]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <MX_GPIO_Init+0xb4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000852:	f000 fce3 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_GPIO_Init+0xbc>)
 800086a:	f000 fb23 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800086e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xb8>)
 8000888:	f000 fb14 	bl	8000eb4 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020000 	.word	0x40020000

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f96b 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40001000 	.word	0x40001000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa11 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_UART_MspInit+0x94>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d133      	bne.n	80009b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_UART_MspInit+0x98>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0x98>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x98>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x98>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <HAL_UART_MspInit+0x98>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_UART_MspInit+0x98>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_UART_MspInit+0x9c>)
 800099e:	f000 fa89 	bl	8000eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2105      	movs	r1, #5
 80009a6:	2026      	movs	r0, #38	; 0x26
 80009a8:	f000 f9c8 	bl	8000d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ac:	2026      	movs	r0, #38	; 0x26
 80009ae:	f000 f9e1 	bl	8000d74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2036      	movs	r0, #54	; 0x36
 80009de:	f000 f9ad 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e2:	2036      	movs	r0, #54	; 0x36
 80009e4:	f000 f9c6 	bl	8000d74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <HAL_InitTick+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_InitTick+0xa4>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0xa4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a04:	f107 0210 	add.w	r2, r7, #16
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 f892 	bl	8001b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a14:	f001 f868 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_InitTick+0xa8>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	0c9b      	lsrs	r3, r3, #18
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_InitTick+0xac>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_InitTick+0xac>)
 8000a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_InitTick+0xac>)
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_InitTick+0xac>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_InitTick+0xac>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_InitTick+0xac>)
 8000a4e:	f001 f8a5 	bl	8001b9c <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <HAL_InitTick+0xac>)
 8000a5a:	f001 f8f9 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20004578 	.word	0x20004578
 8000a78:	40001000 	.word	0x40001000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART2_IRQHandler+0x10>)
 8000aae:	f001 fc03 	bl	80022b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20004530 	.word	0x20004530

08000abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM6_DAC_IRQHandler+0x10>)
 8000ac2:	f001 f935 	bl	8001d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20004578 	.word	0x20004578

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd7 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 fec3 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd77 	bl	8000618 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b38:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 8000b3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b40:	20004604 	.word	0x20004604

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f7ff ff26 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fea8 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200045c0 	.word	0x200045c0

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200045c0 	.word	0x200045c0

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d9e:	f7ff ff09 	bl	8000bb4 <HAL_GetTick>
 8000da2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d008      	beq.n	8000dc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e052      	b.n	8000e68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0216 	bic.w	r2, r2, #22
 8000dd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <HAL_DMA_Abort+0x62>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0208 	bic.w	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e12:	e013      	b.n	8000e3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e14:	f7ff fece 	bl	8000bb4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d90c      	bls.n	8000e3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2220      	movs	r2, #32
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e015      	b.n	8000e68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1e4      	bne.n	8000e14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4e:	223f      	movs	r2, #63	; 0x3f
 8000e50:	409a      	lsls	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d004      	beq.n	8000e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00c      	b.n	8000ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2205      	movs	r2, #5
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e16b      	b.n	80011a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 815a 	bne.w	80011a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80b4 	beq.w	80011a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a5b      	ldr	r2, [pc, #364]	; (80011c4 <HAL_GPIO_Init+0x310>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x314>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02b      	beq.n	80010da <HAL_GPIO_Init+0x226>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x318>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x222>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x31c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x21e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x21a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x324>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x216>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x328>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x212>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x32c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x20e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x330>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x20a>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e00e      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010be:	2308      	movs	r3, #8
 80010c0:	e00c      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e00a      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x228>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	; (80011c4 <HAL_GPIO_Init+0x310>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_GPIO_Init+0x334>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_GPIO_Init+0x334>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f ae90 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40021c00 	.word	0x40021c00
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e264      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4ba3      	ldr	r3, [pc, #652]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b99      	ldr	r3, [pc, #612]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e23f      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a87      	ldr	r2, [pc, #540]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b84      	ldr	r3, [pc, #528]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a83      	ldr	r2, [pc, #524]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b81      	ldr	r3, [pc, #516]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a80      	ldr	r2, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc54 	bl	8000bb4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc50 	bl	8000bb4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e204      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fc40 	bl	8000bb4 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fc3c 	bl	8000bb4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f0      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b6c      	ldr	r3, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c4      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4952      	ldr	r1, [pc, #328]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fbf5 	bl	8000bb4 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbf1 	bl	8000bb4 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a5      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4940      	ldr	r1, [pc, #256]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fbd4 	bl	8000bb4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fbd0 	bl	8000bb4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e184      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d030      	beq.n	800149c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fbb4 	bl	8000bb4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fbb0 	bl	8000bb4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e164      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fb9d 	bl	8000bb4 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fb99 	bl	8000bb4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e14d      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a0 	beq.w	80015ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fb5f 	bl	8000bb4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e011      	b.n	800151e <HAL_RCC_OscConfig+0x2ce>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
 8001508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff fb52 	bl	8000bb4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e106      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <HAL_RCC_OscConfig+0x4e4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x2f0>
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a80      	ldr	r2, [pc, #512]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a7a      	ldr	r2, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b78      	ldr	r3, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a77      	ldr	r2, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a74      	ldr	r2, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a71      	ldr	r2, [pc, #452]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fb17 	bl	8000bb4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb13 	bl	8000bb4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0c5      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x33a>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb01 	bl	8000bb4 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fafd 	bl	8000bb4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0af      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a55      	ldr	r2, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 809b 	beq.w	800172a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f4:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d05c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d141      	bne.n	800168c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fad1 	bl	8000bb4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff facd 	bl	8000bb4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e081      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001628:	4b43      	ldr	r3, [pc, #268]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3b01      	subs	r3, #1
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff faa6 	bl	8000bb4 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff faa2 	bl	8000bb4 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e056      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x41c>
 800168a:	e04e      	b.n	800172a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fa8f 	bl	8000bb4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fa8b 	bl	8000bb4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e03f      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x44a>
 80016b8:	e037      	b.n	800172a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e032      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d028      	beq.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d121      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d11a      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	4293      	cmp	r3, r2
 8001700:	d111      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40007000 	.word	0x40007000
 8001738:	40023800 	.word	0x40023800
 800173c:	42470060 	.word	0x42470060

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff f9c0 	bl	8000bb4 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff f9bc 	bl	8000bb4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f86e 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	080059a4 	.word	0x080059a4
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80bd 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0b7      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b61      	ldr	r3, [pc, #388]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001942:	60bb      	str	r3, [r7, #8]
       break;
 8001944:	e0b7      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001948:	60bb      	str	r3, [r7, #8]
      break;
 800194a:	e0b4      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d04d      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	461a      	mov	r2, r3
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	ea02 0800 	and.w	r8, r2, r0
 800197a:	ea03 0901 	and.w	r9, r3, r1
 800197e:	4640      	mov	r0, r8
 8001980:	4649      	mov	r1, r9
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	014b      	lsls	r3, r1, #5
 800198c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001990:	0142      	lsls	r2, r0, #5
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	ebb0 0008 	subs.w	r0, r0, r8
 800199a:	eb61 0109 	sbc.w	r1, r1, r9
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ac:	0182      	lsls	r2, r0, #6
 80019ae:	1a12      	subs	r2, r2, r0
 80019b0:	eb63 0301 	sbc.w	r3, r3, r1
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	00d9      	lsls	r1, r3, #3
 80019be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019c2:	00d0      	lsls	r0, r2, #3
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	eb12 0208 	adds.w	r2, r2, r8
 80019cc:	eb43 0309 	adc.w	r3, r3, r9
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	0259      	lsls	r1, r3, #9
 80019da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019de:	0250      	lsls	r0, r2, #9
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f7fe fbee 	bl	80001d0 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e04a      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	461a      	mov	r2, r3
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	ea02 0400 	and.w	r4, r2, r0
 8001a16:	ea03 0501 	and.w	r5, r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	014b      	lsls	r3, r1, #5
 8001a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a2c:	0142      	lsls	r2, r0, #5
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	1b00      	subs	r0, r0, r4
 8001a34:	eb61 0105 	sbc.w	r1, r1, r5
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	018b      	lsls	r3, r1, #6
 8001a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a46:	0182      	lsls	r2, r0, #6
 8001a48:	1a12      	subs	r2, r2, r0
 8001a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a5c:	00d0      	lsls	r0, r2, #3
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	1912      	adds	r2, r2, r4
 8001a64:	eb45 0303 	adc.w	r3, r5, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0299      	lsls	r1, r3, #10
 8001a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a76:	0290      	lsls	r0, r2, #10
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	f7fe fba2 	bl	80001d0 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ab2:	60bb      	str	r3, [r7, #8]
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aec:	f7ff fff0 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	080059b4 	.word	0x080059b4

08001b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b14:	f7ff ffdc 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0b5b      	lsrs	r3, r3, #13
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	080059b4 	.word	0x080059b4

08001b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	220f      	movs	r2, #15
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_GetClockConfig+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0207 	and.w	r2, r3, #7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f839 	bl	8001c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f9d8 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04e      	b.n	8001d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d01d      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d010      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	e007      	b.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40010400 	.word	0x40010400
 8001d28:	40014000 	.word	0x40014000
 8001d2c:	40001800 	.word	0x40001800

08001d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ee 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8f1 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0204 	mvn.w	r2, #4
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8c4 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8b6 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c7 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89a 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f88c 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f89d 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0210 	mvn.w	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f870 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f862 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f873 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fcf6 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f902 	bl	80020e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f838 	bl	8001f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8cc 	bl	80020d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d027      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d023      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d017      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <TIM_Base_SetConfig+0x128>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <TIM_Base_SetConfig+0x12c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <TIM_Base_SetConfig+0x130>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <TIM_Base_SetConfig+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <TIM_Base_SetConfig+0x138>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_Base_SetConfig+0x13c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0xf8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	40001800 	.word	0x40001800
 80020c8:	40001c00 	.word	0x40001c00
 80020cc:	40002000 	.word	0x40002000

080020d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e03f      	b.n	800218a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fc02 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800213a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fd7b 	bl	8002c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b08a      	sub	sp, #40	; 0x28
 8002196:	af02      	add	r7, sp, #8
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d17c      	bne.n	80022ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_UART_Transmit+0x2c>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e075      	b.n	80022ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_UART_Transmit+0x3e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e06e      	b.n	80022ae <HAL_UART_Transmit+0x11c>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2221      	movs	r2, #33	; 0x21
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fce5 	bl	8000bb4 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d108      	bne.n	8002214 <HAL_UART_Transmit+0x82>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	e003      	b.n	800221c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002224:	e02a      	b.n	800227c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 faf9 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e036      	b.n	80022ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3302      	adds	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	e007      	b.n	800226e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	3301      	adds	r3, #1
 800226c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1cf      	bne.n	8002226 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fac9 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e006      	b.n	80022ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0ba      	sub	sp, #232	; 0xe8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_UART_IRQHandler+0x66>
 800230a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fbd3 	bl	8002ac2 <UART_Receive_IT>
      return;
 800231c:	e256      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800231e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80de 	beq.w	80024e4 <HAL_UART_IRQHandler+0x22c>
 8002328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80d1 	beq.w	80024e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_UART_IRQHandler+0xae>
 800234e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_UART_IRQHandler+0xd2>
 8002372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0202 	orr.w	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800238a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_UART_IRQHandler+0xf6>
 8002396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0204 	orr.w	r2, r3, #4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_UART_IRQHandler+0x126>
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0208 	orr.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 81ed 	beq.w	80027c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_UART_IRQHandler+0x14e>
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fb5e 	bl	8002ac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_UART_IRQHandler+0x17a>
 800242a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04f      	beq.n	80024d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa66 	bl	8002904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d141      	bne.n	80024ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800245c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3314      	adds	r3, #20
 800246e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800247e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800248a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1d9      	bne.n	8002446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4a7d      	ldr	r2, [pc, #500]	; (8002694 <HAL_UART_IRQHandler+0x3dc>)
 80024a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fce2 	bl	8000e70 <HAL_DMA_Abort_IT>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024bc:	4610      	mov	r0, r2
 80024be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	e00e      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f99a 	bl	80027fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	e00a      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f996 	bl	80027fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	e006      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f992 	bl	80027fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024de:	e170      	b.n	80027c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	bf00      	nop
    return;
 80024e2:	e16e      	b.n	80027c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 814a 	bne.w	8002782 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8143 	beq.w	8002782 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 813c 	beq.w	8002782 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	f040 80b4 	bne.w	8002698 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800253c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8140 	beq.w	80027c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800254a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800254e:	429a      	cmp	r2, r3
 8002550:	f080 8139 	bcs.w	80027c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800255a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	f000 8088 	beq.w	800267a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a6:	e841 2300 	strex	r3, r2, [r1]
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1d9      	bne.n	800256a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3314      	adds	r3, #20
 80025bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e1      	bne.n	80025b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800261c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800265c:	65ba      	str	r2, [r7, #88]	; 0x58
 800265e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb8b 	bl	8000d90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002682:	b29b      	uxth	r3, r3
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	b29b      	uxth	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8c0 	bl	8002810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002690:	e099      	b.n	80027c6 <HAL_UART_IRQHandler+0x50e>
 8002692:	bf00      	nop
 8002694:	080029cb 	.word	0x080029cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 808b 	beq.w	80027ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8086 	beq.w	80027ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026e2:	647a      	str	r2, [r7, #68]	; 0x44
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e3      	bne.n	80026be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	623b      	str	r3, [r7, #32]
   return(result);
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800271a:	633a      	str	r2, [r7, #48]	; 0x30
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e3      	bne.n	80026f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	e853 3f00 	ldrex	r3, [r3]
 800274a:	60fb      	str	r3, [r7, #12]
   return(result);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0310 	bic.w	r3, r3, #16
 8002752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002760:	61fa      	str	r2, [r7, #28]
 8002762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	69b9      	ldr	r1, [r7, #24]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	617b      	str	r3, [r7, #20]
   return(result);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e3      	bne.n	800273c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f848 	bl	8002810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002780:	e023      	b.n	80027ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_UART_IRQHandler+0x4ea>
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f929 	bl	80029f2 <UART_Transmit_IT>
    return;
 80027a0:	e014      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <HAL_UART_IRQHandler+0x514>
 80027ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f969 	bl	8002a92 <UART_EndTransmit_IT>
    return;
 80027c0:	e004      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
    return;
 80027c2:	bf00      	nop
 80027c4:	e002      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
      return;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
      return;
 80027ca:	bf00      	nop
  }
}
 80027cc:	37e8      	adds	r7, #232	; 0xe8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop

080027d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b090      	sub	sp, #64	; 0x40
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002838:	e050      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d04c      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x30>
 8002848:	f7fe f9b4 	bl	8000bb4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002854:	429a      	cmp	r2, r3
 8002856:	d241      	bcs.n	80028dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002878:	637a      	str	r2, [r7, #52]	; 0x34
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800287e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	613b      	str	r3, [r7, #16]
   return(result);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ac:	623a      	str	r2, [r7, #32]
 80028ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	69f9      	ldr	r1, [r7, #28]
 80028b2:	6a3a      	ldr	r2, [r7, #32]
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e00f      	b.n	80028fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d09f      	beq.n	800283a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3740      	adds	r7, #64	; 0x40
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b095      	sub	sp, #84	; 0x54
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292c:	643a      	str	r2, [r7, #64]	; 0x40
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3314      	adds	r3, #20
 8002946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	e853 3f00 	ldrex	r3, [r3]
 800294e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3314      	adds	r3, #20
 800295e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e5      	bne.n	8002940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	2b01      	cmp	r3, #1
 800297a:	d119      	bne.n	80029b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	60bb      	str	r3, [r7, #8]
   return(result);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0310 	bic.w	r3, r3, #16
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800299c:	61ba      	str	r2, [r7, #24]
 800299e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6979      	ldr	r1, [r7, #20]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	613b      	str	r3, [r7, #16]
   return(result);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e5      	bne.n	800297c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029be:	bf00      	nop
 80029c0:	3754      	adds	r7, #84	; 0x54
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff ff09 	bl	80027fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b21      	cmp	r3, #33	; 0x21
 8002a04:	d13e      	bne.n	8002a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0e:	d114      	bne.n	8002a3a <UART_Transmit_IT+0x48>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d110      	bne.n	8002a3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	621a      	str	r2, [r3, #32]
 8002a38:	e008      	b.n	8002a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6211      	str	r1, [r2, #32]
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fe8e 	bl	80027d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b08c      	sub	sp, #48	; 0x30
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b22      	cmp	r3, #34	; 0x22
 8002ad4:	f040 80ab 	bne.w	8002c2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae0:	d117      	bne.n	8002b12 <UART_Receive_IT+0x50>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	1c9a      	adds	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e026      	b.n	8002b60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d007      	beq.n	8002b36 <UART_Receive_IT+0x74>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <UART_Receive_IT+0x82>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e008      	b.n	8002b56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d15a      	bne.n	8002c2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0220 	bic.w	r2, r2, #32
 8002b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d135      	bne.n	8002c20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 0310 	bic.w	r3, r3, #16
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	623a      	str	r2, [r7, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d10a      	bne.n	8002c12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fdf9 	bl	8002810 <HAL_UARTEx_RxEventCallback>
 8002c1e:	e002      	b.n	8002c26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fde1 	bl	80027e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e002      	b.n	8002c30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3730      	adds	r7, #48	; 0x30
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	b09f      	sub	sp, #124	; 0x7c
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	68d9      	ldr	r1, [r3, #12]
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	ea40 0301 	orr.w	r3, r0, r1
 8002c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c7c:	f021 010c 	bic.w	r1, r1, #12
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c86:	430b      	orrs	r3, r1
 8002c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c96:	6999      	ldr	r1, [r3, #24]
 8002c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ca0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4bc5      	ldr	r3, [pc, #788]	; (8002fbc <UART_SetConfig+0x384>)
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d004      	beq.n	8002cb6 <UART_SetConfig+0x7e>
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4bc3      	ldr	r3, [pc, #780]	; (8002fc0 <UART_SetConfig+0x388>)
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d103      	bne.n	8002cbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb6:	f7fe ff2b 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
 8002cba:	6778      	str	r0, [r7, #116]	; 0x74
 8002cbc:	e002      	b.n	8002cc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f7fe ff13 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ccc:	f040 80b6 	bne.w	8002e3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	f04f 0500 	mov.w	r5, #0
 8002cd8:	4622      	mov	r2, r4
 8002cda:	462b      	mov	r3, r5
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	6439      	str	r1, [r7, #64]	; 0x40
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce8:	1912      	adds	r2, r2, r4
 8002cea:	eb45 0303 	adc.w	r3, r5, r3
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	00d9      	lsls	r1, r3, #3
 8002cf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cfc:	00d0      	lsls	r0, r2, #3
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	1911      	adds	r1, r2, r4
 8002d04:	6639      	str	r1, [r7, #96]	; 0x60
 8002d06:	416b      	adcs	r3, r5
 8002d08:	667b      	str	r3, [r7, #100]	; 0x64
 8002d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d24:	f7fd fa54 	bl	80001d0 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4ba5      	ldr	r3, [pc, #660]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	011e      	lsls	r6, r3, #4
 8002d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d38:	461c      	mov	r4, r3
 8002d3a:	f04f 0500 	mov.w	r5, #0
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	6339      	str	r1, [r7, #48]	; 0x30
 8002d46:	415b      	adcs	r3, r3
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d4e:	1912      	adds	r2, r2, r4
 8002d50:	eb45 0303 	adc.w	r3, r5, r3
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	00d9      	lsls	r1, r3, #3
 8002d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d62:	00d0      	lsls	r0, r2, #3
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	1911      	adds	r1, r2, r4
 8002d6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d6c:	416b      	adcs	r3, r5
 8002d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	1891      	adds	r1, r2, r2
 8002d7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d7e:	415b      	adcs	r3, r3
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d8a:	f7fd fa21 	bl	80001d0 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a87      	ldr	r2, [pc, #540]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db4:	441e      	add	r6, r3
 8002db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db8:	4618      	mov	r0, r3
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	1894      	adds	r4, r2, r2
 8002dc4:	623c      	str	r4, [r7, #32]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dce:	1812      	adds	r2, r2, r0
 8002dd0:	eb41 0303 	adc.w	r3, r1, r3
 8002dd4:	f04f 0400 	mov.w	r4, #0
 8002dd8:	f04f 0500 	mov.w	r5, #0
 8002ddc:	00dd      	lsls	r5, r3, #3
 8002dde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002de2:	00d4      	lsls	r4, r2, #3
 8002de4:	4622      	mov	r2, r4
 8002de6:	462b      	mov	r3, r5
 8002de8:	1814      	adds	r4, r2, r0
 8002dea:	653c      	str	r4, [r7, #80]	; 0x50
 8002dec:	414b      	adcs	r3, r1
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	61b9      	str	r1, [r7, #24]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e0a:	f7fd f9e1 	bl	80001d0 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	f003 0207 	and.w	r2, r3, #7
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4432      	add	r2, r6
 8002e38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e3a:	e0b9      	b.n	8002fb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3e:	461c      	mov	r4, r3
 8002e40:	f04f 0500 	mov.w	r5, #0
 8002e44:	4622      	mov	r2, r4
 8002e46:	462b      	mov	r3, r5
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	6139      	str	r1, [r7, #16]
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e54:	1912      	adds	r2, r2, r4
 8002e56:	eb45 0303 	adc.w	r3, r5, r3
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	00d9      	lsls	r1, r3, #3
 8002e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e68:	00d0      	lsls	r0, r2, #3
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	eb12 0804 	adds.w	r8, r2, r4
 8002e72:	eb43 0905 	adc.w	r9, r3, r5
 8002e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	008b      	lsls	r3, r1, #2
 8002e8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e8e:	0082      	lsls	r2, r0, #2
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd f99c 	bl	80001d0 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	011e      	lsls	r6, r3, #4
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	1894      	adds	r4, r2, r2
 8002eb4:	60bc      	str	r4, [r7, #8]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebe:	1812      	adds	r2, r2, r0
 8002ec0:	eb41 0303 	adc.w	r3, r1, r3
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	f04f 0500 	mov.w	r5, #0
 8002ecc:	00dd      	lsls	r5, r3, #3
 8002ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ed2:	00d4      	lsls	r4, r2, #3
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	1814      	adds	r4, r2, r0
 8002eda:	64bc      	str	r4, [r7, #72]	; 0x48
 8002edc:	414b      	adcs	r3, r1
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	008b      	lsls	r3, r1, #2
 8002ef4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef8:	0082      	lsls	r2, r0, #2
 8002efa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002efe:	f7fd f967 	bl	80001d0 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002f08:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2164      	movs	r1, #100	; 0x64
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f26:	441e      	add	r6, r3
 8002f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	1894      	adds	r4, r2, r2
 8002f36:	603c      	str	r4, [r7, #0]
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f40:	1812      	adds	r2, r2, r0
 8002f42:	eb41 0303 	adc.w	r3, r1, r3
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	f04f 0500 	mov.w	r5, #0
 8002f4e:	00dd      	lsls	r5, r3, #3
 8002f50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f54:	00d4      	lsls	r4, r2, #3
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb12 0a00 	adds.w	sl, r2, r0
 8002f5e:	eb43 0b01 	adc.w	fp, r3, r1
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	008b      	lsls	r3, r1, #2
 8002f76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f7a:	0082      	lsls	r2, r0, #2
 8002f7c:	4650      	mov	r0, sl
 8002f7e:	4659      	mov	r1, fp
 8002f80:	f7fd f926 	bl	80001d0 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2164      	movs	r1, #100	; 0x64
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <UART_SetConfig+0x38c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4432      	add	r2, r6
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	377c      	adds	r7, #124	; 0x7c
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	51eb851f 	.word	0x51eb851f

08002fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f103 0208 	add.w	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f103 0208 	add.w	r2, r3, #8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0208 	add.w	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d103      	bne.n	800308a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e00c      	b.n	80030a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3308      	adds	r3, #8
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e002      	b.n	8003098 <vListInsert+0x2e>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d2f6      	bcs.n	8003092 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6852      	ldr	r2, [r2, #4]
 80030fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d103      	bne.n	8003110 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800315a:	f002 f89b 	bl	8005294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	441a      	add	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	3b01      	subs	r3, #1
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	441a      	add	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d114      	bne.n	80031da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01a      	beq.n	80031ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3310      	adds	r3, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f8eb 	bl	8004398 <xTaskRemoveFromEventList>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <xQueueGenericReset+0xcc>)
 80031ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	e009      	b.n	80031ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3310      	adds	r3, #16
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fef2 	bl	8002fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff feed 	bl	8002fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031ee:	f002 f881 	bl	80052f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <xQueueGenericCreateStatic+0x52>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <xQueueGenericCreateStatic+0x56>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <xQueueGenericCreateStatic+0x58>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	623b      	str	r3, [r7, #32]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xQueueGenericCreateStatic+0x7e>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueGenericCreateStatic+0x82>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueGenericCreateStatic+0x84>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61fb      	str	r3, [r7, #28]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800329e:	2348      	movs	r3, #72	; 0x48
 80032a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b48      	cmp	r3, #72	; 0x48
 80032a6:	d00a      	beq.n	80032be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	61bb      	str	r3, [r7, #24]
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f805 	bl	80032f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3730      	adds	r7, #48	; 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e002      	b.n	8003312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800331e:	2101      	movs	r1, #1
 8003320:	69b8      	ldr	r0, [r7, #24]
 8003322:	f7ff ff05 	bl	8003130 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	; 0x38
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800333e:	2300      	movs	r3, #0
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericSend+0x32>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <xQueueGenericSend+0x40>
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <xQueueGenericSend+0x44>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <xQueueGenericSend+0x46>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <xQueueGenericSend+0x60>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <xQueueGenericSend+0x6e>
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <xQueueGenericSend+0x72>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericSend+0x74>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xQueueGenericSend+0x8e>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033be:	f001 f9a7 	bl	8004710 <xTaskGetSchedulerState>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <xQueueGenericSend+0x9e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0xa2>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0xa4>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xQueueGenericSend+0xbe>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61fb      	str	r3, [r7, #28]
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ee:	f001 ff51 	bl	8005294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <xQueueGenericSend+0xd4>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d129      	bne.n	8003458 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340a:	f000 fa0b 	bl	8003824 <prvCopyDataToQueue>
 800340e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	4618      	mov	r0, r3
 800341e:	f000 ffbb 	bl	8004398 <xTaskRemoveFromEventList>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <xQueueGenericSend+0x1f8>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	e00a      	b.n	8003450 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003440:	4b39      	ldr	r3, [pc, #228]	; (8003528 <xQueueGenericSend+0x1f8>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003450:	f001 ff50 	bl	80052f4 <vPortExitCritical>
				return pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	e063      	b.n	8003520 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800345e:	f001 ff49 	bl	80052f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003462:	2300      	movs	r3, #0
 8003464:	e05c      	b.n	8003520 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fff3 	bl	800445c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003476:	2301      	movs	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800347a:	f001 ff3b 	bl	80052f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800347e:	f000 fd6d 	bl	8003f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003482:	f001 ff07 	bl	8005294 <vPortEnterCritical>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348c:	b25b      	sxtb	r3, r3
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d103      	bne.n	800349c <xQueueGenericSend+0x16c>
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSend+0x182>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b2:	f001 ff1f 	bl	80052f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b6:	1d3a      	adds	r2, r7, #4
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ffe2 	bl	8004488 <xTaskCheckForTimeOut>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d124      	bne.n	8003514 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034cc:	f000 faa2 	bl	8003a14 <prvIsQueueFull>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d018      	beq.n	8003508 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	3310      	adds	r3, #16
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 ff0a 	bl	80042f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e6:	f000 fa2d 	bl	8003944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ea:	f000 fd45 	bl	8003f78 <xTaskResumeAll>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f af7c 	bne.w	80033ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <xQueueGenericSend+0x1f8>)
 80034f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	e772      	b.n	80033ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fa1b 	bl	8003944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800350e:	f000 fd33 	bl	8003f78 <xTaskResumeAll>
 8003512:	e76c      	b.n	80033ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003516:	f000 fa15 	bl	8003944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800351a:	f000 fd2d 	bl	8003f78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800351e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003520:	4618      	mov	r0, r3
 8003522:	3738      	adds	r7, #56	; 0x38
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b090      	sub	sp, #64	; 0x40
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <xQueueGenericSendFromISR+0x3c>
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <xQueueGenericSendFromISR+0x40>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <xQueueGenericSendFromISR+0x42>
 800356c:	2300      	movs	r3, #0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d103      	bne.n	8003596 <xQueueGenericSendFromISR+0x6a>
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <xQueueGenericSendFromISR+0x6e>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericSendFromISR+0x70>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b6:	f001 ff4f 	bl	8005458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035ba:	f3ef 8211 	mrs	r2, BASEPRI
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fa      	str	r2, [r7, #28]
 80035d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <xQueueGenericSendFromISR+0xbc>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d12f      	bne.n	8003648 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035fe:	f000 f911 	bl	8003824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003602:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d112      	bne.n	8003632 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	4618      	mov	r0, r3
 800361a:	f000 febd 	bl	8004398 <xTaskRemoveFromEventList>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003636:	3301      	adds	r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	b25a      	sxtb	r2, r3
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003642:	2301      	movs	r3, #1
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003646:	e001      	b.n	800364c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003648:	2300      	movs	r3, #0
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003656:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800365a:	4618      	mov	r0, r3
 800365c:	3740      	adds	r7, #64	; 0x40
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	; 0x30
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <xQueueReceive+0x30>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	623b      	str	r3, [r7, #32]
}
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <xQueueReceive+0x3e>
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <xQueueReceive+0x42>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <xQueueReceive+0x44>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueReceive+0x5e>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	61fb      	str	r3, [r7, #28]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c2:	f001 f825 	bl	8004710 <xTaskGetSchedulerState>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <xQueueReceive+0x6e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <xQueueReceive+0x72>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <xQueueReceive+0x74>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xQueueReceive+0x8e>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61bb      	str	r3, [r7, #24]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f2:	f001 fdcf 	bl	8005294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01f      	beq.n	8003742 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003706:	f000 f8f7 	bl	80038f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00f      	beq.n	800373a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	3310      	adds	r3, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fe3a 	bl	8004398 <xTaskRemoveFromEventList>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <xQueueReceive+0x1bc>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800373a:	f001 fddb 	bl	80052f4 <vPortExitCritical>
				return pdPASS;
 800373e:	2301      	movs	r3, #1
 8003740:	e069      	b.n	8003816 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003748:	f001 fdd4 	bl	80052f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800374c:	2300      	movs	r3, #0
 800374e:	e062      	b.n	8003816 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003756:	f107 0310 	add.w	r3, r7, #16
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fe7e 	bl	800445c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003764:	f001 fdc6 	bl	80052f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003768:	f000 fbf8 	bl	8003f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376c:	f001 fd92 	bl	8005294 <vPortEnterCritical>
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d103      	bne.n	8003786 <xQueueReceive+0x122>
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378c:	b25b      	sxtb	r3, r3
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d103      	bne.n	800379c <xQueueReceive+0x138>
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379c:	f001 fdaa 	bl	80052f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a0:	1d3a      	adds	r2, r7, #4
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fe6d 	bl	8004488 <xTaskCheckForTimeOut>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d123      	bne.n	80037fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b6:	f000 f917 	bl	80039e8 <prvIsQueueEmpty>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fd95 	bl	80042f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d0:	f000 f8b8 	bl	8003944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d4:	f000 fbd0 	bl	8003f78 <xTaskResumeAll>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d189      	bne.n	80036f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <xQueueReceive+0x1bc>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	e780      	b.n	80036f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f2:	f000 f8a7 	bl	8003944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f6:	f000 fbbf 	bl	8003f78 <xTaskResumeAll>
 80037fa:	e77a      	b.n	80036f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fe:	f000 f8a1 	bl	8003944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003802:	f000 fbb9 	bl	8003f78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003808:	f000 f8ee 	bl	80039e8 <prvIsQueueEmpty>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f43f af6f 	beq.w	80036f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003816:	4618      	mov	r0, r3
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10d      	bne.n	800385e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d14d      	bne.n	80038e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 ff7c 	bl	800474c <xTaskPriorityDisinherit>
 8003854:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e043      	b.n	80038e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d119      	bne.n	8003898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6858      	ldr	r0, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	461a      	mov	r2, r3
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	f002 f840 	bl	80058f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	441a      	add	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d32b      	bcc.n	80038e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e026      	b.n	80038e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68d8      	ldr	r0, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	461a      	mov	r2, r3
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	f002 f826 	bl	80058f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	425b      	negs	r3, r3
 80038b2:	441a      	add	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d207      	bcs.n	80038d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	425b      	negs	r3, r3
 80038ce:	441a      	add	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d105      	bne.n	80038e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	d303      	bcc.n	800392c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68d9      	ldr	r1, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	461a      	mov	r2, r3
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f001 ffdc 	bl	80058f4 <memcpy>
	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800394c:	f001 fca2 	bl	8005294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003958:	e011      	b.n	800397e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3324      	adds	r3, #36	; 0x24
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fd16 	bl	8004398 <xTaskRemoveFromEventList>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003972:	f000 fdeb 	bl	800454c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	3b01      	subs	r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	dce9      	bgt.n	800395a <prvUnlockQueue+0x16>
 8003986:	e000      	b.n	800398a <prvUnlockQueue+0x46>
					break;
 8003988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003992:	f001 fcaf 	bl	80052f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003996:	f001 fc7d 	bl	8005294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a2:	e011      	b.n	80039c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d012      	beq.n	80039d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3310      	adds	r3, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fcf1 	bl	8004398 <xTaskRemoveFromEventList>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039bc:	f000 fdc6 	bl	800454c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dce9      	bgt.n	80039a4 <prvUnlockQueue+0x60>
 80039d0:	e000      	b.n	80039d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039dc:	f001 fc8a 	bl	80052f4 <vPortExitCritical>
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039f0:	f001 fc50 	bl	8005294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e001      	b.n	8003a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a06:	f001 fc75 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a1c:	f001 fc3a 	bl	8005294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d102      	bne.n	8003a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e001      	b.n	8003a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a36:	f001 fc5d 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e014      	b.n	8003a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <vQueueAddToRegistry+0x50>)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <vQueueAddToRegistry+0x50>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <vQueueAddToRegistry+0x50>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a76:	e006      	b.n	8003a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b07      	cmp	r3, #7
 8003a82:	d9e7      	bls.n	8003a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200045c4 	.word	0x200045c4

08003a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aa8:	f001 fbf4 	bl	8005294 <vPortEnterCritical>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <vQueueWaitForMessageRestricted+0x2a>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d103      	bne.n	8003ad8 <vQueueWaitForMessageRestricted+0x40>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad8:	f001 fc0c 	bl	80052f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fc27 	bl	8004340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff26 	bl	8003944 <prvUnlockQueue>
	}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b46:	2354      	movs	r3, #84	; 0x54
 8003b48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b54      	cmp	r3, #84	; 0x54
 8003b4e:	d00a      	beq.n	8003b66 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61bb      	str	r3, [r7, #24]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <xTaskCreateStatic+0xac>
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b86:	2300      	movs	r3, #0
 8003b88:	9303      	str	r3, [sp, #12]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f850 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba6:	f000 f8d5 	bl	8003d54 <prvAddNewTaskToReadyList>
 8003baa:	e001      	b.n	8003bb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bb0:	697b      	ldr	r3, [r7, #20]
	}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3728      	adds	r7, #40	; 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08c      	sub	sp, #48	; 0x30
 8003bbe:	af04      	add	r7, sp, #16
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fc82 	bl	80054d8 <pvPortMalloc>
 8003bd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bdc:	2054      	movs	r0, #84	; 0x54
 8003bde:	f001 fc7b 	bl	80054d8 <pvPortMalloc>
 8003be2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf0:	e005      	b.n	8003bfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f001 fd3c 	bl	8005670 <vPortFree>
 8003bf8:	e001      	b.n	8003bfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	9302      	str	r3, [sp, #8]
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f80e 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c28:	69f8      	ldr	r0, [r7, #28]
 8003c2a:	f000 f893 	bl	8003d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e002      	b.n	8003c3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	617b      	str	r3, [r7, #20]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01f      	beq.n	8003cd2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e012      	b.n	8003cbe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	7819      	ldrb	r1, [r3, #0]
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3334      	adds	r3, #52	; 0x34
 8003ca8:	460a      	mov	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d9e9      	bls.n	8003c98 <prvInitialiseNewTask+0x54>
 8003cc4:	e000      	b.n	8003cc8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	e003      	b.n	8003cda <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b06      	cmp	r3, #6
 8003cde:	d901      	bls.n	8003ce4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ce0:	2306      	movs	r3, #6
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f984 	bl	8003008 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	3318      	adds	r3, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f97f 	bl	8003008 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	f1c3 0207 	rsb	r2, r3, #7
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2200      	movs	r2, #0
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	69b8      	ldr	r0, [r7, #24]
 8003d34:	f001 f984 	bl	8005040 <pxPortInitialiseStack>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d5c:	f001 fa9a 	bl	8005294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <prvAddNewTaskToReadyList+0xb8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <prvAddNewTaskToReadyList+0xb8>)
 8003d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <prvAddNewTaskToReadyList+0xbc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d72:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <prvAddNewTaskToReadyList+0xbc>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d78:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <prvAddNewTaskToReadyList+0xb8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d110      	bne.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d80:	f000 fc08 	bl	8004594 <prvInitialiseTaskLists>
 8003d84:	e00d      	b.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d86:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <prvAddNewTaskToReadyList+0xc0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <prvAddNewTaskToReadyList+0xbc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d802      	bhi.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <prvAddNewTaskToReadyList+0xbc>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <prvAddNewTaskToReadyList+0xc4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <prvAddNewTaskToReadyList+0xc4>)
 8003daa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <prvAddNewTaskToReadyList+0xcc>)
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7ff f924 	bl	8003022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dda:	f001 fa8b 	bl	80052f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <prvAddNewTaskToReadyList+0xc0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <prvAddNewTaskToReadyList+0xbc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <prvAddNewTaskToReadyList+0xd0>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200007d4 	.word	0x200007d4
 8003e10:	200006d4 	.word	0x200006d4
 8003e14:	200007e0 	.word	0x200007e0
 8003e18:	200007f0 	.word	0x200007f0
 8003e1c:	200007dc 	.word	0x200007dc
 8003e20:	200006d8 	.word	0x200006d8
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d017      	beq.n	8003e6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <vTaskDelay+0x60>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <vTaskDelay+0x30>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	60bb      	str	r3, [r7, #8]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e58:	f000 f880 	bl	8003f5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fcfa 	bl	8004858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e64:	f000 f888 	bl	8003f78 <xTaskResumeAll>
 8003e68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <vTaskDelay+0x64>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200007fc 	.word	0x200007fc
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	1d39      	adds	r1, r7, #4
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb0e 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	9202      	str	r2, [sp, #8]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	460a      	mov	r2, r1
 8003ebe:	4921      	ldr	r1, [pc, #132]	; (8003f44 <vTaskStartScheduler+0xb4>)
 8003ec0:	4821      	ldr	r0, [pc, #132]	; (8003f48 <vTaskStartScheduler+0xb8>)
 8003ec2:	f7ff fe1d 	bl	8003b00 <xTaskCreateStatic>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <vTaskStartScheduler+0xbc>)
 8003eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <vTaskStartScheduler+0xbc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e001      	b.n	8003ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ee4:	f000 fd1e 	bl	8004924 <xTimerCreateTimerTask>
 8003ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d116      	bne.n	8003f1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	613b      	str	r3, [r7, #16]
}
 8003f02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <vTaskStartScheduler+0xc0>)
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <vTaskStartScheduler+0xc4>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <vTaskStartScheduler+0xc8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f18:	f001 f91a 	bl	8005150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f1c:	e00e      	b.n	8003f3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d10a      	bne.n	8003f3c <vTaskStartScheduler+0xac>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <vTaskStartScheduler+0xaa>
}
 8003f3c:	bf00      	nop
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	0800598c 	.word	0x0800598c
 8003f48:	08004565 	.word	0x08004565
 8003f4c:	200007f8 	.word	0x200007f8
 8003f50:	200007f4 	.word	0x200007f4
 8003f54:	200007e0 	.word	0x200007e0
 8003f58:	200007d8 	.word	0x200007d8

08003f5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <vTaskSuspendAll+0x18>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3301      	adds	r3, #1
 8003f66:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <vTaskSuspendAll+0x18>)
 8003f68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	200007fc 	.word	0x200007fc

08003f78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <xTaskResumeAll+0x114>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	603b      	str	r3, [r7, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fa4:	f001 f976 	bl	8005294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <xTaskResumeAll+0x114>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	4a37      	ldr	r2, [pc, #220]	; (800408c <xTaskResumeAll+0x114>)
 8003fb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <xTaskResumeAll+0x114>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d161      	bne.n	800407e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <xTaskResumeAll+0x118>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d05d      	beq.n	800407e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fc2:	e02e      	b.n	8004022 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <xTaskResumeAll+0x11c>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f883 	bl	80030dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f87e 	bl	80030dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <xTaskResumeAll+0x120>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <xTaskResumeAll+0x120>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a27      	ldr	r2, [pc, #156]	; (800409c <xTaskResumeAll+0x124>)
 8004000:	441a      	add	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7ff f80a 	bl	8003022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <xTaskResumeAll+0x128>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <xTaskResumeAll+0x12c>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <xTaskResumeAll+0x11c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1cc      	bne.n	8003fc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004030:	f000 fb4e 	bl	80046d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <xTaskResumeAll+0x130>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004040:	f000 f846 	bl	80040d0 <xTaskIncrementTick>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <xTaskResumeAll+0x12c>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f1      	bne.n	8004040 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <xTaskResumeAll+0x130>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <xTaskResumeAll+0x12c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <xTaskResumeAll+0x134>)
 8004070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800407e:	f001 f939 	bl	80052f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004082:	68bb      	ldr	r3, [r7, #8]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200007fc 	.word	0x200007fc
 8004090:	200007d4 	.word	0x200007d4
 8004094:	20000794 	.word	0x20000794
 8004098:	200007dc 	.word	0x200007dc
 800409c:	200006d8 	.word	0x200006d8
 80040a0:	200006d4 	.word	0x200006d4
 80040a4:	200007e8 	.word	0x200007e8
 80040a8:	200007e4 	.word	0x200007e4
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <xTaskGetTickCount+0x1c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200007d8 	.word	0x200007d8

080040d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040da:	4b4e      	ldr	r3, [pc, #312]	; (8004214 <xTaskIncrementTick+0x144>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 808e 	bne.w	8004200 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e4:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <xTaskIncrementTick+0x148>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040ec:	4a4a      	ldr	r2, [pc, #296]	; (8004218 <xTaskIncrementTick+0x148>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d120      	bne.n	800413a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f8:	4b48      	ldr	r3, [pc, #288]	; (800421c <xTaskIncrementTick+0x14c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <xTaskIncrementTick+0x48>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	603b      	str	r3, [r7, #0]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xTaskIncrementTick+0x46>
 8004118:	4b40      	ldr	r3, [pc, #256]	; (800421c <xTaskIncrementTick+0x14c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	4b40      	ldr	r3, [pc, #256]	; (8004220 <xTaskIncrementTick+0x150>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3e      	ldr	r2, [pc, #248]	; (800421c <xTaskIncrementTick+0x14c>)
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4a3e      	ldr	r2, [pc, #248]	; (8004220 <xTaskIncrementTick+0x150>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <xTaskIncrementTick+0x154>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <xTaskIncrementTick+0x154>)
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	f000 facb 	bl	80046d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <xTaskIncrementTick+0x158>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d348      	bcc.n	80041d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <xTaskIncrementTick+0x14c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <xTaskIncrementTick+0x158>)
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	601a      	str	r2, [r3, #0]
					break;
 8004156:	e03e      	b.n	80041d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004158:	4b30      	ldr	r3, [pc, #192]	; (800421c <xTaskIncrementTick+0x14c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d203      	bcs.n	8004178 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <xTaskIncrementTick+0x158>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004176:	e02e      	b.n	80041d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe ffad 	bl	80030dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3318      	adds	r3, #24
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe ffa4 	bl	80030dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <xTaskIncrementTick+0x15c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <xTaskIncrementTick+0x15c>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <xTaskIncrementTick+0x160>)
 80041b4:	441a      	add	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7fe ff30 	bl	8003022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c6:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <xTaskIncrementTick+0x164>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3b9      	bcc.n	8004144 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d4:	e7b6      	b.n	8004144 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <xTaskIncrementTick+0x164>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	4914      	ldr	r1, [pc, #80]	; (8004230 <xTaskIncrementTick+0x160>)
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d901      	bls.n	80041f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <xTaskIncrementTick+0x168>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e004      	b.n	800420a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <xTaskIncrementTick+0x16c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	4a0d      	ldr	r2, [pc, #52]	; (800423c <xTaskIncrementTick+0x16c>)
 8004208:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800420a:	697b      	ldr	r3, [r7, #20]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200007fc 	.word	0x200007fc
 8004218:	200007d8 	.word	0x200007d8
 800421c:	2000078c 	.word	0x2000078c
 8004220:	20000790 	.word	0x20000790
 8004224:	200007ec 	.word	0x200007ec
 8004228:	200007f4 	.word	0x200007f4
 800422c:	200007dc 	.word	0x200007dc
 8004230:	200006d8 	.word	0x200006d8
 8004234:	200006d4 	.word	0x200006d4
 8004238:	200007e8 	.word	0x200007e8
 800423c:	200007e4 	.word	0x200007e4

08004240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <vTaskSwitchContext+0xa4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800424e:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <vTaskSwitchContext+0xa8>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004254:	e03f      	b.n	80042d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <vTaskSwitchContext+0xa8>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <vTaskSwitchContext+0xac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	f1c3 031f 	rsb	r3, r3, #31
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	491f      	ldr	r1, [pc, #124]	; (80042f0 <vTaskSwitchContext+0xb0>)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	607b      	str	r3, [r7, #4]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <vTaskSwitchContext+0x5a>
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <vTaskSwitchContext+0xb0>)
 80042a8:	4413      	add	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	3308      	adds	r3, #8
 80042be:	429a      	cmp	r2, r3
 80042c0:	d104      	bne.n	80042cc <vTaskSwitchContext+0x8c>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <vTaskSwitchContext+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200007fc 	.word	0x200007fc
 80042e8:	200007e8 	.word	0x200007e8
 80042ec:	200007dc 	.word	0x200007dc
 80042f0:	200006d8 	.word	0x200006d8
 80042f4:	200006d4 	.word	0x200006d4

080042f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60fb      	str	r3, [r7, #12]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <vTaskPlaceOnEventList+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3318      	adds	r3, #24
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fe9f 	bl	800306a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800432c:	2101      	movs	r1, #1
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f000 fa92 	bl	8004858 <prvAddCurrentTaskToDelayedList>
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200006d4 	.word	0x200006d4

08004340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	617b      	str	r3, [r7, #20]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <vTaskPlaceOnEventListRestricted+0x54>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3318      	adds	r3, #24
 800436e:	4619      	mov	r1, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7fe fe56 	bl	8003022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	68b8      	ldr	r0, [r7, #8]
 8004386:	f000 fa67 	bl	8004858 <prvAddCurrentTaskToDelayedList>
	}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	200006d4 	.word	0x200006d4

08004398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3318      	adds	r3, #24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fe87 	bl	80030dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <xTaskRemoveFromEventList+0xac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11c      	bne.n	8004410 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fe7e 	bl	80030dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <xTaskRemoveFromEventList+0xb0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <xTaskRemoveFromEventList+0xb0>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <xTaskRemoveFromEventList+0xb4>)
 8004400:	441a      	add	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fe fe0a 	bl	8003022 <vListInsertEnd>
 800440e:	e005      	b.n	800441c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3318      	adds	r3, #24
 8004414:	4619      	mov	r1, r3
 8004416:	480e      	ldr	r0, [pc, #56]	; (8004450 <xTaskRemoveFromEventList+0xb8>)
 8004418:	f7fe fe03 	bl	8003022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xTaskRemoveFromEventList+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	429a      	cmp	r2, r3
 8004428:	d905      	bls.n	8004436 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <xTaskRemoveFromEventList+0xc0>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e001      	b.n	800443a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800443a:	697b      	ldr	r3, [r7, #20]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	200007fc 	.word	0x200007fc
 8004448:	200007dc 	.word	0x200007dc
 800444c:	200006d8 	.word	0x200006d8
 8004450:	20000794 	.word	0x20000794
 8004454:	200006d4 	.word	0x200006d4
 8004458:	200007e8 	.word	0x200007e8

0800445c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <vTaskInternalSetTimeOutState+0x24>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <vTaskInternalSetTimeOutState+0x28>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	200007ec 	.word	0x200007ec
 8004484:	200007d8 	.word	0x200007d8

08004488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044ca:	f000 fee3 	bl	8005294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <xTaskCheckForTimeOut+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d102      	bne.n	80044ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	e023      	b.n	8004536 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <xTaskCheckForTimeOut+0xc0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d007      	beq.n	800450a <xTaskCheckForTimeOut+0x82>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e015      	b.n	8004536 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	d20b      	bcs.n	800452c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad2      	subs	r2, r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff9b 	bl	800445c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e004      	b.n	8004536 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004536:	f000 fedd 	bl	80052f4 <vPortExitCritical>

	return xReturn;
 800453a:	69fb      	ldr	r3, [r7, #28]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200007d8 	.word	0x200007d8
 8004548:	200007ec 	.word	0x200007ec

0800454c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <vTaskMissedYield+0x14>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	200007e8 	.word	0x200007e8

08004564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800456c:	f000 f852 	bl	8004614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <prvIdleTask+0x28>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d9f9      	bls.n	800456c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <prvIdleTask+0x2c>)
 800457a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004588:	e7f0      	b.n	800456c <prvIdleTask+0x8>
 800458a:	bf00      	nop
 800458c:	200006d8 	.word	0x200006d8
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e00c      	b.n	80045ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <prvInitialiseTaskLists+0x60>)
 80045ac:	4413      	add	r3, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fd0a 	bl	8002fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3301      	adds	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d9ef      	bls.n	80045a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045c0:	480d      	ldr	r0, [pc, #52]	; (80045f8 <prvInitialiseTaskLists+0x64>)
 80045c2:	f7fe fd01 	bl	8002fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045c6:	480d      	ldr	r0, [pc, #52]	; (80045fc <prvInitialiseTaskLists+0x68>)
 80045c8:	f7fe fcfe 	bl	8002fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045cc:	480c      	ldr	r0, [pc, #48]	; (8004600 <prvInitialiseTaskLists+0x6c>)
 80045ce:	f7fe fcfb 	bl	8002fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045d2:	480c      	ldr	r0, [pc, #48]	; (8004604 <prvInitialiseTaskLists+0x70>)
 80045d4:	f7fe fcf8 	bl	8002fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045d8:	480b      	ldr	r0, [pc, #44]	; (8004608 <prvInitialiseTaskLists+0x74>)
 80045da:	f7fe fcf5 	bl	8002fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <prvInitialiseTaskLists+0x78>)
 80045e0:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <prvInitialiseTaskLists+0x64>)
 80045e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <prvInitialiseTaskLists+0x7c>)
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <prvInitialiseTaskLists+0x68>)
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200006d8 	.word	0x200006d8
 80045f8:	20000764 	.word	0x20000764
 80045fc:	20000778 	.word	0x20000778
 8004600:	20000794 	.word	0x20000794
 8004604:	200007a8 	.word	0x200007a8
 8004608:	200007c0 	.word	0x200007c0
 800460c:	2000078c 	.word	0x2000078c
 8004610:	20000790 	.word	0x20000790

08004614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800461a:	e019      	b.n	8004650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800461c:	f000 fe3a 	bl	8005294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <prvCheckTasksWaitingTermination+0x50>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fd55 	bl	80030dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <prvCheckTasksWaitingTermination+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3b01      	subs	r3, #1
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <prvCheckTasksWaitingTermination+0x54>)
 800463a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <prvCheckTasksWaitingTermination+0x58>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3b01      	subs	r3, #1
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <prvCheckTasksWaitingTermination+0x58>)
 8004644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004646:	f000 fe55 	bl	80052f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f810 	bl	8004670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <prvCheckTasksWaitingTermination+0x58>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e1      	bne.n	800461c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200007a8 	.word	0x200007a8
 8004668:	200007d4 	.word	0x200007d4
 800466c:	200007bc 	.word	0x200007bc

08004670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fff2 	bl	8005670 <vPortFree>
				vPortFree( pxTCB );
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 ffef 	bl	8005670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004692:	e018      	b.n	80046c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469a:	2b01      	cmp	r3, #1
 800469c:	d103      	bne.n	80046a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 ffe6 	bl	8005670 <vPortFree>
	}
 80046a4:	e00f      	b.n	80046c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d00a      	beq.n	80046c6 <prvDeleteTCB+0x56>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <prvDeleteTCB+0x54>
	}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <prvResetNextTaskUnblockTime+0x38>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <prvResetNextTaskUnblockTime+0x3c>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046e8:	e008      	b.n	80046fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <prvResetNextTaskUnblockTime+0x38>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <prvResetNextTaskUnblockTime+0x3c>)
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	2000078c 	.word	0x2000078c
 800470c:	200007f4 	.word	0x200007f4

08004710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <xTaskGetSchedulerState+0x34>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800471e:	2301      	movs	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e008      	b.n	8004736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <xTaskGetSchedulerState+0x38>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800472c:	2302      	movs	r3, #2
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	e001      	b.n	8004736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004736:	687b      	ldr	r3, [r7, #4]
	}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	200007e0 	.word	0x200007e0
 8004748:	200007fc 	.word	0x200007fc

0800474c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06e      	beq.n	8004840 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <xTaskPriorityDisinherit+0x100>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d00a      	beq.n	8004782 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d044      	beq.n	8004840 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d140      	bne.n	8004840 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fc8a 	bl	80030dc <uxListRemove>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	491f      	ldr	r1, [pc, #124]	; (8004850 <xTaskPriorityDisinherit+0x104>)
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xTaskPriorityDisinherit+0xae>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <xTaskPriorityDisinherit+0x108>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <xTaskPriorityDisinherit+0x108>)
 80047f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	f1c3 0207 	rsb	r2, r3, #7
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	2201      	movs	r2, #1
 8004814:	409a      	lsls	r2, r3
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <xTaskPriorityDisinherit+0x108>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <xTaskPriorityDisinherit+0x108>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <xTaskPriorityDisinherit+0x104>)
 800482e:	441a      	add	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fbf3 	bl	8003022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004840:	697b      	ldr	r3, [r7, #20]
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200006d4 	.word	0x200006d4
 8004850:	200006d8 	.word	0x200006d8
 8004854:	200007dc 	.word	0x200007dc

08004858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fc34 	bl	80030dc <uxListRemove>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43da      	mvns	r2, r3
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4013      	ands	r3, r2
 800488e:	4a20      	ldr	r2, [pc, #128]	; (8004910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d10a      	bne.n	80048b0 <prvAddCurrentTaskToDelayedList+0x58>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	481a      	ldr	r0, [pc, #104]	; (8004914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048aa:	f7fe fbba 	bl	8003022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ae:	e026      	b.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d209      	bcs.n	80048dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe fbc8 	bl	800306a <vListInsert>
}
 80048da:	e010      	b.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <prvAddCurrentTaskToDelayedList+0xc4>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe fbbe 	bl	800306a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d202      	bcs.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6013      	str	r3, [r2, #0]
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200007d8 	.word	0x200007d8
 800490c:	200006d4 	.word	0x200006d4
 8004910:	200007dc 	.word	0x200007dc
 8004914:	200007c0 	.word	0x200007c0
 8004918:	20000790 	.word	0x20000790
 800491c:	2000078c 	.word	0x2000078c
 8004920:	200007f4 	.word	0x200007f4

08004924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800492e:	f000 fb47 	bl	8004fc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xTimerCreateTimerTask+0x80>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d021      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	f107 0108 	add.w	r1, r7, #8
 8004948:	f107 030c 	add.w	r3, r7, #12
 800494c:	4618      	mov	r0, r3
 800494e:	f7fb fdd5 	bl	80004fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2306      	movs	r3, #6
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	460a      	mov	r2, r1
 8004964:	4910      	ldr	r1, [pc, #64]	; (80049a8 <xTimerCreateTimerTask+0x84>)
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <xTimerCreateTimerTask+0x88>)
 8004968:	f7ff f8ca 	bl	8003b00 <xTaskCreateStatic>
 800496c:	4603      	mov	r3, r0
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004970:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <xTimerCreateTimerTask+0x8c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000830 	.word	0x20000830
 80049a8:	08005994 	.word	0x08005994
 80049ac:	08004ba1 	.word	0x08004ba1
 80049b0:	20000834 	.word	0x20000834

080049b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80049c2:	2028      	movs	r0, #40	; 0x28
 80049c4:	f000 fd88 	bl	80054d8 <pvPortMalloc>
 80049c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f805 	bl	80049f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80049ec:	697b      	ldr	r3, [r7, #20]
	}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	617b      	str	r3, [r7, #20]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01e      	beq.n	8004a64 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004a26:	f000 facb 	bl	8004fc0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3304      	adds	r3, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fade 	bl	8003008 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004a64:	bf00      	nop
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	623b      	str	r3, [r7, #32]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <xTimerGenericCommand+0x98>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02a      	beq.n	8004af8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	dc18      	bgt.n	8004ae6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ab4:	f7ff fe2c 	bl	8004710 <xTaskGetSchedulerState>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d109      	bne.n	8004ad2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <xTimerGenericCommand+0x98>)
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f107 0114 	add.w	r1, r7, #20
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	f7fe fc31 	bl	8003330 <xQueueGenericSend>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24
 8004ad0:	e012      	b.n	8004af8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <xTimerGenericCommand+0x98>)
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	f107 0114 	add.w	r1, r7, #20
 8004ada:	2300      	movs	r3, #0
 8004adc:	2200      	movs	r2, #0
 8004ade:	f7fe fc27 	bl	8003330 <xQueueGenericSend>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae4:	e008      	b.n	8004af8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <xTimerGenericCommand+0x98>)
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f107 0114 	add.w	r1, r7, #20
 8004aee:	2300      	movs	r3, #0
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	f7fe fd1b 	bl	800352c <xQueueGenericSendFromISR>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000830 	.word	0x20000830

08004b08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <prvProcessExpiredTimer+0x94>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe fadb 	bl	80030dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d022      	beq.n	8004b7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	18d1      	adds	r1, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f000 f8d1 	bl	8004ce8 <prvInsertTimerInActiveList>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01f      	beq.n	8004b8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	2100      	movs	r1, #0
 8004b56:	6978      	ldr	r0, [r7, #20]
 8004b58:	f7ff ff88 	bl	8004a6c <xTimerGenericCommand>
 8004b5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d113      	bne.n	8004b8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	6978      	ldr	r0, [r7, #20]
 8004b92:	4798      	blx	r3
}
 8004b94:	bf00      	nop
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000828 	.word	0x20000828

08004ba0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f857 	bl	8004c60 <prvGetNextExpireTime>
 8004bb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f803 	bl	8004bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bbe:	f000 f8d5 	bl	8004d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bc2:	e7f1      	b.n	8004ba8 <prvTimerTask+0x8>

08004bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bce:	f7ff f9c5 	bl	8003f5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f866 	bl	8004ca8 <prvSampleTimeNow>
 8004bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d130      	bne.n	8004c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <prvProcessTimerOrBlockTask+0x3c>
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d806      	bhi.n	8004c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bf2:	f7ff f9c1 	bl	8003f78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff85 	bl	8004b08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bfe:	e024      	b.n	8004c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <prvProcessTimerOrBlockTask+0x90>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <prvProcessTimerOrBlockTask+0x50>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <prvProcessTimerOrBlockTask+0x52>
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <prvProcessTimerOrBlockTask+0x94>)
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fe ff37 	bl	8003a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c2a:	f7ff f9a5 	bl	8003f78 <xTaskResumeAll>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <prvProcessTimerOrBlockTask+0x98>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
}
 8004c44:	e001      	b.n	8004c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c46:	f7ff f997 	bl	8003f78 <xTaskResumeAll>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000082c 	.word	0x2000082c
 8004c58:	20000830 	.word	0x20000830
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <prvGetNextExpireTime+0x44>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <prvGetNextExpireTime+0x16>
 8004c72:	2201      	movs	r2, #1
 8004c74:	e000      	b.n	8004c78 <prvGetNextExpireTime+0x18>
 8004c76:	2200      	movs	r2, #0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <prvGetNextExpireTime+0x44>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e001      	b.n	8004c94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c94:	68fb      	ldr	r3, [r7, #12]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000828 	.word	0x20000828

08004ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cb0:	f7ff f9fe 	bl	80040b0 <xTaskGetTickCount>
 8004cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <prvSampleTimeNow+0x3c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d205      	bcs.n	8004ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cc0:	f000 f91a 	bl	8004ef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cd2:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <prvSampleTimeNow+0x3c>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000838 	.word	0x20000838

08004ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d812      	bhi.n	8004d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e01b      	b.n	8004d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <prvInsertTimerInActiveList+0x7c>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f7fe f99c 	bl	800306a <vListInsert>
 8004d32:	e012      	b.n	8004d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d206      	bcs.n	8004d4a <prvInsertTimerInActiveList+0x62>
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e007      	b.n	8004d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <prvInsertTimerInActiveList+0x80>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fe f988 	bl	800306a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d5a:	697b      	ldr	r3, [r7, #20]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2000082c 	.word	0x2000082c
 8004d68:	20000828 	.word	0x20000828

08004d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d72:	e0ae      	b.n	8004ed2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f2c0 80aa 	blt.w	8004ed0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe f9a5 	bl	80030dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff87 	bl	8004ca8 <prvSampleTimeNow>
 8004d9a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	f200 8097 	bhi.w	8004ed2 <prvProcessReceivedCommands+0x166>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <prvProcessReceivedCommands+0x40>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004dd5 	.word	0x08004dd5
 8004db8:	08004e49 	.word	0x08004e49
 8004dbc:	08004e5d 	.word	0x08004e5d
 8004dc0:	08004ea7 	.word	0x08004ea7
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004dd5 	.word	0x08004dd5
 8004dcc:	08004e49 	.word	0x08004e49
 8004dd0:	08004e5d 	.word	0x08004e5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	18d1      	adds	r1, r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df4:	f7ff ff78 	bl	8004ce8 <prvInsertTimerInActiveList>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d069      	beq.n	8004ed2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05e      	beq.n	8004ed2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	2100      	movs	r1, #0
 8004e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e26:	f7ff fe21 	bl	8004a6c <xTimerGenericCommand>
 8004e2a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d14f      	bne.n	8004ed2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	61bb      	str	r3, [r7, #24]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004e5a:	e03a      	b.n	8004ed2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	617b      	str	r3, [r7, #20]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	18d1      	adds	r1, r2, r3
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ea0:	f7ff ff22 	bl	8004ce8 <prvInsertTimerInActiveList>
					break;
 8004ea4:	e015      	b.n	8004ed2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d103      	bne.n	8004ebc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eb6:	f000 fbdb 	bl	8005670 <vPortFree>
 8004eba:	e00a      	b.n	8004ed2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ece:	e000      	b.n	8004ed2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ed0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <prvProcessReceivedCommands+0x188>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f107 0108 	add.w	r1, r7, #8
 8004eda:	2200      	movs	r2, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fbc1 	bl	8003664 <xQueueReceive>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af45 	bne.w	8004d74 <prvProcessReceivedCommands+0x8>
	}
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000830 	.word	0x20000830

08004ef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004efe:	e048      	b.n	8004f92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0a:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe f8df 	bl	80030dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02e      	beq.n	8004f92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90e      	bls.n	8004f64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f7fe f884 	bl	800306a <vListInsert>
 8004f62:	e016      	b.n	8004f92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f64:	2300      	movs	r3, #0
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fd7c 	bl	8004a6c <xTimerGenericCommand>
 8004f74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	603b      	str	r3, [r7, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1b1      	bne.n	8004f00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <prvSwitchTimerLists+0xc4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <prvSwitchTimerLists+0xc0>)
 8004fa8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004faa:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <prvSwitchTimerLists+0xc4>)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000828 	.word	0x20000828
 8004fbc:	2000082c 	.word	0x2000082c

08004fc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fc6:	f000 f965 	bl	8005294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <prvCheckForValidListAndQueue+0x60>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d120      	bne.n	8005014 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fd2:	4814      	ldr	r0, [pc, #80]	; (8005024 <prvCheckForValidListAndQueue+0x64>)
 8004fd4:	f7fd fff8 	bl	8002fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fd8:	4813      	ldr	r0, [pc, #76]	; (8005028 <prvCheckForValidListAndQueue+0x68>)
 8004fda:	f7fd fff5 	bl	8002fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <prvCheckForValidListAndQueue+0x6c>)
 8004fe0:	4a10      	ldr	r2, [pc, #64]	; (8005024 <prvCheckForValidListAndQueue+0x64>)
 8004fe2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <prvCheckForValidListAndQueue+0x70>)
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <prvCheckForValidListAndQueue+0x68>)
 8004fe8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fea:	2300      	movs	r3, #0
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <prvCheckForValidListAndQueue+0x74>)
 8004ff0:	4a11      	ldr	r2, [pc, #68]	; (8005038 <prvCheckForValidListAndQueue+0x78>)
 8004ff2:	210c      	movs	r1, #12
 8004ff4:	200a      	movs	r0, #10
 8004ff6:	f7fe f903 	bl	8003200 <xQueueGenericCreateStatic>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <prvCheckForValidListAndQueue+0x60>)
 8004ffe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <prvCheckForValidListAndQueue+0x60>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <prvCheckForValidListAndQueue+0x60>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	490b      	ldr	r1, [pc, #44]	; (800503c <prvCheckForValidListAndQueue+0x7c>)
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fd18 	bl	8003a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005014:	f000 f96e 	bl	80052f4 <vPortExitCritical>
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000830 	.word	0x20000830
 8005024:	20000800 	.word	0x20000800
 8005028:	20000814 	.word	0x20000814
 800502c:	20000828 	.word	0x20000828
 8005030:	2000082c 	.word	0x2000082c
 8005034:	200008b4 	.word	0x200008b4
 8005038:	2000083c 	.word	0x2000083c
 800503c:	0800599c 	.word	0x0800599c

08005040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b04      	subs	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b04      	subs	r3, #4
 800505e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b04      	subs	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005070:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <pxPortInitialiseStack+0x64>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3b14      	subs	r3, #20
 800507a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b04      	subs	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f06f 0202 	mvn.w	r2, #2
 800508e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b20      	subs	r3, #32
 8005094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	080050a9 	.word	0x080050a9

080050a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <prvTaskExitError+0x54>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d00a      	beq.n	80050d2 <prvTaskExitError+0x2a>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvTaskExitError+0x28>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
}
 80050e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e6:	bf00      	nop
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0fc      	beq.n	80050e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000000c 	.word	0x2000000c

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	4770      	bx	lr
 800511c:	f3af 8000 	nop.w

08005120 <pxCurrentTCBConst2>:
 8005120:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005128:	4808      	ldr	r0, [pc, #32]	; (800514c <prvPortStartFirstTask+0x24>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8814 	msr	CONTROL, r0
 800513a:	b662      	cpsie	i
 800513c:	b661      	cpsie	f
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	df00      	svc	0
 8005148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800514a:	bf00      	nop
 800514c:	e000ed08 	.word	0xe000ed08

08005150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005156:	4b46      	ldr	r3, [pc, #280]	; (8005270 <xPortStartScheduler+0x120>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a46      	ldr	r2, [pc, #280]	; (8005274 <xPortStartScheduler+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10a      	bne.n	8005176 <xPortStartScheduler+0x26>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	613b      	str	r3, [r7, #16]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005176:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <xPortStartScheduler+0x120>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <xPortStartScheduler+0x128>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10a      	bne.n	8005196 <xPortStartScheduler+0x46>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <xPortStartScheduler+0x12c>)
 8005198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <xPortStartScheduler+0x130>)
 80051bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051be:	4b31      	ldr	r3, [pc, #196]	; (8005284 <xPortStartScheduler+0x134>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051c4:	e009      	b.n	80051da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <xPortStartScheduler+0x134>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <xPortStartScheduler+0x134>)
 80051ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d0ef      	beq.n	80051c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <xPortStartScheduler+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1c3 0307 	rsb	r3, r3, #7
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d00a      	beq.n	8005208 <xPortStartScheduler+0xb8>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60bb      	str	r3, [r7, #8]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <xPortStartScheduler+0x134>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <xPortStartScheduler+0x134>)
 8005210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <xPortStartScheduler+0x134>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <xPortStartScheduler+0x134>)
 800521c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <xPortStartScheduler+0x138>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a17      	ldr	r2, [pc, #92]	; (8005288 <xPortStartScheduler+0x138>)
 800522c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <xPortStartScheduler+0x138>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a14      	ldr	r2, [pc, #80]	; (8005288 <xPortStartScheduler+0x138>)
 8005238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800523c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800523e:	f000 f8dd 	bl	80053fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <xPortStartScheduler+0x13c>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005248:	f000 f8fc 	bl	8005444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <xPortStartScheduler+0x140>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <xPortStartScheduler+0x140>)
 8005252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005258:	f7ff ff66 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800525c:	f7fe fff0 	bl	8004240 <vTaskSwitchContext>
	prvTaskExitError();
 8005260:	f7ff ff22 	bl	80050a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00
 8005274:	410fc271 	.word	0x410fc271
 8005278:	410fc270 	.word	0x410fc270
 800527c:	e000e400 	.word	0xe000e400
 8005280:	200008fc 	.word	0x200008fc
 8005284:	20000900 	.word	0x20000900
 8005288:	e000ed20 	.word	0xe000ed20
 800528c:	2000000c 	.word	0x2000000c
 8005290:	e000ef34 	.word	0xe000ef34

08005294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <vPortEnterCritical+0x58>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <vPortEnterCritical+0x58>)
 80052b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <vPortEnterCritical+0x58>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10f      	bne.n	80052e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortEnterCritical+0x5c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	603b      	str	r3, [r7, #0]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <vPortEnterCritical+0x4a>
	}
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	2000000c 	.word	0x2000000c
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <vPortExitCritical+0x50>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <vPortExitCritical+0x24>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <vPortExitCritical+0x50>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <vPortExitCritical+0x50>)
 8005320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <vPortExitCritical+0x50>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d105      	bne.n	8005336 <vPortExitCritical+0x42>
 800532a:	2300      	movs	r3, #0
 800532c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f383 8811 	msr	BASEPRI, r3
}
 8005334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
	...

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f7fe ff5e 	bl	8004240 <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
}
 80053d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053d2:	f7fe fe7d 	bl	80040d0 <xTaskIncrementTick>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <SysTick_Handler+0x40>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f383 8811 	msr	BASEPRI, r3
}
 80053ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <vPortSetupTimerInterrupt+0x34>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <vPortSetupTimerInterrupt+0x38>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <vPortSetupTimerInterrupt+0x3c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <vPortSetupTimerInterrupt+0x40>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <vPortSetupTimerInterrupt+0x44>)
 800541a:	3b01      	subs	r3, #1
 800541c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <vPortSetupTimerInterrupt+0x34>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e010 	.word	0xe000e010
 8005434:	e000e018 	.word	0xe000e018
 8005438:	20000000 	.word	0x20000000
 800543c:	10624dd3 	.word	0x10624dd3
 8005440:	e000e014 	.word	0xe000e014

08005444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005454 <vPortEnableVFP+0x10>
 8005448:	6801      	ldr	r1, [r0, #0]
 800544a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800544e:	6001      	str	r1, [r0, #0]
 8005450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005452:	bf00      	nop
 8005454:	e000ed88 	.word	0xe000ed88

08005458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800545e:	f3ef 8305 	mrs	r3, IPSR
 8005462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d914      	bls.n	8005494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <vPortValidateInterruptPriority+0x70>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <vPortValidateInterruptPriority+0x74>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	7afa      	ldrb	r2, [r7, #11]
 800547a:	429a      	cmp	r2, r3
 800547c:	d20a      	bcs.n	8005494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <vPortValidateInterruptPriority+0x78>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <vPortValidateInterruptPriority+0x7c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d90a      	bls.n	80054ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	603b      	str	r3, [r7, #0]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <vPortValidateInterruptPriority+0x60>
	}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e3f0 	.word	0xe000e3f0
 80054cc:	200008fc 	.word	0x200008fc
 80054d0:	e000ed0c 	.word	0xe000ed0c
 80054d4:	20000900 	.word	0x20000900

080054d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054e4:	f7fe fd3a 	bl	8003f5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054e8:	4b5b      	ldr	r3, [pc, #364]	; (8005658 <pvPortMalloc+0x180>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f0:	f000 f920 	bl	8005734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054f4:	4b59      	ldr	r3, [pc, #356]	; (800565c <pvPortMalloc+0x184>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 8093 	bne.w	8005628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01d      	beq.n	8005544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d014      	beq.n	8005544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <pvPortMalloc+0x6c>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	617b      	str	r3, [r7, #20]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d06e      	beq.n	8005628 <pvPortMalloc+0x150>
 800554a:	4b45      	ldr	r3, [pc, #276]	; (8005660 <pvPortMalloc+0x188>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d869      	bhi.n	8005628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005554:	4b43      	ldr	r3, [pc, #268]	; (8005664 <pvPortMalloc+0x18c>)
 8005556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005558:	4b42      	ldr	r3, [pc, #264]	; (8005664 <pvPortMalloc+0x18c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800555e:	e004      	b.n	800556a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d903      	bls.n	800557c <pvPortMalloc+0xa4>
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f1      	bne.n	8005560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <pvPortMalloc+0x180>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	429a      	cmp	r2, r3
 8005584:	d050      	beq.n	8005628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2208      	movs	r2, #8
 800558c:	4413      	add	r3, r2
 800558e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	2308      	movs	r3, #8
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d91f      	bls.n	80055e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <pvPortMalloc+0xf8>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	613b      	str	r3, [r7, #16]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055e2:	69b8      	ldr	r0, [r7, #24]
 80055e4:	f000 f908 	bl	80057f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <pvPortMalloc+0x188>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <pvPortMalloc+0x188>)
 80055f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <pvPortMalloc+0x188>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <pvPortMalloc+0x190>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d203      	bcs.n	800560a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005602:	4b17      	ldr	r3, [pc, #92]	; (8005660 <pvPortMalloc+0x188>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <pvPortMalloc+0x190>)
 8005608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <pvPortMalloc+0x184>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	431a      	orrs	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <pvPortMalloc+0x194>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a11      	ldr	r2, [pc, #68]	; (800566c <pvPortMalloc+0x194>)
 8005626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005628:	f7fe fca6 	bl	8003f78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <pvPortMalloc+0x174>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60fb      	str	r3, [r7, #12]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <pvPortMalloc+0x172>
	return pvReturn;
 800564c:	69fb      	ldr	r3, [r7, #28]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3728      	adds	r7, #40	; 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000450c 	.word	0x2000450c
 800565c:	20004520 	.word	0x20004520
 8005660:	20004510 	.word	0x20004510
 8005664:	20004504 	.word	0x20004504
 8005668:	20004514 	.word	0x20004514
 800566c:	20004518 	.word	0x20004518

08005670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d04d      	beq.n	800571e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005682:	2308      	movs	r3, #8
 8005684:	425b      	negs	r3, r3
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <vPortFree+0xb8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <vPortFree+0x44>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	60fb      	str	r3, [r7, #12]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <vPortFree+0x62>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60bb      	str	r3, [r7, #8]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <vPortFree+0xb8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01e      	beq.n	800571e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11a      	bne.n	800571e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <vPortFree+0xb8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056f8:	f7fe fc30 	bl	8003f5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <vPortFree+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4413      	add	r3, r2
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <vPortFree+0xbc>)
 8005708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f000 f874 	bl	80057f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <vPortFree+0xc0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a06      	ldr	r2, [pc, #24]	; (8005730 <vPortFree+0xc0>)
 8005718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800571a:	f7fe fc2d 	bl	8003f78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20004520 	.word	0x20004520
 800572c:	20004510 	.word	0x20004510
 8005730:	2000451c 	.word	0x2000451c

08005734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800573a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800573e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005740:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <prvHeapInit+0xac>)
 8005742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3307      	adds	r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <prvHeapInit+0xac>)
 8005764:	4413      	add	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <prvHeapInit+0xb0>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <prvHeapInit+0xb0>)
 8005774:	2200      	movs	r2, #0
 8005776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4413      	add	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005780:	2208      	movs	r2, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <prvHeapInit+0xb4>)
 8005794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <prvHeapInit+0xb4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <prvHeapInit+0xb4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <prvHeapInit+0xb4>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <prvHeapInit+0xb8>)
 80057c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <prvHeapInit+0xbc>)
 80057ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <prvHeapInit+0xc0>)
 80057ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000904 	.word	0x20000904
 80057e4:	20004504 	.word	0x20004504
 80057e8:	2000450c 	.word	0x2000450c
 80057ec:	20004514 	.word	0x20004514
 80057f0:	20004510 	.word	0x20004510
 80057f4:	20004520 	.word	0x20004520

080057f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005800:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <prvInsertBlockIntoFreeList+0xac>)
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e002      	b.n	800580c <prvInsertBlockIntoFreeList+0x14>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d8f7      	bhi.n	8005806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d108      	bne.n	800583a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	441a      	add	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	441a      	add	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d118      	bne.n	8005880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d00d      	beq.n	8005876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	441a      	add	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e008      	b.n	8005888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005876:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e003      	b.n	8005888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d002      	beq.n	8005896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20004504 	.word	0x20004504
 80058a8:	2000450c 	.word	0x2000450c

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4d0d      	ldr	r5, [pc, #52]	; (80058e4 <__libc_init_array+0x38>)
 80058b0:	4c0d      	ldr	r4, [pc, #52]	; (80058e8 <__libc_init_array+0x3c>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	2600      	movs	r6, #0
 80058b8:	42a6      	cmp	r6, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	4d0b      	ldr	r5, [pc, #44]	; (80058ec <__libc_init_array+0x40>)
 80058be:	4c0c      	ldr	r4, [pc, #48]	; (80058f0 <__libc_init_array+0x44>)
 80058c0:	f000 f82e 	bl	8005920 <_init>
 80058c4:	1b64      	subs	r4, r4, r5
 80058c6:	10a4      	asrs	r4, r4, #2
 80058c8:	2600      	movs	r6, #0
 80058ca:	42a6      	cmp	r6, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d4:	4798      	blx	r3
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	f855 3b04 	ldr.w	r3, [r5], #4
 80058de:	4798      	blx	r3
 80058e0:	3601      	adds	r6, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	080059c4 	.word	0x080059c4
 80058e8:	080059c4 	.word	0x080059c4
 80058ec:	080059c4 	.word	0x080059c4
 80058f0:	080059c8 	.word	0x080059c8

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
