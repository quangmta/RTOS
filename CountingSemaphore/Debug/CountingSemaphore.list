
CountingSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00004070  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000408c  2000408c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001528d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bde  00000000  00000000  000352d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00037eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224a3  00000000  00000000  00039e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f77  00000000  00000000  0005c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d207c  00000000  00000000  0006f22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001412a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004400  00000000  00000000  001412fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ad8 	.word	0x08005ad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005ad8 	.word	0x08005ad8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000038 	.word	0x20000038
 8000508:	2000008c 	.word	0x2000008c

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fe4d 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f86f 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f901 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8d5 	bl	80006cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	4923      	ldr	r1, [pc, #140]	; (80005b4 <main+0xa8>)
 8000526:	4824      	ldr	r0, [pc, #144]	; (80005b8 <main+0xac>)
 8000528:	f002 f9c7 	bl	80028ba <HAL_UART_Receive_IT>

  CountingSem = xSemaphoreCreateCounting(3,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2003      	movs	r0, #3
 8000530:	f003 fa21 	bl	8003976 <xQueueCreateCountingSemaphore>
 8000534:	4603      	mov	r3, r0
 8000536:	4a21      	ldr	r2, [pc, #132]	; (80005bc <main+0xb0>)
 8000538:	6013      	str	r3, [r2, #0]
  if (CountingSem == NULL) HAL_UART_Transmit(&huart2,(uint8_t *)"Unable to Create Semaphore\n\n",28,100);
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xb0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d106      	bne.n	8000550 <main+0x44>
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	221c      	movs	r2, #28
 8000546:	491e      	ldr	r1, [pc, #120]	; (80005c0 <main+0xb4>)
 8000548:	481b      	ldr	r0, [pc, #108]	; (80005b8 <main+0xac>)
 800054a:	f002 f924 	bl	8002796 <HAL_UART_Transmit>
 800054e:	e006      	b.n	800055e <main+0x52>
  else HAL_UART_Transmit(&huart2,(uint8_t *)"Couting Semaphore created successfully\n\n",41,1000);
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	2229      	movs	r2, #41	; 0x29
 8000556:	491b      	ldr	r1, [pc, #108]	; (80005c4 <main+0xb8>)
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xac>)
 800055a:	f002 f91c 	bl	8002796 <HAL_UART_Transmit>



  //create TASKS

  xTaskCreate(HPT_TASK, "HPT", 128, NULL, 3, &HPThandler);
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <main+0xbc>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2303      	movs	r3, #3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	4918      	ldr	r1, [pc, #96]	; (80005cc <main+0xc0>)
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0xc4>)
 800056e:	f003 fe4a 	bl	8004206 <xTaskCreate>
  xTaskCreate(MPT_TASK, "MPT", 128, NULL, 2, &MPThandler);
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <main+0xc8>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2302      	movs	r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	4916      	ldr	r1, [pc, #88]	; (80005d8 <main+0xcc>)
 8000580:	4816      	ldr	r0, [pc, #88]	; (80005dc <main+0xd0>)
 8000582:	f003 fe40 	bl	8004206 <xTaskCreate>
  xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1, &LPThandler);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xd4>)
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0xd8>)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0xdc>)
 8000596:	f003 fe36 	bl	8004206 <xTaskCreate>
  xTaskCreate(VLPT_TASK, "VLPT", 128, NULL, 0, &VLPThandler);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <main+0xe0>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4912      	ldr	r1, [pc, #72]	; (80005f0 <main+0xe4>)
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <main+0xe8>)
 80005aa:	f003 fe2c 	bl	8004206 <xTaskCreate>

  vTaskStartScheduler();
 80005ae:	f003 ff95 	bl	80044dc <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0xa6>
 80005b4:	20000290 	.word	0x20000290
 80005b8:	20003ff8 	.word	0x20003ff8
 80005bc:	20003ff0 	.word	0x20003ff0
 80005c0:	08005af0 	.word	0x08005af0
 80005c4:	08005b10 	.word	0x08005b10
 80005c8:	20003fe8 	.word	0x20003fe8
 80005cc:	08005b3c 	.word	0x08005b3c
 80005d0:	080007ed 	.word	0x080007ed
 80005d4:	20003fec 	.word	0x20003fec
 80005d8:	08005b40 	.word	0x08005b40
 80005dc:	080009d5 	.word	0x080009d5
 80005e0:	2000403c 	.word	0x2000403c
 80005e4:	08005b44 	.word	0x08005b44
 80005e8:	08000b91 	.word	0x08000b91
 80005ec:	20003ff4 	.word	0x20003ff4
 80005f0:	08005b48 	.word	0x08005b48
 80005f4:	08000d4d 	.word	0x08000d4d

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fa0c 	bl	8005a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f8e9 	bl	8001854 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fc50 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fb4a 	bl	8001d44 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 fc39 	bl	8000f2c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 fffa 	bl	80026fc <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 fc0d 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20003ff8 	.word	0x20003ff8
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_GPIO_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_GPIO_Init+0x4c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <MX_GPIO_Init+0x4c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_GPIO_Init+0x4c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	4918      	ldr	r1, [pc, #96]	; (80007dc <HAL_UART_RxCpltCallback+0x6c>)
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <HAL_UART_RxCpltCallback+0x70>)
 800077e:	f002 f89c 	bl	80028ba <HAL_UART_Receive_IT>
	if(rx_data=='r')
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_UART_RxCpltCallback+0x6c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b72      	cmp	r3, #114	; 0x72
 8000788:	d124      	bne.n	80007d4 <HAL_UART_RxCpltCallback+0x64>
	{
		//release semaphore
		//the xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		//it will get set to pdTRUE inside the interrupt safe API function if a
		// context switch is required
		BaseType_t xHigherPriorityTaskToken = pdFALSE;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(CountingSem,&xHigherPriorityTaskToken);//ISR SAFE VERSION
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_RxCpltCallback+0x74>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f107 020c 	add.w	r2, r7, #12
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f003 fa1d 	bl	8003bd8 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem,&xHigherPriorityTaskToken);//ISR SAFE VERSION
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <HAL_UART_RxCpltCallback+0x74>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fa15 	bl	8003bd8 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem,&xHigherPriorityTaskToken);//ISR SAFE VERSION
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x74>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fa0d 	bl	8003bd8 <xQueueGiveFromISR>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskToken);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d007      	beq.n	80007d4 <HAL_UART_RxCpltCallback+0x64>
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_UART_RxCpltCallback+0x78>)
 80007c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	f3bf 8f6f 	isb	sy
	}

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000290 	.word	0x20000290
 80007e0:	20003ff8 	.word	0x20003ff8
 80007e4:	20003ff0 	.word	0x20003ff0
 80007e8:	e000ed04 	.word	0xe000ed04

080007ec <HPT_TASK>:


void HPT_TASK(void *pvParameters)
{
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	b0ad      	sub	sp, #180	; 0xb4
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char ssemcount[2];

	//Give 3 semaphores at the beginning...
	xSemaphoreGive(CountingSem);
 80007fa:	4b6d      	ldr	r3, [pc, #436]	; (80009b0 <HPT_TASK+0x1c4>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	f003 f8ea 	bl	80039dc <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 8000808:	4b69      	ldr	r3, [pc, #420]	; (80009b0 <HPT_TASK+0x1c4>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	f003 f8e3 	bl	80039dc <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 8000816:	4b66      	ldr	r3, [pc, #408]	; (80009b0 <HPT_TASK+0x1c4>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	f003 f8dc 	bl	80039dc <xQueueGenericSend>

	while(1)
	{
		char str[150];
		strcpy(str,"Entered HPT Task\n About to ACQUIRE the Semaphore\n\n");
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4a62      	ldr	r2, [pc, #392]	; (80009b4 <HPT_TASK+0x1c8>)
 800082a:	461c      	mov	r4, r3
 800082c:	4615      	mov	r5, r2
 800082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	682b      	ldr	r3, [r5, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	8022      	strh	r2, [r4, #0]
 8000840:	3402      	adds	r4, #2
 8000842:	0c1b      	lsrs	r3, r3, #16
 8000844:	7023      	strb	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000846:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <HPT_TASK+0x1c4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fb5e 	bl	8003f0c <uxQueueMessagesWaiting>
 8000850:	4603      	mov	r3, r0
 8000852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa (semcount, ssemcount, 10);
 8000856:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800085a:	220a      	movs	r2, #10
 800085c:	4619      	mov	r1, r3
 800085e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000862:	f005 f8cf 	bl	8005a04 <itoa>
		strcat (str, "Tokens available are: ");
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcb0 	bl	80001d0 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4413      	add	r3, r2
 800087a:	4a4f      	ldr	r2, [pc, #316]	; (80009b8 <HPT_TASK+0x1cc>)
 800087c:	461c      	mov	r4, r3
 800087e:	4615      	mov	r5, r2
 8000880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000882:	6020      	str	r0, [r4, #0]
 8000884:	6061      	str	r1, [r4, #4]
 8000886:	60a2      	str	r2, [r4, #8]
 8000888:	60e3      	str	r3, [r4, #12]
 800088a:	6828      	ldr	r0, [r5, #0]
 800088c:	6120      	str	r0, [r4, #16]
 800088e:	88ab      	ldrh	r3, [r5, #4]
 8000890:	79aa      	ldrb	r2, [r5, #6]
 8000892:	82a3      	strh	r3, [r4, #20]
 8000894:	4613      	mov	r3, r2
 8000896:	75a3      	strb	r3, [r4, #22]
		strcat (str, ssemcount);
 8000898:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 f8c6 	bl	8005a34 <strcat>
		strcat (str, "\n\n");
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fc8f 	bl	80001d0 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4413      	add	r3, r2
 80008bc:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <HPT_TASK+0x1d0>)
 80008be:	8811      	ldrh	r1, [r2, #0]
 80008c0:	7892      	ldrb	r2, [r2, #2]
 80008c2:	8019      	strh	r1, [r3, #0]
 80008c4:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f107 010c 	add.w	r1, r7, #12
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	4838      	ldr	r0, [pc, #224]	; (80009c0 <HPT_TASK+0x1d4>)
 80008de:	f001 ff5a 	bl	8002796 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <HPT_TASK+0x1c4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 31ff 	mov.w	r1, #4294967295
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fa02 	bl	8003cf4 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource,10);
 80008f0:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HPT_TASK+0x1d8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a34      	ldr	r2, [pc, #208]	; (80009c8 <HPT_TASK+0x1dc>)
 80008f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fa:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80008fe:	220a      	movs	r2, #10
 8000900:	4618      	mov	r0, r3
 8000902:	f005 f87f 	bl	8005a04 <itoa>
		strcpy(str,"Leaving HPT Task\n Data ACCEDDED is:: ");
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <HPT_TASK+0x1e0>)
 800090c:	461c      	mov	r4, r3
 800090e:	4615      	mov	r5, r2
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800091c:	6020      	str	r0, [r4, #0]
 800091e:	3404      	adds	r4, #4
 8000920:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000922:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f005 f881 	bl	8005a34 <strcat>
		strcat(str,"\n Not releasing the Semaphore \n\n\n");
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc4a 	bl	80001d0 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4413      	add	r3, r2
 8000946:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <HPT_TASK+0x1e4>)
 8000948:	4614      	mov	r4, r2
 800094a:	469c      	mov	ip, r3
 800094c:	f104 0e20 	add.w	lr, r4, #32
 8000950:	4665      	mov	r5, ip
 8000952:	4626      	mov	r6, r4
 8000954:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000956:	6028      	str	r0, [r5, #0]
 8000958:	6069      	str	r1, [r5, #4]
 800095a:	60aa      	str	r2, [r5, #8]
 800095c:	60eb      	str	r3, [r5, #12]
 800095e:	3410      	adds	r4, #16
 8000960:	f10c 0c10 	add.w	ip, ip, #16
 8000964:	4574      	cmp	r4, lr
 8000966:	d1f3      	bne.n	8000950 <HPT_TASK+0x164>
 8000968:	4662      	mov	r2, ip
 800096a:	4623      	mov	r3, r4
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 010c 	add.w	r1, r7, #12
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <HPT_TASK+0x1d4>)
 8000988:	f001 ff05 	bl	8002796 <HAL_UART_Transmit>

		indx++;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HPT_TASK+0x1d8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HPT_TASK+0x1d8>)
 8000994:	6013      	str	r3, [r2, #0]
		if(indx>2) indx=0;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HPT_TASK+0x1d8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	dd02      	ble.n	80009a4 <HPT_TASK+0x1b8>
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HPT_TASK+0x1d8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
 80009a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a8:	f003 fd64 	bl	8004474 <vTaskDelay>
	{
 80009ac:	e73a      	b.n	8000824 <HPT_TASK+0x38>
 80009ae:	bf00      	nop
 80009b0:	20003ff0 	.word	0x20003ff0
 80009b4:	08005b50 	.word	0x08005b50
 80009b8:	08005b84 	.word	0x08005b84
 80009bc:	08005b9c 	.word	0x08005b9c
 80009c0:	20003ff8 	.word	0x20003ff8
 80009c4:	2000028c 	.word	0x2000028c
 80009c8:	20000000 	.word	0x20000000
 80009cc:	08005ba0 	.word	0x08005ba0
 80009d0:	08005bc8 	.word	0x08005bc8

080009d4 <MPT_TASK>:
	}

}

void MPT_TASK(void *pvParameters)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b0ad      	sub	sp, #180	; 0xb4
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
//	xSemaphoreGive(CountingSem);

	while(1)
	{
		char str[150];
		strcpy(str,"Entered MPT Task\n About to ACQUIRE the Semaphore\n\n");
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4a61      	ldr	r2, [pc, #388]	; (8000b6c <MPT_TASK+0x198>)
 80009e8:	461c      	mov	r4, r3
 80009ea:	4615      	mov	r5, r2
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	8022      	strh	r2, [r4, #0]
 80009fe:	3402      	adds	r4, #2
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	7023      	strb	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000a04:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <MPT_TASK+0x19c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fa7f 	bl	8003f0c <uxQueueMessagesWaiting>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa (semcount, ssemcount, 10);
 8000a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000a20:	f004 fff0 	bl	8005a04 <itoa>
		strcat (str, "Tokens available are: ");
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fbd1 	bl	80001d0 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4413      	add	r3, r2
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <MPT_TASK+0x1a0>)
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	4615      	mov	r5, r2
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	6020      	str	r0, [r4, #0]
 8000a42:	6061      	str	r1, [r4, #4]
 8000a44:	60a2      	str	r2, [r4, #8]
 8000a46:	60e3      	str	r3, [r4, #12]
 8000a48:	6828      	ldr	r0, [r5, #0]
 8000a4a:	6120      	str	r0, [r4, #16]
 8000a4c:	88ab      	ldrh	r3, [r5, #4]
 8000a4e:	79aa      	ldrb	r2, [r5, #6]
 8000a50:	82a3      	strh	r3, [r4, #20]
 8000a52:	4613      	mov	r3, r2
 8000a54:	75a3      	strb	r3, [r4, #22]
		strcat (str, ssemcount);
 8000a56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 ffe7 	bl	8005a34 <strcat>
		strcat (str, "\n\n");
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fbb0 	bl	80001d0 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a3f      	ldr	r2, [pc, #252]	; (8000b78 <MPT_TASK+0x1a4>)
 8000a7c:	8811      	ldrh	r1, [r2, #0]
 8000a7e:	7892      	ldrb	r2, [r2, #2]
 8000a80:	8019      	strh	r1, [r3, #0]
 8000a82:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	4838      	ldr	r0, [pc, #224]	; (8000b7c <MPT_TASK+0x1a8>)
 8000a9c:	f001 fe7b 	bl	8002796 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <MPT_TASK+0x19c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 f923 	bl	8003cf4 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource,10);
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <MPT_TASK+0x1ac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a34      	ldr	r2, [pc, #208]	; (8000b84 <MPT_TASK+0x1b0>)
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000abc:	220a      	movs	r2, #10
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 ffa0 	bl	8005a04 <itoa>
		strcpy(str,"Leaving MPT Task\n Data ACCEDDED is:: ");
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <MPT_TASK+0x1b4>)
 8000aca:	461c      	mov	r4, r3
 8000acc:	4615      	mov	r5, r2
 8000ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ada:	6020      	str	r0, [r4, #0]
 8000adc:	3404      	adds	r4, #4
 8000ade:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000ae0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 ffa2 	bl	8005a34 <strcat>
		strcat(str,"\n Not releasing the Semaphore \n\n\n");
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb6b 	bl	80001d0 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4413      	add	r3, r2
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MPT_TASK+0x1b8>)
 8000b06:	4614      	mov	r4, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	f104 0e20 	add.w	lr, r4, #32
 8000b0e:	4665      	mov	r5, ip
 8000b10:	4626      	mov	r6, r4
 8000b12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b14:	6028      	str	r0, [r5, #0]
 8000b16:	6069      	str	r1, [r5, #4]
 8000b18:	60aa      	str	r2, [r5, #8]
 8000b1a:	60eb      	str	r3, [r5, #12]
 8000b1c:	3410      	adds	r4, #16
 8000b1e:	f10c 0c10 	add.w	ip, ip, #16
 8000b22:	4574      	cmp	r4, lr
 8000b24:	d1f3      	bne.n	8000b0e <MPT_TASK+0x13a>
 8000b26:	4662      	mov	r2, ip
 8000b28:	4623      	mov	r3, r4
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fb4c 	bl	80001d0 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MPT_TASK+0x1a8>)
 8000b46:	f001 fe26 	bl	8002796 <HAL_UART_Transmit>

		indx++;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MPT_TASK+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <MPT_TASK+0x1ac>)
 8000b52:	6013      	str	r3, [r2, #0]
		if(indx>2) indx=0;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MPT_TASK+0x1ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	dd02      	ble.n	8000b62 <MPT_TASK+0x18e>
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MPT_TASK+0x1ac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
		vTaskDelay(2000);
 8000b62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b66:	f003 fc85 	bl	8004474 <vTaskDelay>
	{
 8000b6a:	e73a      	b.n	80009e2 <MPT_TASK+0xe>
 8000b6c:	08005bec 	.word	0x08005bec
 8000b70:	20003ff0 	.word	0x20003ff0
 8000b74:	08005b84 	.word	0x08005b84
 8000b78:	08005b9c 	.word	0x08005b9c
 8000b7c:	20003ff8 	.word	0x20003ff8
 8000b80:	2000028c 	.word	0x2000028c
 8000b84:	20000000 	.word	0x20000000
 8000b88:	08005c20 	.word	0x08005c20
 8000b8c:	08005bc8 	.word	0x08005bc8

08000b90 <LPT_TASK>:
//		vTaskDelete(NULL);
	}

}
void LPT_TASK(void *pvParameters)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b0ad      	sub	sp, #180	; 0xb4
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
//	xSemaphoreGive(CountingSem);

	while(1)
	{
		char str[150];
		strcpy(str,"Entered LPT Task\n About to ACQUIRE the Semaphore\n\n");
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4a61      	ldr	r2, [pc, #388]	; (8000d28 <LPT_TASK+0x198>)
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	8022      	strh	r2, [r4, #0]
 8000bba:	3402      	adds	r4, #2
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	7023      	strb	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <LPT_TASK+0x19c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 f9a1 	bl	8003f0c <uxQueueMessagesWaiting>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa (semcount, ssemcount, 10);
 8000bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000bdc:	f004 ff12 	bl	8005a04 <itoa>
		strcat (str, "Tokens available are: ");
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff faf3 	bl	80001d0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <LPT_TASK+0x1a0>)
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	6020      	str	r0, [r4, #0]
 8000bfe:	6061      	str	r1, [r4, #4]
 8000c00:	60a2      	str	r2, [r4, #8]
 8000c02:	60e3      	str	r3, [r4, #12]
 8000c04:	6828      	ldr	r0, [r5, #0]
 8000c06:	6120      	str	r0, [r4, #16]
 8000c08:	88ab      	ldrh	r3, [r5, #4]
 8000c0a:	79aa      	ldrb	r2, [r5, #6]
 8000c0c:	82a3      	strh	r3, [r4, #20]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	75a3      	strb	r3, [r4, #22]
		strcat (str, ssemcount);
 8000c12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 ff09 	bl	8005a34 <strcat>
		strcat (str, "\n\n");
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fad2 	bl	80001d0 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4413      	add	r3, r2
 8000c36:	4a3f      	ldr	r2, [pc, #252]	; (8000d34 <LPT_TASK+0x1a4>)
 8000c38:	8811      	ldrh	r1, [r2, #0]
 8000c3a:	7892      	ldrb	r2, [r2, #2]
 8000c3c:	8019      	strh	r1, [r3, #0]
 8000c3e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fac3 	bl	80001d0 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f107 010c 	add.w	r1, r7, #12
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	4838      	ldr	r0, [pc, #224]	; (8000d38 <LPT_TASK+0x1a8>)
 8000c58:	f001 fd9d 	bl	8002796 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <LPT_TASK+0x19c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 f845 	bl	8003cf4 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource,10);
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <LPT_TASK+0x1ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <LPT_TASK+0x1b0>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000c78:	220a      	movs	r2, #10
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 fec2 	bl	8005a04 <itoa>
		strcpy(str,"Leaving LPT Task\n Data ACCEDDED is:: ");
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <LPT_TASK+0x1b4>)
 8000c86:	461c      	mov	r4, r3
 8000c88:	4615      	mov	r5, r2
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c96:	6020      	str	r0, [r4, #0]
 8000c98:	3404      	adds	r4, #4
 8000c9a:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000c9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fec4 	bl	8005a34 <strcat>
		strcat(str,"\n Not releasing the Semaphore \n\n\n");
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa8d 	bl	80001d0 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <LPT_TASK+0x1b8>)
 8000cc2:	4614      	mov	r4, r2
 8000cc4:	469c      	mov	ip, r3
 8000cc6:	f104 0e20 	add.w	lr, r4, #32
 8000cca:	4665      	mov	r5, ip
 8000ccc:	4626      	mov	r6, r4
 8000cce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cd0:	6028      	str	r0, [r5, #0]
 8000cd2:	6069      	str	r1, [r5, #4]
 8000cd4:	60aa      	str	r2, [r5, #8]
 8000cd6:	60eb      	str	r3, [r5, #12]
 8000cd8:	3410      	adds	r4, #16
 8000cda:	f10c 0c10 	add.w	ip, ip, #16
 8000cde:	4574      	cmp	r4, lr
 8000ce0:	d1f3      	bne.n	8000cca <LPT_TASK+0x13a>
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fa6e 	bl	80001d0 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f107 010c 	add.w	r1, r7, #12
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LPT_TASK+0x1a8>)
 8000d02:	f001 fd48 	bl	8002796 <HAL_UART_Transmit>

		indx++;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <LPT_TASK+0x1ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LPT_TASK+0x1ac>)
 8000d0e:	6013      	str	r3, [r2, #0]
		if(indx>2) indx=0;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <LPT_TASK+0x1ac>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	dd02      	ble.n	8000d1e <LPT_TASK+0x18e>
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <LPT_TASK+0x1ac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
		vTaskDelay(1000);
 8000d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d22:	f003 fba7 	bl	8004474 <vTaskDelay>
	{
 8000d26:	e73a      	b.n	8000b9e <LPT_TASK+0xe>
 8000d28:	08005c48 	.word	0x08005c48
 8000d2c:	20003ff0 	.word	0x20003ff0
 8000d30:	08005b84 	.word	0x08005b84
 8000d34:	08005b9c 	.word	0x08005b9c
 8000d38:	20003ff8 	.word	0x20003ff8
 8000d3c:	2000028c 	.word	0x2000028c
 8000d40:	20000000 	.word	0x20000000
 8000d44:	08005c7c 	.word	0x08005c7c
 8000d48:	08005bc8 	.word	0x08005bc8

08000d4c <VLPT_TASK>:
//		vTaskDelete(NULL);
	}
}

void VLPT_TASK(void *pvParameters)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b0ad      	sub	sp, #180	; 0xb4
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
//	xSemaphoreGive(CountingSem);

	while(1)
	{
		char str[150];
		strcpy(str,"Entered VLPT Task\n About to ACQUIRE the Semaphore\n\n");
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4a61      	ldr	r2, [pc, #388]	; (8000ee4 <VLPT_TASK+0x198>)
 8000d60:	461c      	mov	r4, r3
 8000d62:	4615      	mov	r5, r2
 8000d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	6023      	str	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000d74:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <VLPT_TASK+0x19c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 f8c7 	bl	8003f0c <uxQueueMessagesWaiting>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa (semcount, ssemcount, 10);
 8000d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d88:	220a      	movs	r2, #10
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000d90:	f004 fe38 	bl	8005a04 <itoa>
		strcat (str, "Tokens available are: ");
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa19 	bl	80001d0 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4413      	add	r3, r2
 8000da8:	4a50      	ldr	r2, [pc, #320]	; (8000eec <VLPT_TASK+0x1a0>)
 8000daa:	461c      	mov	r4, r3
 8000dac:	4615      	mov	r5, r2
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	6020      	str	r0, [r4, #0]
 8000db2:	6061      	str	r1, [r4, #4]
 8000db4:	60a2      	str	r2, [r4, #8]
 8000db6:	60e3      	str	r3, [r4, #12]
 8000db8:	6828      	ldr	r0, [r5, #0]
 8000dba:	6120      	str	r0, [r4, #16]
 8000dbc:	88ab      	ldrh	r3, [r5, #4]
 8000dbe:	79aa      	ldrb	r2, [r5, #6]
 8000dc0:	82a3      	strh	r3, [r4, #20]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	75a3      	strb	r3, [r4, #22]
		strcat (str, ssemcount);
 8000dc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fe2f 	bl	8005a34 <strcat>
		strcat (str, "\n\n");
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9f8 	bl	80001d0 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4413      	add	r3, r2
 8000dea:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <VLPT_TASK+0x1a4>)
 8000dec:	8811      	ldrh	r1, [r2, #0]
 8000dee:	7892      	ldrb	r2, [r2, #2]
 8000df0:	8019      	strh	r1, [r3, #0]
 8000df2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9e9 	bl	80001d0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f107 010c 	add.w	r1, r7, #12
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	483a      	ldr	r0, [pc, #232]	; (8000ef4 <VLPT_TASK+0x1a8>)
 8000e0c:	f001 fcc3 	bl	8002796 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <VLPT_TASK+0x19c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 ff6b 	bl	8003cf4 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource,10);
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <VLPT_TASK+0x1ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a36      	ldr	r2, [pc, #216]	; (8000efc <VLPT_TASK+0x1b0>)
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fde8 	bl	8005a04 <itoa>
		strcpy(str,"Leaving VLPT Task\n Data ACCEDDED is:: ");
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4a31      	ldr	r2, [pc, #196]	; (8000f00 <VLPT_TASK+0x1b4>)
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	4615      	mov	r5, r2
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e4a:	6020      	str	r0, [r4, #0]
 8000e4c:	3404      	adds	r4, #4
 8000e4e:	8021      	strh	r1, [r4, #0]
 8000e50:	3402      	adds	r4, #2
 8000e52:	0c0b      	lsrs	r3, r1, #16
 8000e54:	7023      	strb	r3, [r4, #0]
		strcat(str,sresource);
 8000e56:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fde7 	bl	8005a34 <strcat>
		strcat(str,"\n Not releasing the Semaphore \n\n\n");
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f9b0 	bl	80001d0 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <VLPT_TASK+0x1b8>)
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	469c      	mov	ip, r3
 8000e80:	f104 0e20 	add.w	lr, r4, #32
 8000e84:	4665      	mov	r5, ip
 8000e86:	4626      	mov	r6, r4
 8000e88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e8a:	6028      	str	r0, [r5, #0]
 8000e8c:	6069      	str	r1, [r5, #4]
 8000e8e:	60aa      	str	r2, [r5, #8]
 8000e90:	60eb      	str	r3, [r5, #12]
 8000e92:	3410      	adds	r4, #16
 8000e94:	f10c 0c10 	add.w	ip, ip, #16
 8000e98:	4574      	cmp	r4, lr
 8000e9a:	d1f3      	bne.n	8000e84 <VLPT_TASK+0x138>
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff f991 	bl	80001d0 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f107 010c 	add.w	r1, r7, #12
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <VLPT_TASK+0x1a8>)
 8000ebc:	f001 fc6b 	bl	8002796 <HAL_UART_Transmit>

		indx++;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <VLPT_TASK+0x1ac>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <VLPT_TASK+0x1ac>)
 8000ec8:	6013      	str	r3, [r2, #0]
		if(indx>2) indx=0;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <VLPT_TASK+0x1ac>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	dd02      	ble.n	8000ed8 <VLPT_TASK+0x18c>
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <VLPT_TASK+0x1ac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
		vTaskDelay(500);
 8000ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000edc:	f003 faca 	bl	8004474 <vTaskDelay>
	{
 8000ee0:	e73b      	b.n	8000d5a <VLPT_TASK+0xe>
 8000ee2:	bf00      	nop
 8000ee4:	08005ca4 	.word	0x08005ca4
 8000ee8:	20003ff0 	.word	0x20003ff0
 8000eec:	08005b84 	.word	0x08005b84
 8000ef0:	08005b9c 	.word	0x08005b9c
 8000ef4:	20003ff8 	.word	0x20003ff8
 8000ef8:	2000028c 	.word	0x2000028c
 8000efc:	20000000 	.word	0x20000000
 8000f00:	08005cd8 	.word	0x08005cd8
 8000f04:	08005bc8 	.word	0x08005bc8

08000f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f1a:	f000 f96b 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40001000 	.word	0x40001000

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x54>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_MspInit+0x54>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x54>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_MspInit+0x54>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_MspInit+0x54>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_MspInit+0x54>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	210f      	movs	r1, #15
 8000f7a:	f06f 0001 	mvn.w	r0, #1
 8000f7e:	f000 fa11 	bl	80013a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_UART_MspInit+0x94>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d133      	bne.n	800101a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_UART_MspInit+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <HAL_UART_MspInit+0x9c>)
 8001006:	f000 fa89 	bl	800151c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2105      	movs	r1, #5
 800100e:	2026      	movs	r0, #38	; 0x26
 8001010:	f000 f9c8 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001014:	2026      	movs	r0, #38	; 0x26
 8001016:	f000 f9e1 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004400 	.word	0x40004400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2036      	movs	r0, #54	; 0x36
 8001046:	f000 f9ad 	bl	80013a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800104a:	2036      	movs	r0, #54	; 0x36
 800104c:	f000 f9c6 	bl	80013dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_InitTick+0xa4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <HAL_InitTick+0xa4>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_InitTick+0xa4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f001 f860 	bl	800213c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800107c:	f001 f836 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8001080:	4603      	mov	r3, r0
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_InitTick+0xa8>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9b      	lsrs	r3, r3, #18
 8001090:	3b01      	subs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_InitTick+0xac>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_InitTick+0xb0>)
 8001098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_InitTick+0xac>)
 800109c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_InitTick+0xac>)
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_InitTick+0xac>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_InitTick+0xac>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <HAL_InitTick+0xac>)
 80010b6:	f001 f873 	bl	80021a0 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <HAL_InitTick+0xac>)
 80010c2:	f001 f8c7 	bl	8002254 <HAL_TIM_Base_Start_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	20004040 	.word	0x20004040
 80010e0:	40001000 	.word	0x40001000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USART2_IRQHandler+0x10>)
 8001116:	f001 fc01 	bl	800291c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20003ff8 	.word	0x20003ff8

08001124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM6_DAC_IRQHandler+0x10>)
 800112a:	f001 f903 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20004040 	.word	0x20004040

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f004 fbff 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f9bd 	bl	800050c <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80011a0:	08005d58 	.word	0x08005d58
  ldr r2, =_sbss
 80011a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011a8:	2000408c 	.word	0x2000408c

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f8d8 	bl	800138e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff ff26 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fea8 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000014 	.word	0x20000014
 8001218:	20004088 	.word	0x20004088

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20004088 	.word	0x20004088

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff4c 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b6:	f7ff ff61 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff ffb1 	bl	8001328 <NVIC_EncodePriority>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff80 	bl	80012d4 <__NVIC_SetPriority>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff54 	bl	8001298 <__NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001406:	f7ff ff09 	bl	800121c <HAL_GetTick>
 800140a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e052      	b.n	80014d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0216 	bic.w	r2, r2, #22
 8001438:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001448:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <HAL_DMA_Abort+0x62>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	e013      	b.n	80014a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147c:	f7ff fece 	bl	800121c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b05      	cmp	r3, #5
 8001488:	d90c      	bls.n	80014a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2220      	movs	r2, #32
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e015      	b.n	80014d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1e4      	bne.n	800147c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	223f      	movs	r2, #63	; 0x3f
 80014b8:	409a      	lsls	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d004      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00c      	b.n	8001510 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	e16b      	b.n	8001810 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 815a 	bne.w	800180a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d005      	beq.n	800156e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156a:	2b02      	cmp	r3, #2
 800156c:	d130      	bne.n	80015d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 0201 	and.w	r2, r3, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d017      	beq.n	800160c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d123      	bne.n	8001660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0203 	and.w	r2, r3, #3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80b4 	beq.w	800180a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b60      	ldr	r3, [pc, #384]	; (8001828 <HAL_GPIO_Init+0x30c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a5f      	ldr	r2, [pc, #380]	; (8001828 <HAL_GPIO_Init+0x30c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_GPIO_Init+0x30c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016be:	4a5b      	ldr	r2, [pc, #364]	; (800182c <HAL_GPIO_Init+0x310>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x314>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d02b      	beq.n	8001742 <HAL_GPIO_Init+0x226>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_GPIO_Init+0x318>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d025      	beq.n	800173e <HAL_GPIO_Init+0x222>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_GPIO_Init+0x31c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01f      	beq.n	800173a <HAL_GPIO_Init+0x21e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4f      	ldr	r2, [pc, #316]	; (800183c <HAL_GPIO_Init+0x320>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x21a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <HAL_GPIO_Init+0x324>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x216>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <HAL_GPIO_Init+0x328>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x212>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_GPIO_Init+0x32c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x20e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4b      	ldr	r2, [pc, #300]	; (800184c <HAL_GPIO_Init+0x330>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x20a>
 8001722:	2307      	movs	r3, #7
 8001724:	e00e      	b.n	8001744 <HAL_GPIO_Init+0x228>
 8001726:	2308      	movs	r3, #8
 8001728:	e00c      	b.n	8001744 <HAL_GPIO_Init+0x228>
 800172a:	2306      	movs	r3, #6
 800172c:	e00a      	b.n	8001744 <HAL_GPIO_Init+0x228>
 800172e:	2305      	movs	r3, #5
 8001730:	e008      	b.n	8001744 <HAL_GPIO_Init+0x228>
 8001732:	2304      	movs	r3, #4
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x228>
 8001736:	2303      	movs	r3, #3
 8001738:	e004      	b.n	8001744 <HAL_GPIO_Init+0x228>
 800173a:	2302      	movs	r3, #2
 800173c:	e002      	b.n	8001744 <HAL_GPIO_Init+0x228>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x228>
 8001742:	2300      	movs	r3, #0
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f002 0203 	and.w	r2, r2, #3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4093      	lsls	r3, r2
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001754:	4935      	ldr	r1, [pc, #212]	; (800182c <HAL_GPIO_Init+0x310>)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_GPIO_Init+0x334>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001786:	4a32      	ldr	r2, [pc, #200]	; (8001850 <HAL_GPIO_Init+0x334>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_GPIO_Init+0x334>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_GPIO_Init+0x334>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_GPIO_Init+0x334>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_GPIO_Init+0x334>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_GPIO_Init+0x334>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_GPIO_Init+0x334>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	f67f ae90 	bls.w	8001538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40013800 	.word	0x40013800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40020800 	.word	0x40020800
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40021000 	.word	0x40021000
 8001844:	40021400 	.word	0x40021400
 8001848:	40021800 	.word	0x40021800
 800184c:	40021c00 	.word	0x40021c00
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e264      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e23f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a80      	ldr	r2, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fc86 	bl	800121c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fc82 	bl	800121c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e204      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc72 	bl	800121c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc6e 	bl	800121c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1f0      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c4      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4952      	ldr	r1, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fc27 	bl	800121c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fc23 	bl	800121c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a5      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4940      	ldr	r1, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc06 	bl	800121c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc02 	bl	800121c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e184      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d030      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fbe6 	bl	800121c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fbe2 	bl	800121c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e164      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbcf 	bl	800121c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fbcb 	bl	800121c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e14d      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a0 	beq.w	8001bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb91 	bl	800121c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e011      	b.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
 8001b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff fb84 	bl	800121c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e106      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x4e4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
 8001b36:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a80      	ldr	r2, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b66:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a74      	ldr	r2, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb49 	bl	800121c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fb45 	bl	800121c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c5      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x33a>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fb33 	bl	800121c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fb2f 	bl	800121c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0af      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a55      	ldr	r2, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 809b 	beq.w	8001d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d05c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d141      	bne.n	8001c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb03 	bl	800121c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff faff 	bl	800121c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e081      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fad8 	bl	800121c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fad4 	bl	800121c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e056      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c8e:	e04e      	b.n	8001d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fac1 	bl	800121c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fabd 	bl	800121c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e03f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001cbc:	e037      	b.n	8001d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e032      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d028      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d121      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d11a      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d111      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	42470060 	.word	0x42470060

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cc      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b68      	ldr	r3, [pc, #416]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d90c      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e067      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4934      	ldr	r1, [pc, #208]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f9f2 	bl	800121c <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f9ee 	bl	800121c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d20c      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f821 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8a0 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08005d08 	.word	0x08005d08
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000010 	.word	0x20000010

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f28:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x40>
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	f200 80bd 	bhi.w	80020b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f42:	e0b7      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f46:	60bb      	str	r3, [r7, #8]
       break;
 8001f48:	e0b7      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f4c:	60bb      	str	r3, [r7, #8]
      break;
 8001f4e:	e0b4      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f50:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d04d      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	ea02 0800 	and.w	r8, r2, r0
 8001f7e:	ea03 0901 	and.w	r9, r3, r1
 8001f82:	4640      	mov	r0, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	014b      	lsls	r3, r1, #5
 8001f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f94:	0142      	lsls	r2, r0, #5
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	ebb0 0008 	subs.w	r0, r0, r8
 8001f9e:	eb61 0109 	sbc.w	r1, r1, r9
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	018b      	lsls	r3, r1, #6
 8001fac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fb0:	0182      	lsls	r2, r0, #6
 8001fb2:	1a12      	subs	r2, r2, r0
 8001fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	00d9      	lsls	r1, r3, #3
 8001fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fc6:	00d0      	lsls	r0, r2, #3
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	eb12 0208 	adds.w	r2, r2, r8
 8001fd0:	eb43 0309 	adc.w	r3, r3, r9
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	0259      	lsls	r1, r3, #9
 8001fde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fe2:	0250      	lsls	r0, r2, #9
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f7fe f8f4 	bl	80001e0 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e04a      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	461a      	mov	r2, r3
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	ea02 0400 	and.w	r4, r2, r0
 800201a:	ea03 0501 	and.w	r5, r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	014b      	lsls	r3, r1, #5
 800202c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002030:	0142      	lsls	r2, r0, #5
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	1b00      	subs	r0, r0, r4
 8002038:	eb61 0105 	sbc.w	r1, r1, r5
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	018b      	lsls	r3, r1, #6
 8002046:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800204a:	0182      	lsls	r2, r0, #6
 800204c:	1a12      	subs	r2, r2, r0
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	00d9      	lsls	r1, r3, #3
 800205c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002060:	00d0      	lsls	r0, r2, #3
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	1912      	adds	r2, r2, r4
 8002068:	eb45 0303 	adc.w	r3, r5, r3
 800206c:	f04f 0000 	mov.w	r0, #0
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	0299      	lsls	r1, r3, #10
 8002076:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800207a:	0290      	lsls	r0, r2, #10
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	461a      	mov	r2, r3
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f7fe f8a8 	bl	80001e0 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4613      	mov	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	60bb      	str	r3, [r7, #8]
      break;
 80020b2:	e002      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020b6:	60bb      	str	r3, [r7, #8]
      break;
 80020b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ba:	68bb      	ldr	r3, [r7, #8]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08005d18 	.word	0x08005d18

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	08005d18 	.word	0x08005d18

0800213c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	220f      	movs	r2, #15
 800214a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RCC_GetClockConfig+0x60>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e041      	b.n	8002236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f839 	bl	800223e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f000 f9d8 	bl	8002594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04e      	b.n	800230a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_TIM_Base_Start_IT+0xc4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d022      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d01d      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_TIM_Base_Start_IT+0xc8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d018      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_TIM_Base_Start_IT+0xcc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_TIM_Base_Start_IT+0xd0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00e      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_TIM_Base_Start_IT+0xd4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_TIM_Base_Start_IT+0xd8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x80>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_TIM_Base_Start_IT+0xdc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d010      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	e007      	b.n	8002308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40010400 	.word	0x40010400
 800232c:	40014000 	.word	0x40014000
 8002330:	40001800 	.word	0x40001800

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0202 	mvn.w	r2, #2
 8002360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8ee 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8e0 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8f1 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0204 	mvn.w	r2, #4
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8c4 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8b6 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8c7 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d122      	bne.n	8002438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d11b      	bne.n	8002438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0208 	mvn.w	r2, #8
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2204      	movs	r2, #4
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f89a 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f88c 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f89d 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b10      	cmp	r3, #16
 8002444:	d122      	bne.n	800248c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d11b      	bne.n	800248c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0210 	mvn.w	r2, #16
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2208      	movs	r2, #8
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f870 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f862 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f873 	bl	800256c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0201 	mvn.w	r2, #1
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fd28 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f902 	bl	80026e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f838 	bl	8002580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b20      	cmp	r3, #32
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b20      	cmp	r3, #32
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0220 	mvn.w	r2, #32
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f8cc 	bl	80026d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a40      	ldr	r2, [pc, #256]	; (80026a8 <TIM_Base_SetConfig+0x114>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <TIM_Base_SetConfig+0x40>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b2:	d00f      	beq.n	80025d4 <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a3d      	ldr	r2, [pc, #244]	; (80026ac <TIM_Base_SetConfig+0x118>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00b      	beq.n	80025d4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <TIM_Base_SetConfig+0x11c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <TIM_Base_SetConfig+0x120>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3a      	ldr	r2, [pc, #232]	; (80026b8 <TIM_Base_SetConfig+0x124>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <TIM_Base_SetConfig+0x114>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02b      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d027      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <TIM_Base_SetConfig+0x118>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d023      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <TIM_Base_SetConfig+0x11c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2a      	ldr	r2, [pc, #168]	; (80026b4 <TIM_Base_SetConfig+0x120>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01b      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <TIM_Base_SetConfig+0x124>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d017      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <TIM_Base_SetConfig+0x128>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <TIM_Base_SetConfig+0x12c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <TIM_Base_SetConfig+0x130>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <TIM_Base_SetConfig+0x134>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a24      	ldr	r2, [pc, #144]	; (80026cc <TIM_Base_SetConfig+0x138>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <TIM_Base_SetConfig+0x13c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <TIM_Base_SetConfig+0x114>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_Base_SetConfig+0xf8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <TIM_Base_SetConfig+0x124>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d103      	bne.n	8002694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	615a      	str	r2, [r3, #20]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800
 80026b4:	40000c00 	.word	0x40000c00
 80026b8:	40010400 	.word	0x40010400
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800
 80026c8:	40001800 	.word	0x40001800
 80026cc:	40001c00 	.word	0x40001c00
 80026d0:	40002000 	.word	0x40002000

080026d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e03f      	b.n	800278e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fc34 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fddb 	bl	80032fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	; 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d17c      	bne.n	80028b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_Transmit+0x2c>
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e075      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x3e>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e06e      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2221      	movs	r2, #33	; 0x21
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fd17 	bl	800121c <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d108      	bne.n	8002818 <HAL_UART_Transmit+0x82>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e003      	b.n	8002820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002828:	e02a      	b.n	8002880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb1f 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e036      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3302      	adds	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e007      	b.n	8002872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1cf      	bne.n	800282a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 faef 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e006      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d11d      	bne.n	8002910 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_Receive_IT+0x26>
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e016      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Receive_IT+0x38>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e00f      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	461a      	mov	r2, r3
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fb24 	bl	8002f54 <UART_Start_Receive_IT>
 800290c:	4603      	mov	r3, r0
 800290e:	e000      	b.n	8002912 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0ba      	sub	sp, #232	; 0xe8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800295a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10f      	bne.n	8002982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_UART_IRQHandler+0x66>
 800296e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fc03 	bl	8003186 <UART_Receive_IT>
      return;
 8002980:	e256      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80de 	beq.w	8002b48 <HAL_UART_IRQHandler+0x22c>
 800298c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80d1 	beq.w	8002b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_UART_IRQHandler+0xae>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_UART_IRQHandler+0xd2>
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_UART_IRQHandler+0xf6>
 80029fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d011      	beq.n	8002a42 <HAL_UART_IRQHandler+0x126>
 8002a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0208 	orr.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 81ed 	beq.w	8002e26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_UART_IRQHandler+0x14e>
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fb8e 	bl	8003186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_UART_IRQHandler+0x17a>
 8002a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04f      	beq.n	8002b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa96 	bl	8002fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d141      	bne.n	8002b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1d9      	bne.n	8002aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4a7d      	ldr	r2, [pc, #500]	; (8002cf8 <HAL_UART_IRQHandler+0x3dc>)
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fce4 	bl	80014d8 <HAL_DMA_Abort_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00e      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f990 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e00a      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f98c 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	e006      	b.n	8002b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f988 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b42:	e170      	b.n	8002e26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	bf00      	nop
    return;
 8002b46:	e16e      	b.n	8002e26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 814a 	bne.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8143 	beq.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 813c 	beq.w	8002de6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	f040 80b4 	bne.w	8002cfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8140 	beq.w	8002e2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f080 8139 	bcs.w	8002e2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	f000 8088 	beq.w	8002cde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1d9      	bne.n	8002bce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e1      	bne.n	8002c1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e3      	bne.n	8002c56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	f023 0310 	bic.w	r3, r3, #16
 8002cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e3      	bne.n	8002c9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fb8d 	bl	80013f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8b6 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf4:	e099      	b.n	8002e2a <HAL_UART_IRQHandler+0x50e>
 8002cf6:	bf00      	nop
 8002cf8:	0800308f 	.word	0x0800308f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 808b 	beq.w	8002e2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8086 	beq.w	8002e2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d46:	647a      	str	r2, [r7, #68]	; 0x44
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e3      	bne.n	8002d22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	623b      	str	r3, [r7, #32]
   return(result);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d7e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e3      	bne.n	8002d5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0310 	bic.w	r3, r3, #16
 8002db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002dc4:	61fa      	str	r2, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e3      	bne.n	8002da0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f83e 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002de4:	e023      	b.n	8002e2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_UART_IRQHandler+0x4ea>
 8002df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f959 	bl	80030b6 <UART_Transmit_IT>
    return;
 8002e04:	e014      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <HAL_UART_IRQHandler+0x514>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f999 	bl	8003156 <UART_EndTransmit_IT>
    return;
 8002e24:	e004      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
    return;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
      return;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_UART_IRQHandler+0x514>
      return;
 8002e2e:	bf00      	nop
  }
}
 8002e30:	37e8      	adds	r7, #232	; 0xe8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop

08002e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	e050      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d04c      	beq.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e98:	f7fe f9c0 	bl	800121c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d241      	bcs.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ec8:	637a      	str	r2, [r7, #52]	; 0x34
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	613b      	str	r3, [r7, #16]
   return(result);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efc:	623a      	str	r2, [r7, #32]
 8002efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	69f9      	ldr	r1, [r7, #28]
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e00f      	b.n	8002f4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d09f      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3740      	adds	r7, #64	; 0x40
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	; 0x22
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0220 	orr.w	r2, r2, #32
 8002fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b095      	sub	sp, #84	; 0x54
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	330c      	adds	r3, #12
 8002fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	61fb      	str	r3, [r7, #28]
   return(result);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b01      	cmp	r3, #1
 800303e:	d119      	bne.n	8003074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f023 0310 	bic.w	r3, r3, #16
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003060:	61ba      	str	r2, [r7, #24]
 8003062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	613b      	str	r3, [r7, #16]
   return(result);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003082:	bf00      	nop
 8003084:	3754      	adds	r7, #84	; 0x54
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fecf 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b21      	cmp	r3, #33	; 0x21
 80030c8:	d13e      	bne.n	8003148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d114      	bne.n	80030fe <UART_Transmit_IT+0x48>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d110      	bne.n	80030fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	e008      	b.n	8003110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6211      	str	r1, [r2, #32]
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4619      	mov	r1, r3
 800311e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10f      	bne.n	8003144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fe5e 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08c      	sub	sp, #48	; 0x30
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b22      	cmp	r3, #34	; 0x22
 8003198:	f040 80ab 	bne.w	80032f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d117      	bne.n	80031d6 <UART_Receive_IT+0x50>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
 80031d4:	e026      	b.n	8003224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d007      	beq.n	80031fa <UART_Receive_IT+0x74>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <UART_Receive_IT+0x82>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e008      	b.n	800321a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003214:	b2da      	uxtb	r2, r3
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003234:	2b00      	cmp	r3, #0
 8003236:	d15a      	bne.n	80032ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0220 	bic.w	r2, r2, #32
 8003246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	2b01      	cmp	r3, #1
 8003276:	d135      	bne.n	80032e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	613b      	str	r3, [r7, #16]
   return(result);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f023 0310 	bic.w	r3, r3, #16
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	623a      	str	r2, [r7, #32]
 80032a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	69f9      	ldr	r1, [r7, #28]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e5      	bne.n	800327e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d10a      	bne.n	80032d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff fdbf 	bl	8002e60 <HAL_UARTEx_RxEventCallback>
 80032e2:	e002      	b.n	80032ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fa43 	bl	8000770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e002      	b.n	80032f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3730      	adds	r7, #48	; 0x30
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003300:	b09f      	sub	sp, #124	; 0x7c
 8003302:	af00      	add	r7, sp, #0
 8003304:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	ea40 0301 	orr.w	r3, r0, r1
 800331c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	431a      	orrs	r2, r3
 8003328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	431a      	orrs	r2, r3
 800332e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4313      	orrs	r3, r2
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334a:	430b      	orrs	r3, r1
 800334c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800334e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	6999      	ldr	r1, [r3, #24]
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	ea40 0301 	orr.w	r3, r0, r1
 8003364:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4bc5      	ldr	r3, [pc, #788]	; (8003680 <UART_SetConfig+0x384>)
 800336c:	429a      	cmp	r2, r3
 800336e:	d004      	beq.n	800337a <UART_SetConfig+0x7e>
 8003370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4bc3      	ldr	r3, [pc, #780]	; (8003684 <UART_SetConfig+0x388>)
 8003376:	429a      	cmp	r2, r3
 8003378:	d103      	bne.n	8003382 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800337a:	f7fe fecb 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 800337e:	6778      	str	r0, [r7, #116]	; 0x74
 8003380:	e002      	b.n	8003388 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003382:	f7fe feb3 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8003386:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003390:	f040 80b6 	bne.w	8003500 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003396:	461c      	mov	r4, r3
 8003398:	f04f 0500 	mov.w	r5, #0
 800339c:	4622      	mov	r2, r4
 800339e:	462b      	mov	r3, r5
 80033a0:	1891      	adds	r1, r2, r2
 80033a2:	6439      	str	r1, [r7, #64]	; 0x40
 80033a4:	415b      	adcs	r3, r3
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
 80033a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ac:	1912      	adds	r2, r2, r4
 80033ae:	eb45 0303 	adc.w	r3, r5, r3
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	00d9      	lsls	r1, r3, #3
 80033bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c0:	00d0      	lsls	r0, r2, #3
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	1911      	adds	r1, r2, r4
 80033c8:	6639      	str	r1, [r7, #96]	; 0x60
 80033ca:	416b      	adcs	r3, r5
 80033cc:	667b      	str	r3, [r7, #100]	; 0x64
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	63b9      	str	r1, [r7, #56]	; 0x38
 80033dc:	415b      	adcs	r3, r3
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80033e8:	f7fc fefa 	bl	80001e0 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4ba5      	ldr	r3, [pc, #660]	; (8003688 <UART_SetConfig+0x38c>)
 80033f2:	fba3 2302 	umull	r2, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	011e      	lsls	r6, r3, #4
 80033fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fc:	461c      	mov	r4, r3
 80033fe:	f04f 0500 	mov.w	r5, #0
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	1891      	adds	r1, r2, r2
 8003408:	6339      	str	r1, [r7, #48]	; 0x30
 800340a:	415b      	adcs	r3, r3
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
 800340e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003412:	1912      	adds	r2, r2, r4
 8003414:	eb45 0303 	adc.w	r3, r5, r3
 8003418:	f04f 0000 	mov.w	r0, #0
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	00d9      	lsls	r1, r3, #3
 8003422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003426:	00d0      	lsls	r0, r2, #3
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	1911      	adds	r1, r2, r4
 800342e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003430:	416b      	adcs	r3, r5
 8003432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	461a      	mov	r2, r3
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	1891      	adds	r1, r2, r2
 8003440:	62b9      	str	r1, [r7, #40]	; 0x28
 8003442:	415b      	adcs	r3, r3
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800344e:	f7fc fec7 	bl	80001e0 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4b8c      	ldr	r3, [pc, #560]	; (8003688 <UART_SetConfig+0x38c>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	2164      	movs	r1, #100	; 0x64
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	3332      	adds	r3, #50	; 0x32
 800346a:	4a87      	ldr	r2, [pc, #540]	; (8003688 <UART_SetConfig+0x38c>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003478:	441e      	add	r6, r3
 800347a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347c:	4618      	mov	r0, r3
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	1894      	adds	r4, r2, r2
 8003488:	623c      	str	r4, [r7, #32]
 800348a:	415b      	adcs	r3, r3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003492:	1812      	adds	r2, r2, r0
 8003494:	eb41 0303 	adc.w	r3, r1, r3
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	f04f 0500 	mov.w	r5, #0
 80034a0:	00dd      	lsls	r5, r3, #3
 80034a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034a6:	00d4      	lsls	r4, r2, #3
 80034a8:	4622      	mov	r2, r4
 80034aa:	462b      	mov	r3, r5
 80034ac:	1814      	adds	r4, r2, r0
 80034ae:	653c      	str	r4, [r7, #80]	; 0x50
 80034b0:	414b      	adcs	r3, r1
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	461a      	mov	r2, r3
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	61b9      	str	r1, [r7, #24]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80034ce:	f7fc fe87 	bl	80001e0 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <UART_SetConfig+0x38c>)
 80034d8:	fba3 1302 	umull	r1, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2164      	movs	r1, #100	; 0x64
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a67      	ldr	r2, [pc, #412]	; (8003688 <UART_SetConfig+0x38c>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 0207 	and.w	r2, r3, #7
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4432      	add	r2, r6
 80034fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034fe:	e0b9      	b.n	8003674 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003502:	461c      	mov	r4, r3
 8003504:	f04f 0500 	mov.w	r5, #0
 8003508:	4622      	mov	r2, r4
 800350a:	462b      	mov	r3, r5
 800350c:	1891      	adds	r1, r2, r2
 800350e:	6139      	str	r1, [r7, #16]
 8003510:	415b      	adcs	r3, r3
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003518:	1912      	adds	r2, r2, r4
 800351a:	eb45 0303 	adc.w	r3, r5, r3
 800351e:	f04f 0000 	mov.w	r0, #0
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	00d9      	lsls	r1, r3, #3
 8003528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800352c:	00d0      	lsls	r0, r2, #3
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	eb12 0804 	adds.w	r8, r2, r4
 8003536:	eb43 0905 	adc.w	r9, r3, r5
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	008b      	lsls	r3, r1, #2
 800354e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003552:	0082      	lsls	r2, r0, #2
 8003554:	4640      	mov	r0, r8
 8003556:	4649      	mov	r1, r9
 8003558:	f7fc fe42 	bl	80001e0 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4b49      	ldr	r3, [pc, #292]	; (8003688 <UART_SetConfig+0x38c>)
 8003562:	fba3 2302 	umull	r2, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	011e      	lsls	r6, r3, #4
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	4618      	mov	r0, r3
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	1894      	adds	r4, r2, r2
 8003578:	60bc      	str	r4, [r7, #8]
 800357a:	415b      	adcs	r3, r3
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003582:	1812      	adds	r2, r2, r0
 8003584:	eb41 0303 	adc.w	r3, r1, r3
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	f04f 0500 	mov.w	r5, #0
 8003590:	00dd      	lsls	r5, r3, #3
 8003592:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003596:	00d4      	lsls	r4, r2, #3
 8003598:	4622      	mov	r2, r4
 800359a:	462b      	mov	r3, r5
 800359c:	1814      	adds	r4, r2, r0
 800359e:	64bc      	str	r4, [r7, #72]	; 0x48
 80035a0:	414b      	adcs	r3, r1
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035bc:	0082      	lsls	r2, r0, #2
 80035be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035c2:	f7fc fe0d 	bl	80001e0 <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <UART_SetConfig+0x38c>)
 80035cc:	fba3 1302 	umull	r1, r3, r3, r2
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	2164      	movs	r1, #100	; 0x64
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	3332      	adds	r3, #50	; 0x32
 80035de:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <UART_SetConfig+0x38c>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ea:	441e      	add	r6, r3
 80035ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ee:	4618      	mov	r0, r3
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	1894      	adds	r4, r2, r2
 80035fa:	603c      	str	r4, [r7, #0]
 80035fc:	415b      	adcs	r3, r3
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003604:	1812      	adds	r2, r2, r0
 8003606:	eb41 0303 	adc.w	r3, r1, r3
 800360a:	f04f 0400 	mov.w	r4, #0
 800360e:	f04f 0500 	mov.w	r5, #0
 8003612:	00dd      	lsls	r5, r3, #3
 8003614:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003618:	00d4      	lsls	r4, r2, #3
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	eb12 0a00 	adds.w	sl, r2, r0
 8003622:	eb43 0b01 	adc.w	fp, r3, r1
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	008b      	lsls	r3, r1, #2
 800363a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800363e:	0082      	lsls	r2, r0, #2
 8003640:	4650      	mov	r0, sl
 8003642:	4659      	mov	r1, fp
 8003644:	f7fc fdcc 	bl	80001e0 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <UART_SetConfig+0x38c>)
 800364e:	fba3 1302 	umull	r1, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2164      	movs	r1, #100	; 0x64
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	; 0x32
 8003660:	4a09      	ldr	r2, [pc, #36]	; (8003688 <UART_SetConfig+0x38c>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 020f 	and.w	r2, r3, #15
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4432      	add	r2, r6
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	377c      	adds	r7, #124	; 0x7c
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	40011000 	.word	0x40011000
 8003684:	40011400 	.word	0x40011400
 8003688:	51eb851f 	.word	0x51eb851f

0800368c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f103 0208 	add.w	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f04f 32ff 	mov.w	r2, #4294967295
 80036a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f103 0208 	add.w	r2, r3, #8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f103 0208 	add.w	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d103      	bne.n	800374e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e00c      	b.n	8003768 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3308      	adds	r3, #8
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e002      	b.n	800375c <vListInsert+0x2e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d2f6      	bcs.n	8003756 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6852      	ldr	r2, [r2, #4]
 80037c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d103      	bne.n	80037d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800381e:	f001 fda9 	bl	8005374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d114      	bne.n	800389e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01a      	beq.n	80038b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f86d 	bl	8004960 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <xQueueGenericReset+0xcc>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	e009      	b.n	80038b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3310      	adds	r3, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fef2 	bl	800368c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff feed 	bl	800368c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038b2:	f001 fd8f 	bl	80053d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	e000ed04 	.word	0xe000ed04

080038c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3348      	adds	r3, #72	; 0x48
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fe5b 	bl	80055b8 <pvPortMalloc>
 8003902:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3348      	adds	r3, #72	; 0x48
 8003912:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800391c:	79fa      	ldrb	r2, [r7, #7]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f805 	bl	8003938 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800392e:	69bb      	ldr	r3, [r7, #24]
	}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e002      	b.n	800395a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003966:	2101      	movs	r1, #1
 8003968:	69b8      	ldr	r0, [r7, #24]
 800396a:	f7ff ff43 	bl	80037f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	613b      	str	r3, [r7, #16]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90a      	bls.n	80039ba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60fb      	str	r3, [r7, #12]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80039ba:	2202      	movs	r2, #2
 80039bc:	2100      	movs	r1, #0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ff80 	bl	80038c4 <xQueueGenericCreate>
 80039c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80039d2:	697b      	ldr	r3, [r7, #20]
	}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xQueueGenericSend+0x32>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <xQueueGenericSend+0x40>
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <xQueueGenericSend+0x44>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <xQueueGenericSend+0x46>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xQueueGenericSend+0x60>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x6e>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSend+0x72>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSend+0x74>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6a:	f001 f935 	bl	8004cd8 <xTaskGetSchedulerState>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <xQueueGenericSend+0x9e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xQueueGenericSend+0xa2>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueGenericSend+0xa4>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	61fb      	str	r3, [r7, #28]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9a:	f001 fc6b 	bl	8005374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <xQueueGenericSend+0xd4>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d129      	bne.n	8003b04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 fa5f 	bl	8003f78 <prvCopyDataToQueue>
 8003aba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ff49 	bl	8004960 <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	e00a      	b.n	8003afc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003afc:	f001 fc6a 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e063      	b.n	8003bcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0a:	f001 fc63 	bl	80053d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e05c      	b.n	8003bcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 ff81 	bl	8004a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b26:	f001 fc55 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2a:	f000 fd37 	bl	800459c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2e:	f001 fc21 	bl	8005374 <vPortEnterCritical>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d103      	bne.n	8003b48 <xQueueGenericSend+0x16c>
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d103      	bne.n	8003b5e <xQueueGenericSend+0x182>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5e:	f001 fc39 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b62:	1d3a      	adds	r2, r7, #4
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 ff70 	bl	8004a50 <xTaskCheckForTimeOut>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d124      	bne.n	8003bc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b78:	f000 fad0 	bl	800411c <prvIsQueueFull>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	3310      	adds	r3, #16
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fec4 	bl	8004918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b92:	f000 fa5b 	bl	800404c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b96:	f000 fd0f 	bl	80045b8 <xTaskResumeAll>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af7c 	bne.w	8003a9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	e772      	b.n	8003a9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f000 fa49 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bba:	f000 fcfd 	bl	80045b8 <xTaskResumeAll>
 8003bbe:	e76c      	b.n	8003a9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc2:	f000 fa43 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc6:	f000 fcf7 	bl	80045b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3738      	adds	r7, #56	; 0x38
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	623b      	str	r3, [r7, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61fb      	str	r3, [r7, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <xQueueGiveFromISR+0x58>
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <xQueueGiveFromISR+0x5c>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <xQueueGiveFromISR+0x5e>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	61bb      	str	r3, [r7, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c50:	f001 fc72 	bl	8005538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c54:	f3ef 8211 	mrs	r2, BASEPRI
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	617a      	str	r2, [r7, #20]
 8003c6a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c6c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d22b      	bcs.n	8003cd8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d112      	bne.n	8003cc2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d016      	beq.n	8003cd2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fe59 	bl	8004960 <xTaskRemoveFromEventList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e007      	b.n	8003cd2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	b25a      	sxtb	r2, r3
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd6:	e001      	b.n	8003cdc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ce6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3738      	adds	r7, #56	; 0x38
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	; 0x38
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	623b      	str	r3, [r7, #32]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	61fb      	str	r3, [r7, #28]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d44:	f000 ffc8 	bl	8004cd8 <xTaskGetSchedulerState>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <xQueueSemaphoreTake+0x60>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <xQueueSemaphoreTake+0x64>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <xQueueSemaphoreTake+0x66>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	61bb      	str	r3, [r7, #24]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d74:	f001 fafe 	bl	8005374 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d024      	beq.n	8003dce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d94:	f001 f948 	bl	8005028 <pvTaskIncrementMutexHeldCount>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00f      	beq.n	8003dc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	3310      	adds	r3, #16
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fdd8 	bl	8004960 <xTaskRemoveFromEventList>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003db6:	4b54      	ldr	r3, [pc, #336]	; (8003f08 <xQueueSemaphoreTake+0x214>)
 8003db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dc6:	f001 fb05 	bl	80053d4 <vPortExitCritical>
				return pdPASS;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e097      	b.n	8003efe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d111      	bne.n	8003df8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	617b      	str	r3, [r7, #20]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003df0:	f001 faf0 	bl	80053d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e082      	b.n	8003efe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fe0e 	bl	8004a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e0c:	f001 fae2 	bl	80053d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e10:	f000 fbc4 	bl	800459c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e14:	f001 faae 	bl	8005374 <vPortEnterCritical>
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d103      	bne.n	8003e2e <xQueueSemaphoreTake+0x13a>
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d103      	bne.n	8003e44 <xQueueSemaphoreTake+0x150>
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e44:	f001 fac6 	bl	80053d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e48:	463a      	mov	r2, r7
 8003e4a:	f107 030c 	add.w	r3, r7, #12
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fdfd 	bl	8004a50 <xTaskCheckForTimeOut>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d132      	bne.n	8003ec2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e5e:	f000 f947 	bl	80040f0 <prvIsQueueEmpty>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d026      	beq.n	8003eb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e70:	f001 fa80 	bl	8005374 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 ff4b 	bl	8004d14 <xTaskPriorityInherit>
 8003e7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e80:	f001 faa8 	bl	80053d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fd43 	bl	8004918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e94:	f000 f8da 	bl	800404c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e98:	f000 fb8e 	bl	80045b8 <xTaskResumeAll>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f47f af68 	bne.w	8003d74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <xQueueSemaphoreTake+0x214>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	e75e      	b.n	8003d74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eb8:	f000 f8c8 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ebc:	f000 fb7c 	bl	80045b8 <xTaskResumeAll>
 8003ec0:	e758      	b.n	8003d74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ec4:	f000 f8c2 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ec8:	f000 fb76 	bl	80045b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ece:	f000 f90f 	bl	80040f0 <prvIsQueueEmpty>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f43f af4d 	beq.w	8003d74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ee0:	f001 fa48 	bl	8005374 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ee6:	f000 f82f 	bl	8003f48 <prvGetDisinheritPriorityAfterTimeout>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f80a 	bl	8004f0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ef8:	f001 fa6c 	bl	80053d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003efc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3738      	adds	r7, #56	; 0x38
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60bb      	str	r3, [r7, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003f30:	f001 fa20 	bl	8005374 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fa4b 	bl	80053d4 <vPortExitCritical>

	return uxReturn;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1c3 0307 	rsb	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e001      	b.n	8003f6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14d      	bne.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 ff2c 	bl	8004e00 <xTaskPriorityDisinherit>
 8003fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e043      	b.n	800403a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d119      	bne.n	8003fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6858      	ldr	r0, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	f001 fd20 	bl	8005a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d32b      	bcc.n	800403a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e026      	b.n	800403a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68d8      	ldr	r0, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	f001 fd06 	bl	8005a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d207      	bcs.n	8004028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	425b      	negs	r3, r3
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d105      	bne.n	800403a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3b01      	subs	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 f98e 	bl	8005374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800405e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004060:	e011      	b.n	8004086 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fc76 	bl	8004960 <xTaskRemoveFromEventList>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800407a:	f000 fd4b 	bl	8004b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3b01      	subs	r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	dce9      	bgt.n	8004062 <prvUnlockQueue+0x16>
 800408e:	e000      	b.n	8004092 <prvUnlockQueue+0x46>
					break;
 8004090:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800409a:	f001 f99b 	bl	80053d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800409e:	f001 f969 	bl	8005374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040aa:	e011      	b.n	80040d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3310      	adds	r3, #16
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fc51 	bl	8004960 <xTaskRemoveFromEventList>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040c4:	f000 fd26 	bl	8004b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dce9      	bgt.n	80040ac <prvUnlockQueue+0x60>
 80040d8:	e000      	b.n	80040dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	22ff      	movs	r2, #255	; 0xff
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040e4:	f001 f976 	bl	80053d4 <vPortExitCritical>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f8:	f001 f93c 	bl	8005374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e001      	b.n	800410e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800410e:	f001 f961 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004124:	f001 f926 	bl	8005374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	429a      	cmp	r2, r3
 8004132:	d102      	bne.n	800413a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 f949 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af04      	add	r7, sp, #16
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	623b      	str	r3, [r7, #32]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xTaskCreateStatic+0x46>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61fb      	str	r3, [r7, #28]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004192:	2354      	movs	r3, #84	; 0x54
 8004194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b54      	cmp	r3, #84	; 0x54
 800419a:	d00a      	beq.n	80041b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	61bb      	str	r3, [r7, #24]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01e      	beq.n	80041f8 <xTaskCreateStatic+0xac>
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041d2:	2300      	movs	r3, #0
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f850 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f2:	f000 f8d5 	bl	80043a0 <prvAddNewTaskToReadyList>
 80041f6:	e001      	b.n	80041fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041fc:	697b      	ldr	r3, [r7, #20]
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	; 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08c      	sub	sp, #48	; 0x30
 800420a:	af04      	add	r7, sp, #16
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f9cc 	bl	80055b8 <pvPortMalloc>
 8004220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004228:	2054      	movs	r0, #84	; 0x54
 800422a:	f001 f9c5 	bl	80055b8 <pvPortMalloc>
 800422e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
 800423c:	e005      	b.n	800424a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f001 fa86 	bl	8005750 <vPortFree>
 8004244:	e001      	b.n	800424a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	2300      	movs	r3, #0
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f80e 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f000 f893 	bl	80043a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e002      	b.n	8004286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004286:	69bb      	ldr	r3, [r7, #24]
	}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a8:	3b01      	subs	r3, #1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01f      	beq.n	800431e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e012      	b.n	800430a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	7819      	ldrb	r1, [r3, #0]
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	3334      	adds	r3, #52	; 0x34
 80042f4:	460a      	mov	r2, r1
 80042f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b0f      	cmp	r3, #15
 800430e:	d9e9      	bls.n	80042e4 <prvInitialiseNewTask+0x54>
 8004310:	e000      	b.n	8004314 <prvInitialiseNewTask+0x84>
			{
				break;
 8004312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800431c:	e003      	b.n	8004326 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2b06      	cmp	r3, #6
 800432a:	d901      	bls.n	8004330 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800432c:	2306      	movs	r3, #6
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f9c0 	bl	80036cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3318      	adds	r3, #24
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff f9bb 	bl	80036cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	f1c3 0207 	rsb	r2, r3, #7
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	69b8      	ldr	r0, [r7, #24]
 8004380:	f000 fecc 	bl	800511c <pxPortInitialiseStack>
 8004384:	4602      	mov	r2, r0
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a8:	f000 ffe4 	bl	8005374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a29      	ldr	r2, [pc, #164]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d110      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043cc:	f000 fbc6 	bl	8004b5c <prvInitialiseTaskLists>
 80043d0:	e00d      	b.n	80043ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d802      	bhi.n	80043ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <prvAddNewTaskToReadyList+0xcc>)
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f7ff f960 	bl	80036e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004426:	f000 ffd5 	bl	80053d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <prvAddNewTaskToReadyList+0xd0>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000394 	.word	0x20000394
 800445c:	20000294 	.word	0x20000294
 8004460:	200003a0 	.word	0x200003a0
 8004464:	200003b0 	.word	0x200003b0
 8004468:	2000039c 	.word	0x2000039c
 800446c:	20000298 	.word	0x20000298
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <vTaskDelay+0x60>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <vTaskDelay+0x30>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60bb      	str	r3, [r7, #8]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044a4:	f000 f87a 	bl	800459c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044a8:	2100      	movs	r1, #0
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fdd0 	bl	8005050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044b0:	f000 f882 	bl	80045b8 <xTaskResumeAll>
 80044b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <vTaskDelay+0x64>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	200003bc 	.word	0x200003bc
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ea:	463a      	mov	r2, r7
 80044ec:	1d39      	adds	r1, r7, #4
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fb fff0 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	9202      	str	r2, [sp, #8]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	460a      	mov	r2, r1
 800450a:	491e      	ldr	r1, [pc, #120]	; (8004584 <vTaskStartScheduler+0xa8>)
 800450c:	481e      	ldr	r0, [pc, #120]	; (8004588 <vTaskStartScheduler+0xac>)
 800450e:	f7ff fe1d 	bl	800414c <xTaskCreateStatic>
 8004512:	4603      	mov	r3, r0
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <vTaskStartScheduler+0xb0>)
 8004516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <vTaskStartScheduler+0xb0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e001      	b.n	800452a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d116      	bne.n	800455e <vTaskStartScheduler+0x82>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
}
 8004542:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <vTaskStartScheduler+0xb4>)
 8004546:	f04f 32ff 	mov.w	r2, #4294967295
 800454a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <vTaskStartScheduler+0xb8>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <vTaskStartScheduler+0xbc>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004558:	f000 fe6a 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800455c:	e00e      	b.n	800457c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d10a      	bne.n	800457c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60fb      	str	r3, [r7, #12]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <vTaskStartScheduler+0x9e>
}
 800457c:	bf00      	nop
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08005d00 	.word	0x08005d00
 8004588:	08004b2d 	.word	0x08004b2d
 800458c:	200003b8 	.word	0x200003b8
 8004590:	200003b4 	.word	0x200003b4
 8004594:	200003a0 	.word	0x200003a0
 8004598:	20000398 	.word	0x20000398

0800459c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <vTaskSuspendAll+0x18>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <vTaskSuspendAll+0x18>)
 80045a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045aa:	bf00      	nop
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	200003bc 	.word	0x200003bc

080045b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045c6:	4b41      	ldr	r3, [pc, #260]	; (80046cc <xTaskResumeAll+0x114>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	603b      	str	r3, [r7, #0]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045e4:	f000 fec6 	bl	8005374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <xTaskResumeAll+0x114>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <xTaskResumeAll+0x114>)
 80045f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <xTaskResumeAll+0x114>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d161      	bne.n	80046be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045fa:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <xTaskResumeAll+0x118>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d05d      	beq.n	80046be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004602:	e02e      	b.n	8004662 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <xTaskResumeAll+0x11c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3318      	adds	r3, #24
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f8c5 	bl	80037a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3304      	adds	r3, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff f8c0 	bl	80037a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <xTaskResumeAll+0x120>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <xTaskResumeAll+0x120>)
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a27      	ldr	r2, [pc, #156]	; (80046dc <xTaskResumeAll+0x124>)
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7ff f84c 	bl	80036e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <xTaskResumeAll+0x128>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	429a      	cmp	r2, r3
 800465a:	d302      	bcc.n	8004662 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <xTaskResumeAll+0x12c>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <xTaskResumeAll+0x11c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cc      	bne.n	8004604 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004670:	f000 fb12 	bl	8004c98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004674:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xTaskResumeAll+0x130>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004680:	f000 f836 	bl	80046f0 <xTaskIncrementTick>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <xTaskResumeAll+0x12c>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f1      	bne.n	8004680 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <xTaskResumeAll+0x130>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <xTaskResumeAll+0x12c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <xTaskResumeAll+0x134>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046be:	f000 fe89 	bl	80053d4 <vPortExitCritical>

	return xAlreadyYielded;
 80046c2:	68bb      	ldr	r3, [r7, #8]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	200003bc 	.word	0x200003bc
 80046d0:	20000394 	.word	0x20000394
 80046d4:	20000354 	.word	0x20000354
 80046d8:	2000039c 	.word	0x2000039c
 80046dc:	20000298 	.word	0x20000298
 80046e0:	20000294 	.word	0x20000294
 80046e4:	200003a8 	.word	0x200003a8
 80046e8:	200003a4 	.word	0x200003a4
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fa:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <xTaskIncrementTick+0x144>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 808e 	bne.w	8004820 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004704:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <xTaskIncrementTick+0x148>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <xTaskIncrementTick+0x148>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d120      	bne.n	800475a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004718:	4b48      	ldr	r3, [pc, #288]	; (800483c <xTaskIncrementTick+0x14c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <xTaskIncrementTick+0x48>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	603b      	str	r3, [r7, #0]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xTaskIncrementTick+0x46>
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <xTaskIncrementTick+0x14c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	4b40      	ldr	r3, [pc, #256]	; (8004840 <xTaskIncrementTick+0x150>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3e      	ldr	r2, [pc, #248]	; (800483c <xTaskIncrementTick+0x14c>)
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <xTaskIncrementTick+0x150>)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <xTaskIncrementTick+0x154>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <xTaskIncrementTick+0x154>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f000 fa9f 	bl	8004c98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <xTaskIncrementTick+0x158>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d348      	bcc.n	80047f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <xTaskIncrementTick+0x14c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <xTaskIncrementTick+0x158>)
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	601a      	str	r2, [r3, #0]
					break;
 8004776:	e03e      	b.n	80047f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <xTaskIncrementTick+0x14c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d203      	bcs.n	8004798 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004790:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <xTaskIncrementTick+0x158>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004796:	e02e      	b.n	80047f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe ffff 	bl	80037a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fff6 	bl	80037a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <xTaskIncrementTick+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <xTaskIncrementTick+0x15c>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <xTaskIncrementTick+0x160>)
 80047d4:	441a      	add	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe ff82 	bl	80036e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <xTaskIncrementTick+0x164>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3b9      	bcc.n	8004764 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f4:	e7b6      	b.n	8004764 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <xTaskIncrementTick+0x164>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	4914      	ldr	r1, [pc, #80]	; (8004850 <xTaskIncrementTick+0x160>)
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d901      	bls.n	8004812 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <xTaskIncrementTick+0x168>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e004      	b.n	800482a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <xTaskIncrementTick+0x16c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	4a0d      	ldr	r2, [pc, #52]	; (800485c <xTaskIncrementTick+0x16c>)
 8004828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200003bc 	.word	0x200003bc
 8004838:	20000398 	.word	0x20000398
 800483c:	2000034c 	.word	0x2000034c
 8004840:	20000350 	.word	0x20000350
 8004844:	200003ac 	.word	0x200003ac
 8004848:	200003b4 	.word	0x200003b4
 800484c:	2000039c 	.word	0x2000039c
 8004850:	20000298 	.word	0x20000298
 8004854:	20000294 	.word	0x20000294
 8004858:	200003a8 	.word	0x200003a8
 800485c:	200003a4 	.word	0x200003a4

08004860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004866:	4b27      	ldr	r3, [pc, #156]	; (8004904 <vTaskSwitchContext+0xa4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <vTaskSwitchContext+0xa8>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004874:	e03f      	b.n	80048f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <vTaskSwitchContext+0xa8>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487c:	4b23      	ldr	r3, [pc, #140]	; (800490c <vTaskSwitchContext+0xac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	f1c3 031f 	rsb	r3, r3, #31
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	491f      	ldr	r1, [pc, #124]	; (8004910 <vTaskSwitchContext+0xb0>)
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	607b      	str	r3, [r7, #4]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <vTaskSwitchContext+0x5a>
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <vTaskSwitchContext+0xb0>)
 80048c8:	4413      	add	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3308      	adds	r3, #8
 80048de:	429a      	cmp	r2, r3
 80048e0:	d104      	bne.n	80048ec <vTaskSwitchContext+0x8c>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4a08      	ldr	r2, [pc, #32]	; (8004914 <vTaskSwitchContext+0xb4>)
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	200003bc 	.word	0x200003bc
 8004908:	200003a8 	.word	0x200003a8
 800490c:	2000039c 	.word	0x2000039c
 8004910:	20000298 	.word	0x20000298
 8004914:	20000294 	.word	0x20000294

08004918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	60fb      	str	r3, [r7, #12]
}
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <vTaskPlaceOnEventList+0x44>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3318      	adds	r3, #24
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fe fef1 	bl	800372e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800494c:	2101      	movs	r1, #1
 800494e:	6838      	ldr	r0, [r7, #0]
 8004950:	f000 fb7e 	bl	8005050 <prvAddCurrentTaskToDelayedList>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000294 	.word	0x20000294

08004960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60fb      	str	r3, [r7, #12]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	3318      	adds	r3, #24
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe ff05 	bl	80037a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <xTaskRemoveFromEventList+0xac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11c      	bne.n	80049d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fefc 	bl	80037a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2201      	movs	r2, #1
 80049ae:	409a      	lsls	r2, r3
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <xTaskRemoveFromEventList+0xb0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <xTaskRemoveFromEventList+0xb0>)
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <xTaskRemoveFromEventList+0xb4>)
 80049c8:	441a      	add	r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7fe fe88 	bl	80036e6 <vListInsertEnd>
 80049d6:	e005      	b.n	80049e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	3318      	adds	r3, #24
 80049dc:	4619      	mov	r1, r3
 80049de:	480e      	ldr	r0, [pc, #56]	; (8004a18 <xTaskRemoveFromEventList+0xb8>)
 80049e0:	f7fe fe81 	bl	80036e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <xTaskRemoveFromEventList+0xbc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d905      	bls.n	80049fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <xTaskRemoveFromEventList+0xc0>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e001      	b.n	8004a02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200003bc 	.word	0x200003bc
 8004a10:	2000039c 	.word	0x2000039c
 8004a14:	20000298 	.word	0x20000298
 8004a18:	20000354 	.word	0x20000354
 8004a1c:	20000294 	.word	0x20000294
 8004a20:	200003a8 	.word	0x200003a8

08004a24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <vTaskInternalSetTimeOutState+0x24>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <vTaskInternalSetTimeOutState+0x28>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	605a      	str	r2, [r3, #4]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	200003ac 	.word	0x200003ac
 8004a4c:	20000398 	.word	0x20000398

08004a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a92:	f000 fc6f 	bl	8005374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <xTaskCheckForTimeOut+0xbc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d102      	bne.n	8004ab6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e023      	b.n	8004afe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <xTaskCheckForTimeOut+0xc0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d007      	beq.n	8004ad2 <xTaskCheckForTimeOut+0x82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d302      	bcc.n	8004ad2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e015      	b.n	8004afe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d20b      	bcs.n	8004af4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff9b 	bl	8004a24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e004      	b.n	8004afe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004afe:	f000 fc69 	bl	80053d4 <vPortExitCritical>

	return xReturn;
 8004b02:	69fb      	ldr	r3, [r7, #28]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000398 	.word	0x20000398
 8004b10:	200003ac 	.word	0x200003ac

08004b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <vTaskMissedYield+0x14>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	200003a8 	.word	0x200003a8

08004b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b34:	f000 f852 	bl	8004bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <prvIdleTask+0x28>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d9f9      	bls.n	8004b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <prvIdleTask+0x2c>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b50:	e7f0      	b.n	8004b34 <prvIdleTask+0x8>
 8004b52:	bf00      	nop
 8004b54:	20000298 	.word	0x20000298
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	e00c      	b.n	8004b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <prvInitialiseTaskLists+0x60>)
 8004b74:	4413      	add	r3, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe fd88 	bl	800368c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d9ef      	bls.n	8004b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b88:	480d      	ldr	r0, [pc, #52]	; (8004bc0 <prvInitialiseTaskLists+0x64>)
 8004b8a:	f7fe fd7f 	bl	800368c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b8e:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <prvInitialiseTaskLists+0x68>)
 8004b90:	f7fe fd7c 	bl	800368c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b94:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <prvInitialiseTaskLists+0x6c>)
 8004b96:	f7fe fd79 	bl	800368c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b9a:	480c      	ldr	r0, [pc, #48]	; (8004bcc <prvInitialiseTaskLists+0x70>)
 8004b9c:	f7fe fd76 	bl	800368c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ba0:	480b      	ldr	r0, [pc, #44]	; (8004bd0 <prvInitialiseTaskLists+0x74>)
 8004ba2:	f7fe fd73 	bl	800368c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <prvInitialiseTaskLists+0x78>)
 8004ba8:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <prvInitialiseTaskLists+0x64>)
 8004baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvInitialiseTaskLists+0x7c>)
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <prvInitialiseTaskLists+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000298 	.word	0x20000298
 8004bc0:	20000324 	.word	0x20000324
 8004bc4:	20000338 	.word	0x20000338
 8004bc8:	20000354 	.word	0x20000354
 8004bcc:	20000368 	.word	0x20000368
 8004bd0:	20000380 	.word	0x20000380
 8004bd4:	2000034c 	.word	0x2000034c
 8004bd8:	20000350 	.word	0x20000350

08004bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be2:	e019      	b.n	8004c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be4:	f000 fbc6 	bl	8005374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <prvCheckTasksWaitingTermination+0x50>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fdd3 	bl	80037a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <prvCheckTasksWaitingTermination+0x54>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <prvCheckTasksWaitingTermination+0x54>)
 8004c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <prvCheckTasksWaitingTermination+0x58>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <prvCheckTasksWaitingTermination+0x58>)
 8004c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c0e:	f000 fbe1 	bl	80053d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f810 	bl	8004c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <prvCheckTasksWaitingTermination+0x58>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e1      	bne.n	8004be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000368 	.word	0x20000368
 8004c30:	20000394 	.word	0x20000394
 8004c34:	2000037c 	.word	0x2000037c

08004c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fd7e 	bl	8005750 <vPortFree>
				vPortFree( pxTCB );
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fd7b 	bl	8005750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c5a:	e018      	b.n	8004c8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d103      	bne.n	8004c6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fd72 	bl	8005750 <vPortFree>
	}
 8004c6c:	e00f      	b.n	8004c8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d00a      	beq.n	8004c8e <prvDeleteTCB+0x56>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	60fb      	str	r3, [r7, #12]
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <prvDeleteTCB+0x54>
	}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <prvResetNextTaskUnblockTime+0x38>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8004caa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb0:	e008      	b.n	8004cc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <prvResetNextTaskUnblockTime+0x38>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8004cc2:	6013      	str	r3, [r2, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	2000034c 	.word	0x2000034c
 8004cd4:	200003b4 	.word	0x200003b4

08004cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <xTaskGetSchedulerState+0x34>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	e008      	b.n	8004cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <xTaskGetSchedulerState+0x38>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	e001      	b.n	8004cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cfe:	687b      	ldr	r3, [r7, #4]
	}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	200003a0 	.word	0x200003a0
 8004d10:	200003bc 	.word	0x200003bc

08004d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d05e      	beq.n	8004de8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <xTaskPriorityInherit+0xe0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d24e      	bcs.n	8004dd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	db06      	blt.n	8004d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d40:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <xTaskPriorityInherit+0xe0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f1c3 0207 	rsb	r2, r3, #7
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6959      	ldr	r1, [r3, #20]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <xTaskPriorityInherit+0xe4>)
 8004d60:	4413      	add	r3, r2
 8004d62:	4299      	cmp	r1, r3
 8004d64:	d12f      	bne.n	8004dc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fd18 	bl	80037a0 <uxListRemove>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43da      	mvns	r2, r3
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <xTaskPriorityInherit+0xe8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4013      	ands	r3, r2
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <xTaskPriorityInherit+0xe8>)
 8004d8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <xTaskPriorityInherit+0xe0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	4b17      	ldr	r3, [pc, #92]	; (8004dfc <xTaskPriorityInherit+0xe8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <xTaskPriorityInherit+0xe8>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <xTaskPriorityInherit+0xe4>)
 8004db6:	441a      	add	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe fc91 	bl	80036e6 <vListInsertEnd>
 8004dc4:	e004      	b.n	8004dd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <xTaskPriorityInherit+0xe0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e008      	b.n	8004de8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <xTaskPriorityInherit+0xe0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d201      	bcs.n	8004de8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de8:	68fb      	ldr	r3, [r7, #12]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000294 	.word	0x20000294
 8004df8:	20000298 	.word	0x20000298
 8004dfc:	2000039c 	.word	0x2000039c

08004e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06e      	beq.n	8004ef4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e16:	4b3a      	ldr	r3, [pc, #232]	; (8004f00 <xTaskPriorityDisinherit+0x100>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d00a      	beq.n	8004e36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60bb      	str	r3, [r7, #8]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d044      	beq.n	8004ef4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d140      	bne.n	8004ef4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fc92 	bl	80037a0 <uxListRemove>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d115      	bne.n	8004eae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	491f      	ldr	r1, [pc, #124]	; (8004f04 <xTaskPriorityDisinherit+0x104>)
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xTaskPriorityDisinherit+0xae>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <xTaskPriorityDisinherit+0x108>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <xTaskPriorityDisinherit+0x108>)
 8004eac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f1c3 0207 	rsb	r2, r3, #7
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <xTaskPriorityDisinherit+0x108>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <xTaskPriorityDisinherit+0x108>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <xTaskPriorityDisinherit+0x104>)
 8004ee2:	441a      	add	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fbfb 	bl	80036e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ef4:	697b      	ldr	r3, [r7, #20]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000294 	.word	0x20000294
 8004f04:	20000298 	.word	0x20000298
 8004f08:	2000039c 	.word	0x2000039c

08004f0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d077      	beq.n	8005014 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60fb      	str	r3, [r7, #12]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d902      	bls.n	8004f52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e002      	b.n	8004f58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d058      	beq.n	8005014 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d153      	bne.n	8005014 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d10a      	bne.n	8004f8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	db04      	blt.n	8004faa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f1c3 0207 	rsb	r2, r3, #7
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	6959      	ldr	r1, [r3, #20]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004fba:	4413      	add	r3, r2
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d129      	bne.n	8005014 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe fbeb 	bl	80037a0 <uxListRemove>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fe4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	2201      	movs	r2, #1
 8004fec:	409a      	lsls	r2, r3
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a06      	ldr	r2, [pc, #24]	; (8005020 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005006:	441a      	add	r2, r3
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7fe fb69 	bl	80036e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005014:	bf00      	nop
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000294 	.word	0x20000294
 8005020:	20000298 	.word	0x20000298
 8005024:	2000039c 	.word	0x2000039c

08005028 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <pvTaskIncrementMutexHeldCount+0x24>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <pvTaskIncrementMutexHeldCount+0x24>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503a:	3201      	adds	r2, #1
 800503c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <pvTaskIncrementMutexHeldCount+0x24>)
 8005040:	681b      	ldr	r3, [r3, #0]
	}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000294 	.word	0x20000294

08005050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <prvAddCurrentTaskToDelayedList+0xb0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fb9a 	bl	80037a0 <uxListRemove>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4013      	ands	r3, r2
 8005086:	4a20      	ldr	r2, [pc, #128]	; (8005108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005088:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d10a      	bne.n	80050a8 <prvAddCurrentTaskToDelayedList+0x58>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	481a      	ldr	r0, [pc, #104]	; (800510c <prvAddCurrentTaskToDelayedList+0xbc>)
 80050a2:	f7fe fb20 	bl	80036e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050a6:	e026      	b.n	80050f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050b0:	4b14      	ldr	r3, [pc, #80]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d209      	bcs.n	80050d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fe fb2e 	bl	800372e <vListInsert>
}
 80050d2:	e010      	b.n	80050f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fe fb24 	bl	800372e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d202      	bcs.n	80050f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050f0:	4a09      	ldr	r2, [pc, #36]	; (8005118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6013      	str	r3, [r2, #0]
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000398 	.word	0x20000398
 8005104:	20000294 	.word	0x20000294
 8005108:	2000039c 	.word	0x2000039c
 800510c:	20000380 	.word	0x20000380
 8005110:	20000350 	.word	0x20000350
 8005114:	2000034c 	.word	0x2000034c
 8005118:	200003b4 	.word	0x200003b4

0800511c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3b04      	subs	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3b04      	subs	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b04      	subs	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800514c:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <pxPortInitialiseStack+0x64>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b14      	subs	r3, #20
 8005156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b04      	subs	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f06f 0202 	mvn.w	r2, #2
 800516a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b20      	subs	r3, #32
 8005170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005172:	68fb      	ldr	r3, [r7, #12]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	08005185 	.word	0x08005185

08005184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <prvTaskExitError+0x54>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d00a      	beq.n	80051ae <prvTaskExitError+0x2a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvTaskExitError+0x28>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60bb      	str	r3, [r7, #8]
}
 80051c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c2:	bf00      	nop
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0fc      	beq.n	80051c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000018 	.word	0x20000018
 80051dc:	00000000 	.word	0x00000000

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	; (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005236:	4b46      	ldr	r3, [pc, #280]	; (8005350 <xPortStartScheduler+0x120>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a46      	ldr	r2, [pc, #280]	; (8005354 <xPortStartScheduler+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10a      	bne.n	8005256 <xPortStartScheduler+0x26>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	613b      	str	r3, [r7, #16]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005256:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <xPortStartScheduler+0x120>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3f      	ldr	r2, [pc, #252]	; (8005358 <xPortStartScheduler+0x128>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10a      	bne.n	8005276 <xPortStartScheduler+0x46>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60fb      	str	r3, [r7, #12]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005276:	4b39      	ldr	r3, [pc, #228]	; (800535c <xPortStartScheduler+0x12c>)
 8005278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <xPortStartScheduler+0x130>)
 800529c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <xPortStartScheduler+0x134>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a4:	e009      	b.n	80052ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052a6:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <xPortStartScheduler+0x134>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	4a2d      	ldr	r2, [pc, #180]	; (8005364 <xPortStartScheduler+0x134>)
 80052ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d0ef      	beq.n	80052a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <xPortStartScheduler+0x134>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1c3 0307 	rsb	r3, r3, #7
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d00a      	beq.n	80052e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60bb      	str	r3, [r7, #8]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <xPortStartScheduler+0x134>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <xPortStartScheduler+0x134>)
 80052f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <xPortStartScheduler+0x134>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052fa:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <xPortStartScheduler+0x134>)
 80052fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <xPortStartScheduler+0x138>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <xPortStartScheduler+0x138>)
 800530c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <xPortStartScheduler+0x138>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a14      	ldr	r2, [pc, #80]	; (8005368 <xPortStartScheduler+0x138>)
 8005318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800531c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800531e:	f000 f8dd 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <xPortStartScheduler+0x13c>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005328:	f000 f8fc 	bl	8005524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <xPortStartScheduler+0x140>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <xPortStartScheduler+0x140>)
 8005332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005338:	f7ff ff66 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800533c:	f7ff fa90 	bl	8004860 <vTaskSwitchContext>
	prvTaskExitError();
 8005340:	f7ff ff20 	bl	8005184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00
 8005354:	410fc271 	.word	0x410fc271
 8005358:	410fc270 	.word	0x410fc270
 800535c:	e000e400 	.word	0xe000e400
 8005360:	200003c0 	.word	0x200003c0
 8005364:	200003c4 	.word	0x200003c4
 8005368:	e000ed20 	.word	0xe000ed20
 800536c:	20000018 	.word	0x20000018
 8005370:	e000ef34 	.word	0xe000ef34

08005374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
}
 800538c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <vPortEnterCritical+0x58>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <vPortEnterCritical+0x58>)
 8005396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <vPortEnterCritical+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10f      	bne.n	80053c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <vPortEnterCritical+0x5c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	603b      	str	r3, [r7, #0]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <vPortEnterCritical+0x4a>
	}
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000018 	.word	0x20000018
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <vPortExitCritical+0x50>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <vPortExitCritical+0x24>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <vPortExitCritical+0x50>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <vPortExitCritical+0x50>)
 8005400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <vPortExitCritical+0x42>
 800540a:	2300      	movs	r3, #0
 800540c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f383 8811 	msr	BASEPRI, r3
}
 8005414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000018 	.word	0x20000018
	...

08005430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005430:	f3ef 8009 	mrs	r0, PSP
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <pxCurrentTCBConst>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f01e 0f10 	tst.w	lr, #16
 8005440:	bf08      	it	eq
 8005442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	6010      	str	r0, [r2, #0]
 800544c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005454:	f380 8811 	msr	BASEPRI, r0
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f7ff f9fe 	bl	8004860 <vTaskSwitchContext>
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	f380 8811 	msr	BASEPRI, r0
 800546c:	bc09      	pop	{r0, r3}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	f01e 0f10 	tst.w	lr, #16
 800547a:	bf08      	it	eq
 800547c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005480:	f380 8809 	msr	PSP, r0
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst>:
 8005490:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7ff f91d 	bl	80046f0 <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <SysTick_Handler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <vPortSetupTimerInterrupt+0x40>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <vPortSetupTimerInterrupt+0x44>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <vPortSetupTimerInterrupt+0x34>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010
 8005514:	e000e018 	.word	0xe000e018
 8005518:	2000000c 	.word	0x2000000c
 800551c:	10624dd3 	.word	0x10624dd3
 8005520:	e000e014 	.word	0xe000e014

08005524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005534 <vPortEnableVFP+0x10>
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800552e:	6001      	str	r1, [r0, #0]
 8005530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005532:	bf00      	nop
 8005534:	e000ed88 	.word	0xe000ed88

08005538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d914      	bls.n	8005574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <vPortValidateInterruptPriority+0x70>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <vPortValidateInterruptPriority+0x74>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	7afa      	ldrb	r2, [r7, #11]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20a      	bcs.n	8005574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <vPortValidateInterruptPriority+0x78>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <vPortValidateInterruptPriority+0x7c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d90a      	bls.n	800559a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	603b      	str	r3, [r7, #0]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <vPortValidateInterruptPriority+0x60>
	}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000e3f0 	.word	0xe000e3f0
 80055ac:	200003c0 	.word	0x200003c0
 80055b0:	e000ed0c 	.word	0xe000ed0c
 80055b4:	200003c4 	.word	0x200003c4

080055b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055c4:	f7fe ffea 	bl	800459c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055c8:	4b5b      	ldr	r3, [pc, #364]	; (8005738 <pvPortMalloc+0x180>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055d0:	f000 f920 	bl	8005814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <pvPortMalloc+0x184>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 8093 	bne.w	8005708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01d      	beq.n	8005624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055e8:	2208      	movs	r2, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d014      	beq.n	8005624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f023 0307 	bic.w	r3, r3, #7
 8005600:	3308      	adds	r3, #8
 8005602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <pvPortMalloc+0x6c>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	617b      	str	r3, [r7, #20]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d06e      	beq.n	8005708 <pvPortMalloc+0x150>
 800562a:	4b45      	ldr	r3, [pc, #276]	; (8005740 <pvPortMalloc+0x188>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d869      	bhi.n	8005708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <pvPortMalloc+0x18c>)
 8005636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005638:	4b42      	ldr	r3, [pc, #264]	; (8005744 <pvPortMalloc+0x18c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800563e:	e004      	b.n	800564a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <pvPortMalloc+0xa4>
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f1      	bne.n	8005640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800565c:	4b36      	ldr	r3, [pc, #216]	; (8005738 <pvPortMalloc+0x180>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	429a      	cmp	r2, r3
 8005664:	d050      	beq.n	8005708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2208      	movs	r2, #8
 800566c:	4413      	add	r3, r2
 800566e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	2308      	movs	r3, #8
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	429a      	cmp	r2, r3
 8005686:	d91f      	bls.n	80056c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <pvPortMalloc+0xf8>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	613b      	str	r3, [r7, #16]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056c2:	69b8      	ldr	r0, [r7, #24]
 80056c4:	f000 f908 	bl	80058d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <pvPortMalloc+0x188>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <pvPortMalloc+0x188>)
 80056d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <pvPortMalloc+0x188>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <pvPortMalloc+0x190>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d203      	bcs.n	80056ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <pvPortMalloc+0x188>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <pvPortMalloc+0x190>)
 80056e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <pvPortMalloc+0x184>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <pvPortMalloc+0x194>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <pvPortMalloc+0x194>)
 8005706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005708:	f7fe ff56 	bl	80045b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <pvPortMalloc+0x174>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60fb      	str	r3, [r7, #12]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <pvPortMalloc+0x172>
	return pvReturn;
 800572c:	69fb      	ldr	r3, [r7, #28]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3728      	adds	r7, #40	; 0x28
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20003fd0 	.word	0x20003fd0
 800573c:	20003fe4 	.word	0x20003fe4
 8005740:	20003fd4 	.word	0x20003fd4
 8005744:	20003fc8 	.word	0x20003fc8
 8005748:	20003fd8 	.word	0x20003fd8
 800574c:	20003fdc 	.word	0x20003fdc

08005750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04d      	beq.n	80057fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005762:	2308      	movs	r3, #8
 8005764:	425b      	negs	r3, r3
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	4b24      	ldr	r3, [pc, #144]	; (8005808 <vPortFree+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <vPortFree+0x44>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <vPortFree+0x62>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60bb      	str	r3, [r7, #8]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <vPortFree+0xb8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01e      	beq.n	80057fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11a      	bne.n	80057fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <vPortFree+0xb8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	401a      	ands	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057d8:	f7fe fee0 	bl	800459c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <vPortFree+0xbc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <vPortFree+0xbc>)
 80057e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f000 f874 	bl	80058d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <vPortFree+0xc0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <vPortFree+0xc0>)
 80057f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057fa:	f7fe fedd 	bl	80045b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057fe:	bf00      	nop
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20003fe4 	.word	0x20003fe4
 800580c:	20003fd4 	.word	0x20003fd4
 8005810:	20003fe0 	.word	0x20003fe0

08005814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800581a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800581e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <prvHeapInit+0xac>)
 8005822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3307      	adds	r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <prvHeapInit+0xac>)
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800584c:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <prvHeapInit+0xb0>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <prvHeapInit+0xb0>)
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005860:	2208      	movs	r2, #8
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <prvHeapInit+0xb4>)
 8005874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <prvHeapInit+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <prvHeapInit+0xb4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvHeapInit+0xb4>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <prvHeapInit+0xb8>)
 80058a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <prvHeapInit+0xbc>)
 80058aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <prvHeapInit+0xc0>)
 80058ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	200003c8 	.word	0x200003c8
 80058c4:	20003fc8 	.word	0x20003fc8
 80058c8:	20003fd0 	.word	0x20003fd0
 80058cc:	20003fd8 	.word	0x20003fd8
 80058d0:	20003fd4 	.word	0x20003fd4
 80058d4:	20003fe4 	.word	0x20003fe4

080058d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <prvInsertBlockIntoFreeList+0xac>)
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e002      	b.n	80058ec <prvInsertBlockIntoFreeList+0x14>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d8f7      	bhi.n	80058e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d108      	bne.n	800591a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	441a      	add	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d118      	bne.n	8005960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <prvInsertBlockIntoFreeList+0xb0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d00d      	beq.n	8005956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e008      	b.n	8005968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <prvInsertBlockIntoFreeList+0xb0>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e003      	b.n	8005968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d002      	beq.n	8005976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20003fc8 	.word	0x20003fc8
 8005988:	20003fd0 	.word	0x20003fd0

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 f89a 	bl	8005ad8 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08005d50 	.word	0x08005d50
 80059c8:	08005d50 	.word	0x08005d50
 80059cc:	08005d50 	.word	0x08005d50
 80059d0:	08005d54 	.word	0x08005d54

080059d4 <__itoa>:
 80059d4:	1e93      	subs	r3, r2, #2
 80059d6:	2b22      	cmp	r3, #34	; 0x22
 80059d8:	b510      	push	{r4, lr}
 80059da:	460c      	mov	r4, r1
 80059dc:	d904      	bls.n	80059e8 <__itoa+0x14>
 80059de:	2300      	movs	r3, #0
 80059e0:	700b      	strb	r3, [r1, #0]
 80059e2:	461c      	mov	r4, r3
 80059e4:	4620      	mov	r0, r4
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	2a0a      	cmp	r2, #10
 80059ea:	d109      	bne.n	8005a00 <__itoa+0x2c>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	da07      	bge.n	8005a00 <__itoa+0x2c>
 80059f0:	232d      	movs	r3, #45	; 0x2d
 80059f2:	700b      	strb	r3, [r1, #0]
 80059f4:	4240      	negs	r0, r0
 80059f6:	2101      	movs	r1, #1
 80059f8:	4421      	add	r1, r4
 80059fa:	f000 f82b 	bl	8005a54 <__utoa>
 80059fe:	e7f1      	b.n	80059e4 <__itoa+0x10>
 8005a00:	2100      	movs	r1, #0
 8005a02:	e7f9      	b.n	80059f8 <__itoa+0x24>

08005a04 <itoa>:
 8005a04:	f7ff bfe6 	b.w	80059d4 <__itoa>

08005a08 <memcpy>:
 8005a08:	440a      	add	r2, r1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xc>
 8005a12:	4770      	bx	lr
 8005a14:	b510      	push	{r4, lr}
 8005a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1e:	4291      	cmp	r1, r2
 8005a20:	d1f9      	bne.n	8005a16 <memcpy+0xe>
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <strcat>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	4602      	mov	r2, r0
 8005a38:	7814      	ldrb	r4, [r2, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	d1fa      	bne.n	8005a38 <strcat+0x4>
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d1f9      	bne.n	8005a44 <strcat+0x10>
 8005a50:	bd10      	pop	{r4, pc}
	...

08005a54 <__utoa>:
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a56:	4c1f      	ldr	r4, [pc, #124]	; (8005ad4 <__utoa+0x80>)
 8005a58:	b08b      	sub	sp, #44	; 0x2c
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	466e      	mov	r6, sp
 8005a60:	f104 0c20 	add.w	ip, r4, #32
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	6861      	ldr	r1, [r4, #4]
 8005a68:	4637      	mov	r7, r6
 8005a6a:	c703      	stmia	r7!, {r0, r1}
 8005a6c:	3408      	adds	r4, #8
 8005a6e:	4564      	cmp	r4, ip
 8005a70:	463e      	mov	r6, r7
 8005a72:	d1f7      	bne.n	8005a64 <__utoa+0x10>
 8005a74:	7921      	ldrb	r1, [r4, #4]
 8005a76:	7139      	strb	r1, [r7, #4]
 8005a78:	1e91      	subs	r1, r2, #2
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	6038      	str	r0, [r7, #0]
 8005a7e:	2922      	cmp	r1, #34	; 0x22
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	d904      	bls.n	8005a90 <__utoa+0x3c>
 8005a86:	7019      	strb	r1, [r3, #0]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	b00b      	add	sp, #44	; 0x2c
 8005a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a90:	1e58      	subs	r0, r3, #1
 8005a92:	4684      	mov	ip, r0
 8005a94:	fbb5 f7f2 	udiv	r7, r5, r2
 8005a98:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005a9c:	fb02 5617 	mls	r6, r2, r7, r5
 8005aa0:	4476      	add	r6, lr
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005aa8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005aac:	462e      	mov	r6, r5
 8005aae:	42b2      	cmp	r2, r6
 8005ab0:	f101 0101 	add.w	r1, r1, #1
 8005ab4:	463d      	mov	r5, r7
 8005ab6:	d9ed      	bls.n	8005a94 <__utoa+0x40>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	545a      	strb	r2, [r3, r1]
 8005abc:	1919      	adds	r1, r3, r4
 8005abe:	1aa5      	subs	r5, r4, r2
 8005ac0:	42aa      	cmp	r2, r5
 8005ac2:	dae2      	bge.n	8005a8a <__utoa+0x36>
 8005ac4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ac8:	780e      	ldrb	r6, [r1, #0]
 8005aca:	7006      	strb	r6, [r0, #0]
 8005acc:	3201      	adds	r2, #1
 8005ace:	f801 5901 	strb.w	r5, [r1], #-1
 8005ad2:	e7f4      	b.n	8005abe <__utoa+0x6a>
 8005ad4:	08005d20 	.word	0x08005d20

08005ad8 <_init>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr

08005ae4 <_fini>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr
